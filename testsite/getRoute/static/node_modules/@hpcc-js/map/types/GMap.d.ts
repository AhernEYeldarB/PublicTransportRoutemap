import { HTMLWidget } from "@hpcc-js/common";
import "../src/GMap.css";
export declare let google: any;
export declare function requireGoogleMap(): any;
export declare class GMap extends HTMLWidget {
    _overlay: any;
    _userShapes: any;
    _worldSurface: any;
    _viewportSurface: any;
    _googleMapNode: any;
    _googleMap: any;
    _googleGeocoder: any;
    _prevCenterLat: any;
    _prevCenterLong: any;
    _googleStreetViewService: any;
    _googleMapPanorama: any;
    _prevZoom: any;
    _prevStreetView: any;
    _circleMap: any;
    _pinMap: any;
    _drawingManager: any;
    _prevCenterAddress: any;
    _userShapeSelection: any;
    constructor();
    data(_?: any): any;
    getMapType(): any;
    getMapOptions(): {
        panControl: boolean;
        zoomControl: boolean;
        fullscreenControl: boolean;
        mapTypeControl: boolean;
        scaleControl: boolean;
        streetViewControl: boolean;
        overviewMapControl: boolean;
        overviewMapControlOptions: {
            opened: boolean;
        };
        styles: object;
    };
    size(_?: any): any;
    enter(domNode: any, element: any): void;
    update(domNode: any, element: any): void;
    render(callback?: any): this;
    streetViewAt(pos: any, radius?: number): void;
    updateCircles(): void;
    updatePins(): void;
    createIcon(pinObj: {
        fillColor: string;
        fillOpacity?: number;
        strokeColor?: string;
    }): {
        path: string;
        fillColor: string;
        fillOpacity: number;
        scale: number;
        strokeColor: string;
        strokeWeight: number;
    };
    createMarker(lat: any, lng: any, pinObj: {
        fillColor: string;
        fillOpacity?: number;
        strokeColor?: string;
        title?: string;
    }): any;
    createCircle(lat: any, lng: any, circleObj: {
        radius?: number;
        fillColor?: string;
        strokeColor?: string;
    }): any;
    zoomTo(selection: any, singleMaxZoom?: any): this;
    zoomToFit(): this;
    drawingOptions(_: any): any;
    userShapeSelection(_: any): any;
    deleteUserShape(_: any): void;
    onDrawingComplete(event: any): void;
}
export interface GMap {
    type(): string;
    type(_: string): this;
    type_exists(): boolean;
    centerLat(): number;
    centerLat(_: number): any;
    centerLat_exists(): boolean;
    centerLong(): number;
    centerLong(_: number): this;
    centerLong_exists(): boolean;
    centerAddress(): string;
    centerAddress(_: string): this;
    centerAddress_exists(): boolean;
    zoom(): number;
    zoom(_: number): this;
    zoom_exists(): boolean;
    singleZoomToMaxZoom(): number;
    singleZoomToMaxZoom(_: number): this;
    panControl(): boolean;
    panControl(_: boolean): this;
    panControl_exists(): boolean;
    zoomControl(): boolean;
    zoomControl(_: boolean): this;
    zoomControl_exists(): boolean;
    scaleControl(): boolean;
    scaleControl(_: boolean): this;
    scaleControl_exists(): boolean;
    mapTypeControl(): boolean;
    mapTypeControl(_: boolean): this;
    mapTypeControl_exists(): boolean;
    fullscreenControl(): boolean;
    fullscreenControl(_: boolean): this;
    fullscreenControl_exists(): boolean;
    streetViewControl(): boolean;
    streetViewControl(_: boolean): this;
    streetViewControl_exists(): boolean;
    overviewMapControl(): boolean;
    overviewMapControl(_: boolean): this;
    overviewMapControl_exists(): boolean;
    streetView(): boolean;
    streetView(_: boolean): this;
    streetView_exists(): boolean;
    drawingTools(): boolean;
    drawingTools(_: boolean): this;
    drawingTools_exists(): boolean;
    drawingState(): string;
    drawingState(_: string): this;
    drawingState_exists(): boolean;
    googleMapStyles(): object;
    googleMapStyles(_: object): this;
    googleMapStyles_exists(): boolean;
}
//# sourceMappingURL=GMap.d.ts.map