import { Circle, Control, LatLng, LatLngBounds, LatLngExpression, Map, Polygon, Polyline, Rectangle } from "@hpcc-js/leaflet-shim";
import { FeatureLayer } from "./FeatureLayer";
export interface DrawState {
    polylines: LatLngExpression[][];
    polygons: Array<LatLng[] | LatLng[][] | LatLng[][][]>;
    rectangles: LatLngBounds[];
    circles: Array<{
        center: LatLng;
        radius: number;
    }>;
}
export declare class DrawLayer extends FeatureLayer {
    protected _polylines: Polyline[];
    protected _polygons: Polygon[];
    protected _rectangles: Rectangle[];
    protected _circles: Circle[];
    private _drawControl;
    hasBounds(): boolean;
    drawOptions(): Control.DrawOptions;
    save(): DrawState;
    restore(_: DrawState): void;
    private _drawOptionsHash;
    layerEnter(map: Map): void;
    layerUpdate(map: Map): void;
    layerExit(map: Map): void;
    changed(type: "ADD" | "UPDATE" | "DELETE", items: any): void;
}
export interface DrawLayer {
    opacity(): number;
    opacity(_: number): this;
    enablePolyline(): boolean;
    enablePolyline(_: boolean): this;
    enablePolygon(): boolean;
    enablePolygon(_: boolean): this;
    enableRectangle(): boolean;
    enableRectangle(_: boolean): this;
    enableCircle(): boolean;
    enableCircle(_: boolean): this;
}
//# sourceMappingURL=DrawLayer.d.ts.map