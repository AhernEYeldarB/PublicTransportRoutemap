import { Utility } from "@hpcc-js/common";
import { LatLngBounds, Map } from "@hpcc-js/leaflet-shim";
import { FeatureLayer } from "./FeatureLayer";
import "../../src/leaflet/US.css";
export declare class US extends FeatureLayer {
    protected _features: any;
    protected _selection: Utility.SimpleSelection;
    _palette: any;
    protected _dataMap: {};
    protected _dataMinWeight: any;
    protected _dataMaxWeight: any;
    constructor();
    hasBounds(): boolean;
    getBounds(): LatLngBounds;
    data(_?: any): any;
    styleFeature(feature: any): {
        color: string;
        opacity: number;
        weight: number;
        fillColor: any;
        fillOpacity: number;
    };
    svgGlowID(): string;
    private _topoJson;
    private _svgElement;
    layerEnter(map: Map): void;
    layerUpdate(map: Map): void;
    clickHandler(e: any, l: any, featureID: any): boolean;
    tooltipText(row: object, tooltip: string): string;
    tooltipHandler(l: any, featureID: any): string;
    click(row: any, col: any, sel: any): void;
}
export interface US {
    autoScaleMode(): string;
    autoScaleMode(_: string): this;
    autoScaleMode_exists(): boolean;
    paletteID(): string;
    paletteID(_: string): this;
    paletteID_exists(): boolean;
    useClonedPalette(): boolean;
    useClonedPalette(_: boolean): this;
    useClonedPalette_exists(): boolean;
    opacity(): number;
    opacity(_: number): this;
    opacity_default(_: number): this;
    opacity_exists(): boolean;
    meshVisible(): boolean;
    meshVisible(_: boolean): this;
    meshVisible_exists(): boolean;
    meshColor(): string;
    meshColor(_: string): this;
    meshColor_exists(): boolean;
    meshStrokeWidth(): number;
    meshStrokeWidth(_: number): this;
    meshStrokeWidth_exists(): boolean;
}
//# sourceMappingURL=US.d.ts.map