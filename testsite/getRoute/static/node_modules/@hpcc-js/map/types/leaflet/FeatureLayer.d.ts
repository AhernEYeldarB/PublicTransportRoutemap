import { HTMLWidget, Utility } from "@hpcc-js/common";
import { D3SvgOverlay, FeatureGroup, LatLngBounds, LeafletEvent, Map, MarkerClusterGroup } from "@hpcc-js/leaflet-shim";
import { Leaflet } from "./Leaflet";
import { ILayer } from "./TileLayer";
export declare class FeatureLayer extends Leaflet implements ILayer {
    protected _layer: FeatureGroup | MarkerClusterGroup;
    protected _selection: Utility.SimpleSelection;
    constructor(cluster?: boolean);
    owner(_: HTMLWidget): void;
    valid(): boolean;
    clear(): void;
    add(layer: any): void;
    maxZoom(): any;
    zoom(): any;
    visibleBounds(): any;
    protected _initPromise: any;
    init(): Promise<void>;
    hasBounds(): boolean;
    getBounds(): LatLngBounds;
    style(id: string, _?: number | string | boolean): this | number | string | boolean;
    layerEnter(map: Map): void;
    layerUpdate(map: Map): void;
    layerExit(map: Map): void;
    zoomEnd(e: LeafletEvent): void;
    moveEnd(e: LeafletEvent): void;
    viewReset(e: LeafletEvent): void;
}
export declare class ClusterLayer extends FeatureLayer {
    constructor(cluster?: boolean);
}
export declare class D3SurfaceLayer extends FeatureLayer {
    protected _lfd3: D3SvgOverlay;
    hasBounds(): boolean;
    getBounds(): LatLngBounds;
    layerEnter(map: Map): void;
    layerUpdate(map: Map, projection?: any): void;
    clickHandler(e: any, row: any): void;
}
//# sourceMappingURL=FeatureLayer.d.ts.map