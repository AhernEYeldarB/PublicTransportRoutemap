import { HTMLWidget, IconBar, publish, Widget } from "@hpcc-js/common";
import { AlbersLayer } from "./AlbersPR";
import { BlankLayer } from "./Blank";
import { GMapLayer } from "./GMap";
import { MapBoxLayer } from "./MapBox";
import { OpenStreetLayer } from "./OpenStreet";
import { ILayer, TileLayer } from "./TileLayer";
import "../../src/leaflet/Leaflet.css";
export declare class Leaflet extends HTMLWidget {
    protected _leafletElement: any;
    private _leafletMap;
    protected _iconBar: IconBar;
    _blankLayer: BlankLayer;
    _albersLayer: AlbersLayer;
    _mapBoxLayer: MapBoxLayer;
    _openStreetLayer: OpenStreetLayer;
    _gmapLayer: GMapLayer;
    constructor();
    zoomPlus(): void;
    zoomMinus(): void;
    zoomToDefault(): void;
    zoomToFit(): void;
    syncLayers(sLayers: ILayer[], domNode: any, element: any): void;
    protected _owner: HTMLWidget;
    isLayer(): boolean;
    baseLayer(): TileLayer;
    enter(domNode: any, element: any): void;
    private _prevCRS;
    update(domNode: any, element: any): void;
    exit(domNode: any, element: any): void;
    render(callback?: (w: Widget) => void): this;
}
export interface Leaflet {
    showToolbar(): boolean;
    showToolbar(_: boolean): this;
    mapType(): "None" | "AlbersPR" | "MapBox" | "OpenStreet" | "Google";
    mapType(_: "None" | "AlbersPR" | "MapBox" | "OpenStreet" | "Google"): this;
    mapType_default(_: "None" | "AlbersPR" | "MapBox" | "OpenStreet" | "Google"): this;
    map(): TileLayer;
    map(_: TileLayer): this;
    layers(): ILayer[];
    layers(_: ILayer[]): this;
    layers_default(_: ILayer[]): this;
    defaultLat(): number;
    defaultLat(_?: number): number | this;
    defaultLong(): number;
    defaultLong(_?: number): number | this;
    defaultZoom(): number;
    defaultZoom(_?: number): number | this;
    autoZoomToFit: publish<boolean, this>;
}
//# sourceMappingURL=Leaflet.d.ts.map