import { Layer } from "./Layer";
import "../src/Choropleth.css";
export declare function topoJsonFolder(_?: string): string;
export declare class Choropleth extends Layer {
    _dataMap: {};
    _path: any;
    _palette: any;
    _dataMinWeight: any;
    _dataMaxWeight: any;
    _choroplethData: any;
    _choroplethTransform: any;
    _choropleth: any;
    _choroTopology: any;
    _choroTopologyObjects: any;
    _prevProjection: any;
    _prevInternalOnly: any;
    constructor();
    data(_?: any): any;
    getDataBounds(): {
        x: any;
        y: any;
        width: any;
        height: any;
    };
    autoScale(): void;
    layerEnter(base: any, svgElement: any, domElement: any): void;
    layerUpdate(base: any, forcePath?: any): void;
    layerExit(base: any): void;
    layerZoomed(base: any): void;
    click(row: any, column: any, selected: any): void;
    dblclick(row: any, column: any, selected: any): void;
}
export interface Choropleth {
    autoScaleMode(): string;
    autoScaleMode(_: string): this;
    autoScaleMode_exists(): boolean;
    paletteID(): string;
    paletteID(_: string): this;
    paletteID_exists(): boolean;
    useClonedPalette(): boolean;
    useClonedPalette(_: boolean): this;
    useClonedPalette_exists(): boolean;
    opacity(): number;
    opacity(_: number): this;
    opacity_exists(): boolean;
    meshVisible(): boolean;
    meshVisible(_: boolean): this;
    meshVisible_exists(): boolean;
    meshColor(): string;
    meshColor(_: string): this;
    meshColor_exists(): boolean;
    meshStrokeWidth(): number;
    meshStrokeWidth(_: number): this;
    meshStrokeWidth_exists(): boolean;
    internalOnly(): boolean;
    internalOnly(_: boolean): this;
    internalOnly_exists(): boolean;
}
//# sourceMappingURL=Choropleth.d.ts.map