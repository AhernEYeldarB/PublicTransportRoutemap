import { CanvasWidget } from "@hpcc-js/common";
export interface CanvasPinRow {
    0: number;
    1: number;
    is_cluster: boolean;
    already_flagged: boolean;
    weight: number;
    fillStyle: string;
    strokeStyle: string;
    overlap_arr: CanvasPinRow[];
}
export declare class CanvasPins extends CanvasWidget {
    _ctx: any;
    _quadtree_rect_arr: any;
    _drawData: any;
    _overlap_count: number;
    _sub_overlap_count: number;
    constructor();
    enter(domNode: any, element: any): void;
    update(domNode: any, element: any): void;
    applyClustering(_data: Readonly<CanvasPinRow[]>): Readonly<CanvasPinRow[]>;
    drawQuadtree(): void;
    draw(data_arr: any): void;
    skewedData(): any[];
}
export interface CanvasPins {
    clusterMode(): any;
    clusterMode(_: any): CanvasPins;
    allCircles(): boolean;
    allCircles(_: boolean): CanvasPins;
    showQuadtree(): boolean;
    showQuadtree(_: boolean): CanvasPins;
    useAveragePos(): boolean;
    useAveragePos(_: boolean): CanvasPins;
    useWeightedRadius(): boolean;
    useWeightedRadius(_: boolean): CanvasPins;
    radiusWeightMult(): number;
    radiusWeightMult(_: number): CanvasPins;
    shrinkFontToPin(): boolean;
    shrinkFontToPin(_: boolean): CanvasPins;
    enableClustering(): boolean;
    enableClustering(_: boolean): CanvasPins;
    searchRectMult(): number;
    searchRectMult(_: number): CanvasPins;
    gridCellSize(): number;
    gridCellSize(_: number): CanvasPins;
    arrowHeight(): number;
    arrowHeight(_: number): CanvasPins;
    arrowWidth(): number;
    arrowWidth(_: number): CanvasPins;
    bottomRightX(): number;
    bottomRightX(_: number): CanvasPins;
    bottomRightY(): number;
    bottomRightY(_: number): CanvasPins;
    topLeftX(): number;
    topLeftX(_: number): CanvasPins;
    topLeftY(): number;
    topLeftY(_: number): CanvasPins;
    pinHeight(): number;
    pinHeight(_: number): CanvasPins;
    pinWidth(): number;
    pinWidth(_: number): CanvasPins;
    pinFontFamily(): string;
    pinFontFamily(_: string): CanvasPins;
    pinFontSize(): number;
    pinFontSize(_: number): CanvasPins;
    bottomRightX_exists(): boolean;
    bottomRightY_exists(): boolean;
    topLeftX_exists(): boolean;
    topLeftY_exists(): boolean;
}
//# sourceMappingURL=CanvasPins.d.ts.map