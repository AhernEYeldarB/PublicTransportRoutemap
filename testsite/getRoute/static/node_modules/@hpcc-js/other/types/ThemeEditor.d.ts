import { HTMLWidget } from "@hpcc-js/common";
import "../src/ThemeEditor.css";
export declare class ThemeEditor extends HTMLWidget {
    _current_grouping: any;
    _showing_columns: any;
    _showing_data: any;
    _contentEditors: any;
    _showSettings: any;
    _defaultThemes: any;
    _widgetObjsById: any;
    _sharedProperties: any;
    getThemes: any;
    getSerials: any;
    getDefaultThemes: any;
    getDefaultSerials: any;
    constructor();
    showSettings(_?: any): any;
    onChange(widget: any, propID: any): void;
    enter(domNode: any, element: any): void;
    widgetProperty(widget: any, propID: any, _?: any): any;
    load(elmValue: any): void;
    save(themeName: any): void;
    needsPropTableRedraw(): boolean;
    update(domNode: any, element: any): void;
    exit(domNode: any, element: any): void;
    click(d: any): void;
    propertiesTableHtml(editorParams: any): string;
    buildTableObjects(targetElement: any, propObjs: any): void;
    initFunctionality(elm: any): void;
    sharedPropertyTableHtml(sectionObj: any): string;
    tableObjHtml(tableObj: any): string;
    tableRowObjHtml(rowObj: any): string;
    setWidgetObjsById(widgetProp: any): void;
    checkTagFilter(tagArr: any): boolean;
    findSharedProperties(data: any): any;
    themeMode: {
        (): boolean;
        (_: boolean): ThemeEditor;
    };
    themeMode_exists: () => boolean;
    saveTheme: {
        (): string;
        (_: string): ThemeEditor;
    };
    saveTheme_exists: () => boolean;
    loadedTheme: {
        (): string;
        (_: string): ThemeEditor;
    };
    loadedTheme_exists: () => boolean;
    saveSerial: {
        (): string;
        (_: string): ThemeEditor;
    };
    saveSerial_exists: () => boolean;
    loadedSerial: {
        (): string;
        (_: string): ThemeEditor;
    };
    loadedSerial_exists: () => boolean;
    showColumns: {
        (): boolean;
        (_: boolean): ThemeEditor;
    };
    showColumns_exists: () => boolean;
    showData: {
        (): boolean;
        (_: boolean): ThemeEditor;
    };
    showData_exists: () => boolean;
    shareCountMin: {
        (): number;
        (_: number): ThemeEditor;
    };
    shareCountMin_exists: () => boolean;
    paramGrouping: {
        (): string;
        (_: string): ThemeEditor;
    };
    paramGrouping_exists: () => boolean;
    editorComplexity: {
        (): string;
        (_: string): ThemeEditor;
    };
    editorComplexity_exists: () => boolean;
    sectionTitle: {
        (): string;
        (_: string): ThemeEditor;
    };
    sectionTitle_exists: () => boolean;
    collapsibleSections: {
        (): boolean;
        (_: boolean): ThemeEditor;
    };
    collapsibleSections_exists: () => boolean;
}
//# sourceMappingURL=ThemeEditor.d.ts.map