import { HTMLWidget, Widget } from "@hpcc-js/common";
import "../src/Table.css";
export declare class Table extends HTMLWidget {
    protected _paginator: any;
    protected _selectionBag: any;
    protected _selectionPrevClick: any;
    protected _paginatorTableSpacing: any;
    tableDiv: any;
    thead: any;
    table: any;
    fixedHead: any;
    fixedHeadTable: any;
    fixedThead: any;
    unfixedThead: any;
    tbody: any;
    tfoot: any;
    fixedCol: any;
    fixedColTable: any;
    fixedColHead: any;
    fixedColHeadRow: any;
    fixedColBody: any;
    fixedColFoot: any;
    fixedColFootRow: any;
    protected _prevDescending: any;
    protected _prevSortByFieldIndex: any;
    protected _hasChildWidgets: any;
    protected _tNumPages: any;
    protected _empty_col_idx_arr: any[];
    constructor();
    size(): any;
    size(_: any): Widget;
    isHidden(colIdx: any): boolean;
    tableColumns(_?: string[]): string[];
    tableData(_?: any): any;
    field(rowIdx: any, colIdx: any): {
        transform: (d: any) => any;
    };
    calcFieldsIndex(colIdx: any): any;
    getEmptyColumnIdxArr(columns: any, data: any): any[];
    enter(domNode: any, element: any): void;
    update(domNode: any, element: any): void;
    exit(domNode: any, element: any): void;
    setColumnWidths(rows: any): void;
    getBodyRow(i: any): any;
    getFixedRow(i: any): any;
    setOnScrollEvents(scrollNode: any, margHeight: any): void;
    _generateTempRow(): any;
    _createSelectionObject(d: any): {
        _id: any;
        element: () => any;
    };
    _calcRowsPerPage(th: any): number;
    sort(idx: any): this;
    selection(_: any): any;
    selectionBagClick(d: any, i: any): void;
    applyHoverRowStyles(row: any): void;
    applySelectedRowStyles(row: any): void;
    applyRowStyles(row: any, isFirstCol?: boolean): void;
    applyFirstColRowStyles(rows: any): void;
    applyStyleToRows(rows: any, isFirstCol?: boolean): void;
    getColumnAlignment(rowIdx: any, colIdx: any, cell: any): string;
    serializeState(): {
        selection: any;
        data: any;
    };
    deserializeState(state: any): this;
    click(row: any, column: any, selected: any): void;
    dblclick(row: any, column: any, selected: any): void;
    headerClick(column: any, idx: any): void;
    renderHtmlDataCells: {
        (): boolean;
        (_: boolean): Table;
    };
    pagination: {
        (): boolean;
        (_: boolean): Table;
    };
    paginationLimit: {
        (): any;
        (_: any): Table;
    };
    itemsPerPage: {
        (): any;
        (_: any): Table;
    };
    pageNumber: {
        (): number;
        (_: number): Table;
    };
    adjacentPages: {
        (): number;
        (_: number): Table;
    };
    topN: {
        (): number;
        (_: number): Table;
    };
    pivot: {
        (): boolean;
        (_: boolean): Table;
    };
    showHeader: {
        (): boolean;
        (_: boolean): Table;
    };
    fixedHeader: {
        (): boolean;
        (_: boolean): Table;
    };
    fixedColumn: {
        (): boolean;
        (_: boolean): Table;
    };
    multiSelect: {
        (): boolean;
        (_: boolean): Table;
    };
    fixedSize: {
        (): boolean;
        (_: boolean): Table;
    };
    hideEmptyColumns: {
        (): boolean;
        (_: boolean): Table;
    };
    theadFontSize: {
        (): string;
        (_: string): Table;
    };
    tbodyFontSize: {
        (): string;
        (_: string): Table;
    };
    tfootFontSize: {
        (): string;
        (_: string): Table;
    };
    theadFontColor: {
        (): string;
        (_: string): Table;
    };
    tbodyFontColor: {
        (): string;
        (_: string): Table;
    };
    tfootFontColor: {
        (): string;
        (_: string): Table;
    };
    theadFontFamily: {
        (): string;
        (_: string): Table;
    };
    tbodyFontFamily: {
        (): string;
        (_: string): Table;
    };
    tfootFontFamily: {
        (): string;
        (_: string): Table;
    };
    theadCellBorderColor: {
        (): string;
        (_: string): Table;
    };
    tfootCellBorderColor: {
        (): string;
        (_: string): Table;
    };
    theadRowBackgroundColor: {
        (): string;
        (_: string): Table;
    };
    tfootRowBackgroundColor: {
        (): string;
        (_: string): Table;
    };
    tbodyCellBorderColor: {
        (): string;
        (_: string): Table;
    };
    tbodyRowBackgroundColor: {
        (): string;
        (_: string): Table;
    };
    tbodyFirstColFontColor: {
        (): string;
        (_: string): Table;
    };
    tbodyFirstColBackgroundColor: {
        (): string;
        (_: string): Table;
    };
    tbodyHoverRowFontColor: {
        (): string;
        (_: string): Table;
    };
    tbodyHoverRowBackgroundColor: {
        (): string;
        (_: string): Table;
    };
    tbodySelectedRowFontColor: {
        (): string;
        (_: string): Table;
    };
    tbodySelectedRowBackgroundColor: {
        (): string;
        (_: string): Table;
    };
    tableZebraColor: {
        (): string;
        (_: string): Table;
    };
    tableZebraColor_exists: () => boolean;
    totalledColumns: {
        (): any[];
        (_: any[]): Table;
    };
    totalledLabel: {
        (): string;
        (_: string): Table;
    };
    hiddenColumns: {
        (): any[];
        (_: any[]): Table;
    };
    stringAlign: {
        (): string;
        (_: string): Table;
    };
    numberAlign: {
        (): string;
        (_: string): Table;
    };
    verticalAlign: {
        (): string;
        (_: string): Table;
    };
    minWidgetWidth: {
        (): number;
        (_: number): Table;
    };
    minWidgetHeight: {
        (): number;
        (_: number): Table;
    };
    sortByFieldIndex: {
        (): number;
        (_: number): Table;
    };
    sortByFieldIndex_exists: () => boolean;
    descending: {
        (): boolean;
        (_: boolean): Table;
    };
}
//# sourceMappingURL=Table.d.ts.map