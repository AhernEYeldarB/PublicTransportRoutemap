import { CanvasWidget } from "@hpcc-js/common";
export declare class HeatMap extends CanvasWidget {
    _heat: any;
    _palette: any;
    constructor();
    enter(domNode: any, element: any): void;
    update(domNode: any, element: any): void;
    exit(domNode: any, element: any): void;
    resize(size: any): this;
    skewedData(): any[];
    radius: {
        (): number;
        (_: number): HeatMap;
    };
    radius_exists: () => boolean;
    blur: {
        (): number;
        (_: number): HeatMap;
    };
    blur_exists: () => boolean;
    max: {
        (): number;
        (_: number): HeatMap;
    };
    max_exists: () => boolean;
    gradient: {
        (): object;
        (_: object): HeatMap;
    };
    gradient_exists: () => boolean;
    usePalette: {
        (): boolean;
        (_: boolean): HeatMap;
    };
    usePalette_exists: () => boolean;
    colorCount: {
        (): number;
        (_: number): HeatMap;
    };
    colorCount_exists: () => boolean;
    paletteID: {
        (): string;
        (_: string): HeatMap;
    };
    paletteID_exists: () => boolean;
    useClonedPalette: {
        (): boolean;
        (_: boolean): HeatMap;
    };
    useClonedPalette_exists: () => boolean;
    topLeftX: {
        (): number;
        (_: number): HeatMap;
    };
    topLeftX_exists: () => boolean;
    topLeftY: {
        (): number;
        (_: number): HeatMap;
    };
    topLeftY_exists: () => boolean;
    bottomRightX: {
        (): number;
        (_: number): HeatMap;
    };
    bottomRightX_exists: () => boolean;
    bottomRightY: {
        (): number;
        (_: number): HeatMap;
    };
    bottomRightY_exists: () => boolean;
}
//# sourceMappingURL=HeatMap.d.ts.map