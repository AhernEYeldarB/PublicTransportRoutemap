export declare class ESPUrl {
    protected _protocol: string;
    protected _hostname: string;
    protected _url: any;
    protected _port: any;
    protected _search: any;
    protected _pathname: any;
    protected _params: any;
    protected _hash: any;
    protected _host: any;
    constructor();
    url(_: string): this;
    url(): string;
    protocol(_: string): this;
    protocol(): string;
    hostname(_: string): this;
    hostname(): string;
    port(_: string): this;
    port(): string;
    search(_: string): this;
    search(): string;
    pathname(_: string): this;
    pathname(): string;
    hash(_: string): this;
    hash(): string;
    host(_: string): this;
    host(): string;
    params(_: string): this;
    params(): string;
    param(key: string): any;
    isWsWorkunits(): any;
    isWorkunitResult(): any;
    isWsEcl(): any;
    isWsWorkunits_GetStats(): any;
    getUrl(overrides: any): string;
}
export declare function ESPMappings(mappings: any): void;
export declare class Comms extends ESPUrl {
    protected _proxyMappings: any;
    protected _mappings: any;
    protected _timeout: any;
    protected _hipieResults: any;
    protected _hipieResultsLength: any;
    constructor();
    hipieResults(_: any): any;
    jsonp(url: any, request: any): Promise<unknown>;
    ajax(method: any, url: any, request?: any): Promise<unknown>;
    get(url: any, request?: any): Promise<unknown>;
    post(url: any, request: any): Promise<unknown>;
    mappings(_?: any): any;
    proxyMappings(_?: any): any;
    timeout(_?: any): any;
}
export declare class Basic extends Comms {
    protected _cacheCalls: any;
    constructor();
    cacheCalls(_?: any): any;
    call(request: any, callback: any): Promise<unknown>;
}
export declare class WsECL extends Comms {
    protected _target: any;
    protected _query: any;
    constructor();
    url(_?: any): any;
    target(_?: any): any;
    query(_?: any): any;
    constructUrl(): any;
    call(target: any, request: any, callback: any): Promise<any>;
    send(request: any, callback: any): Promise<any>;
}
export declare class WsWorkunits extends Comms {
    protected _wuid: string;
    protected _jobname: string;
    protected _sequence: any;
    protected _resultName: any;
    protected _fetchResultNamesPromise: any;
    protected _fetchResultPromise: {};
    protected _resultNameCache: {};
    protected _resultNameCacheCount: number;
    protected _total: any;
    constructor();
    url(_?: any): any;
    wuid(_?: any): string | this;
    jobname(_?: any): string | this;
    sequence(_?: any): any;
    resultName(_?: any): any;
    appendParam(label: any, value: any, params: any): any;
    constructUrl(): string;
    _fetchResult(target: any, callback: any, skipMapping: any): any;
    fetchResult(target: any, callback: any, skipMapping: any): any;
    WUQuery(_request: any, callback: any): Promise<any>;
    fetchResultNames(callback?: any): any;
    fetchResults(callback: any, skipMapping: any): any;
    postFilter(request: any, response: any): {};
    send(request: any, callback: any): void;
}
declare function HIPIERoxie(): void;
declare namespace HIPIERoxie {
    var prototype: any;
}
declare function HIPIEWorkunit(): void;
declare namespace HIPIEWorkunit {
    var prototype: any;
}
declare function HIPIEDatabomb(): void;
declare namespace HIPIEDatabomb {
    var prototype: any;
}
export declare function createESPConnection(url: any): any;
export declare function hookJsonp(func: any): void;
export { HIPIEWorkunit, HIPIERoxie, HIPIEDatabomb };
//# sourceMappingURL=Comms.d.ts.map