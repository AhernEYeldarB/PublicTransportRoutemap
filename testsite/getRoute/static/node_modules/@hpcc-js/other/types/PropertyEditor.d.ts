import { HTMLWidget, PropertyExt } from "@hpcc-js/common";
import "../src/PropertyEditor.css";
export declare class PropertyEditor extends HTMLWidget {
    _widgetOrig: any;
    _parentPropertyEditor: any;
    _show_settings: boolean;
    _selectedItems: any;
    __meta_sorting: any;
    _watch: any;
    private _childPE;
    constructor();
    parentPropertyEditor(_?: PropertyEditor): PropertyEditor;
    depth(): number;
    _show_header: boolean;
    show_header(): boolean;
    show_header(_: boolean): PropertyEditor;
    show_settings(): boolean;
    show_settings(_: boolean): PropertyEditor;
    rootWidgets(): any;
    update(domNode: any, element: any): void;
    exit(domNode: any, element: any): void;
    private watchDepth;
    watchWidget(widget: any): void;
    enterHeader(th: any): void;
    updateHeader(th: any): void;
    peInputCount(): any;
    peInputCollapsedCount(): any;
    peInputIcon(): "fa-caret-down" | "fa-caret-up" | "fa-caret-right";
    refreshExpandIcon(): void;
    refreshSortIcon(sortIcon: any, increment?: boolean): void;
    refreshHideParamsIcon(hideParamsIcon: any): void;
    gatherDataTree(widget: any): {
        label: string;
        children: any[];
    };
    getDataTree(): {
        label: string;
        children: any[];
    };
    _rowSorting(paramArr: any): void;
    filterInputs(d: any): any;
    renderInputs(element: any, d: any): void;
    updateWidgetRow(widget: PropertyExt, element: any, param: any): void;
    setProperty(widget: any, id: any, value: any): void;
    enterInputs(widget: any, cell: any, param: any): void;
    updateInputs(widget: any, param: any): void;
    showFields: {
        (): boolean;
        (_: boolean): PropertyEditor;
    };
    showData: {
        (): boolean;
        (_: boolean): PropertyEditor;
    };
    sorting: {
        (): string;
        (_: string): PropertyEditor;
    };
    sorting_options: () => string[];
    hideNonWidgets: {
        (): boolean;
        (_: boolean): PropertyEditor;
    };
    label: {
        (): string;
        (_: string): PropertyEditor;
    };
    filterTags: {
        (): string;
        (_: string): PropertyEditor;
    };
    excludeTags: {
        (): string[];
        (_: string[]): PropertyEditor;
    };
    excludeParams: {
        (): string[];
        (_: string[]): PropertyEditor;
    };
    widget: {
        (): PropertyExt;
        (_: PropertyExt): PropertyEditor;
    };
}
//# sourceMappingURL=PropertyEditor.d.ts.map