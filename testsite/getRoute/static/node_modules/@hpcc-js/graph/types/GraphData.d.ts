import { Edge as GLEdge, GraphEdge, Node as GLNode } from "dagre";
export interface GraphLabel {
    debugTiming?: boolean;
}
export declare class GraphData {
    private _g;
    constructor();
    parent(cn: string): string;
    private filterNodes;
    eachNode(callback: any): void;
    private filterEdges;
    eachEdge(callback: any): void;
    setData(subgraphs: any, vertices: any, edges: any, hierarchy: any, merge: any): {
        addedVertices: any[];
        addedEdges: any[];
    };
    node(id: string): GLNode;
    nodeCount(): number;
    nodes(): GLNode[];
    nodeEdges(id: string): GLEdge[];
    edge(glEdge: GLEdge): GraphEdge;
    edges(): GraphEdge[];
    neighbors(id: string): GLNode[];
    singleNeighbors(id: string): GLNode[];
    gatherShortestPath(pathObj: any, targetID: any): any[];
    shortestPath(sourceID: string, targetID: string): any[];
    undirectedShortestPath(sourceID: string, targetID: string): any[];
    getJSON(): string;
}
//# sourceMappingURL=GraphData.d.ts.map