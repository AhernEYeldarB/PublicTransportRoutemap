import { SVGWidget } from "./SVGWidget";
import { IconBar } from "./TitleBar";
import "../src/SVGZoomWidget.css";
export declare class SVGZoomWidget extends SVGWidget {
    protected _renderElement: any;
    private _currZoom;
    protected _zoomScale: number;
    protected _zoomTranslate: number[];
    protected _zoomGrab: any;
    protected _zoomG: any;
    private _prevZoomable;
    protected _brush: any;
    protected _mouseCapture: boolean;
    protected _mouseDownMode: "zoom" | "selection";
    protected _mouseDownTransform: any;
    protected _buttonToFit: any;
    protected _buttonPlus: any;
    protected _buttonMinus: any;
    protected _buttonLast: any;
    _iconBar: IconBar;
    constructor();
    getScreenBBox(target: any): {
        x: any;
        y: any;
        width: number;
        height: number;
    };
    zoomScale(): number;
    zoomTranslate(): number[];
    zoomExtent(range: any): void;
    zoomTo(translate?: any, scale?: any, transitionDuration?: number): void;
    zoomPlus(): void;
    zoomMinus(): void;
    centerOnBBox(bbox: any, transitionDuration?: any): void;
    zoomToBBox(bbox: any, transitionDuration?: any, widthOnly?: boolean, scale?: number): void;
    zoomToScale(scale: any, transitionDuration?: any): void;
    zoomToWidth(transitionDuration?: any): void;
    zoomToFit(transitionDuration?: any): void;
    onZoomed(): void;
    enter(domNode: any, element: any): void;
    update(domNode: any, element: any): void;
    exit(domNode: any, element: any): void;
}
export interface SVGZoomWidget {
    showToolbar(): boolean;
    showToolbar(_: boolean): this;
    zoomable(): boolean;
    zoomable(_: boolean): this;
    zoomDuration(): number;
    zoomDuration(_: number): this;
    zoomToFitLimit(): number;
    zoomToFitLimit(_: number): this;
    zoomToFitLimit_exists(): boolean;
}
//# sourceMappingURL=SVGZoomWidget.d.ts.map