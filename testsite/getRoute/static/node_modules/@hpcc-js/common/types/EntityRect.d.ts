import { Entity } from "./Entity";
import { HTMLWidget } from "./HTMLWidget";
import { publish } from "./PropertyExt";
import { InputField } from "./Widget";
import "../src/EntityRect.css";
export declare class EntityRect extends Entity {
    protected _element_textbox: any;
    constructor();
    enter(domNode: any, element: any): void;
    update(domNode: any, element: any): void;
    render(callback?: (w: EntityRect) => void): this;
}
export interface EntityRect {
    fixedWidth(): number;
    fixedWidth(_: number): this;
    fixedHeight(): number;
    fixedHeight(_: number): this;
}
export declare class EntityRectList extends HTMLWidget {
    static __inputs: InputField[];
    fixedHeight: publish<this, number>;
    backgroundColor: publish<this, string>;
    backgroundColorColumn: publish<this, string>;
    borderColor: publish<this, string>;
    borderColorColumn: publish<this, string>;
    icon: publish<this, string>;
    iconColumn: publish<this, string>;
    iconColor: publish<this, string>;
    iconColorColumn: publish<this, string>;
    titleColumn: publish<this, string>;
    titleColor: publish<this, string>;
    titleColorColumn: publish<this, string>;
    descriptionColumn: publish<this, string>;
    descriptionColor: publish<this, string>;
    descriptionColorColumn: publish<this, string>;
    private _enityRectLocal;
    constructor();
    entityRectData(): any;
    enter(domNode: any, element: any): void;
    update(domNode: any, element: any): void;
    exit(domNode: any, element: any): void;
    click(row: any, column: any, selected: any): void;
    dblclick(row: any, column: any, selected: any): void;
    _selection: any;
}
//# sourceMappingURL=EntityRect.d.ts.map