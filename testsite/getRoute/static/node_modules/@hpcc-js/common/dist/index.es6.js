import { classID2Meta, hashSum, isArray } from '@hpcc-js/util';

var PKG_NAME = "@hpcc-js/common";
var PKG_VERSION = "2.19.2";
var BUILD_VERSION = "2.10.1";

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

var xhtml = "http://www.w3.org/1999/xhtml";

var namespaces = {
  svg: "http://www.w3.org/2000/svg",
  xhtml: xhtml,
  xlink: "http://www.w3.org/1999/xlink",
  xml: "http://www.w3.org/XML/1998/namespace",
  xmlns: "http://www.w3.org/2000/xmlns/"
};

function namespace(name) {
  var prefix = name += "", i = prefix.indexOf(":");
  if (i >= 0 && (prefix = name.slice(0, i)) !== "xmlns") name = name.slice(i + 1);
  return namespaces.hasOwnProperty(prefix) ? {space: namespaces[prefix], local: name} : name;
}

function creatorInherit(name) {
  return function() {
    var document = this.ownerDocument,
        uri = this.namespaceURI;
    return uri === xhtml && document.documentElement.namespaceURI === xhtml
        ? document.createElement(name)
        : document.createElementNS(uri, name);
  };
}

function creatorFixed(fullname) {
  return function() {
    return this.ownerDocument.createElementNS(fullname.space, fullname.local);
  };
}

function creator(name) {
  var fullname = namespace(name);
  return (fullname.local
      ? creatorFixed
      : creatorInherit)(fullname);
}

function none() {}

function selector(selector) {
  return selector == null ? none : function() {
    return this.querySelector(selector);
  };
}

function selection_select(select) {
  if (typeof select !== "function") select = selector(select);

  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
        if ("__data__" in node) subnode.__data__ = node.__data__;
        subgroup[i] = subnode;
      }
    }
  }

  return new Selection(subgroups, this._parents);
}

function empty() {
  return [];
}

function selectorAll(selector) {
  return selector == null ? empty : function() {
    return this.querySelectorAll(selector);
  };
}

function selection_selectAll(select) {
  if (typeof select !== "function") select = selectorAll(select);

  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        subgroups.push(select.call(node, node.__data__, i, group));
        parents.push(node);
      }
    }
  }

  return new Selection(subgroups, parents);
}

function matcher(selector) {
  return function() {
    return this.matches(selector);
  };
}

function selection_filter(match) {
  if (typeof match !== "function") match = matcher(match);

  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
        subgroup.push(node);
      }
    }
  }

  return new Selection(subgroups, this._parents);
}

function sparse(update) {
  return new Array(update.length);
}

function selection_enter() {
  return new Selection(this._enter || this._groups.map(sparse), this._parents);
}

function EnterNode(parent, datum) {
  this.ownerDocument = parent.ownerDocument;
  this.namespaceURI = parent.namespaceURI;
  this._next = null;
  this._parent = parent;
  this.__data__ = datum;
}

EnterNode.prototype = {
  constructor: EnterNode,
  appendChild: function(child) { return this._parent.insertBefore(child, this._next); },
  insertBefore: function(child, next) { return this._parent.insertBefore(child, next); },
  querySelector: function(selector) { return this._parent.querySelector(selector); },
  querySelectorAll: function(selector) { return this._parent.querySelectorAll(selector); }
};

function constant(x) {
  return function() {
    return x;
  };
}

var keyPrefix = "$"; // Protect against keys like “__proto__”.

function bindIndex(parent, group, enter, update, exit, data) {
  var i = 0,
      node,
      groupLength = group.length,
      dataLength = data.length;

  // Put any non-null nodes that fit into update.
  // Put any null nodes into enter.
  // Put any remaining data into enter.
  for (; i < dataLength; ++i) {
    if (node = group[i]) {
      node.__data__ = data[i];
      update[i] = node;
    } else {
      enter[i] = new EnterNode(parent, data[i]);
    }
  }

  // Put any non-null nodes that don’t fit into exit.
  for (; i < groupLength; ++i) {
    if (node = group[i]) {
      exit[i] = node;
    }
  }
}

function bindKey(parent, group, enter, update, exit, data, key) {
  var i,
      node,
      nodeByKeyValue = {},
      groupLength = group.length,
      dataLength = data.length,
      keyValues = new Array(groupLength),
      keyValue;

  // Compute the key for each node.
  // If multiple nodes have the same key, the duplicates are added to exit.
  for (i = 0; i < groupLength; ++i) {
    if (node = group[i]) {
      keyValues[i] = keyValue = keyPrefix + key.call(node, node.__data__, i, group);
      if (keyValue in nodeByKeyValue) {
        exit[i] = node;
      } else {
        nodeByKeyValue[keyValue] = node;
      }
    }
  }

  // Compute the key for each datum.
  // If there a node associated with this key, join and add it to update.
  // If there is not (or the key is a duplicate), add it to enter.
  for (i = 0; i < dataLength; ++i) {
    keyValue = keyPrefix + key.call(parent, data[i], i, data);
    if (node = nodeByKeyValue[keyValue]) {
      update[i] = node;
      node.__data__ = data[i];
      nodeByKeyValue[keyValue] = null;
    } else {
      enter[i] = new EnterNode(parent, data[i]);
    }
  }

  // Add any remaining nodes that were not bound to data to exit.
  for (i = 0; i < groupLength; ++i) {
    if ((node = group[i]) && (nodeByKeyValue[keyValues[i]] === node)) {
      exit[i] = node;
    }
  }
}

function selection_data(value, key) {
  if (!value) {
    data = new Array(this.size()), j = -1;
    this.each(function(d) { data[++j] = d; });
    return data;
  }

  var bind = key ? bindKey : bindIndex,
      parents = this._parents,
      groups = this._groups;

  if (typeof value !== "function") value = constant(value);

  for (var m = groups.length, update = new Array(m), enter = new Array(m), exit = new Array(m), j = 0; j < m; ++j) {
    var parent = parents[j],
        group = groups[j],
        groupLength = group.length,
        data = value.call(parent, parent && parent.__data__, j, parents),
        dataLength = data.length,
        enterGroup = enter[j] = new Array(dataLength),
        updateGroup = update[j] = new Array(dataLength),
        exitGroup = exit[j] = new Array(groupLength);

    bind(parent, group, enterGroup, updateGroup, exitGroup, data, key);

    // Now connect the enter nodes to their following update node, such that
    // appendChild can insert the materialized enter node before this node,
    // rather than at the end of the parent node.
    for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {
      if (previous = enterGroup[i0]) {
        if (i0 >= i1) i1 = i0 + 1;
        while (!(next = updateGroup[i1]) && ++i1 < dataLength);
        previous._next = next || null;
      }
    }
  }

  update = new Selection(update, parents);
  update._enter = enter;
  update._exit = exit;
  return update;
}

function selection_exit() {
  return new Selection(this._exit || this._groups.map(sparse), this._parents);
}

function selection_join(onenter, onupdate, onexit) {
  var enter = this.enter(), update = this, exit = this.exit();
  enter = typeof onenter === "function" ? onenter(enter) : enter.append(onenter + "");
  if (onupdate != null) update = onupdate(update);
  if (onexit == null) exit.remove(); else onexit(exit);
  return enter && update ? enter.merge(update).order() : update;
}

function selection_merge(selection) {

  for (var groups0 = this._groups, groups1 = selection._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group0[i] || group1[i]) {
        merge[i] = node;
      }
    }
  }

  for (; j < m0; ++j) {
    merges[j] = groups0[j];
  }

  return new Selection(merges, this._parents);
}

function selection_order() {

  for (var groups = this._groups, j = -1, m = groups.length; ++j < m;) {
    for (var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0;) {
      if (node = group[i]) {
        if (next && node.compareDocumentPosition(next) ^ 4) next.parentNode.insertBefore(node, next);
        next = node;
      }
    }
  }

  return this;
}

function selection_sort(compare) {
  if (!compare) compare = ascending;

  function compareNode(a, b) {
    return a && b ? compare(a.__data__, b.__data__) : !a - !b;
  }

  for (var groups = this._groups, m = groups.length, sortgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        sortgroup[i] = node;
      }
    }
    sortgroup.sort(compareNode);
  }

  return new Selection(sortgroups, this._parents).order();
}

function ascending(a, b) {
  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
}

function selection_call() {
  var callback = arguments[0];
  arguments[0] = this;
  callback.apply(null, arguments);
  return this;
}

function selection_nodes() {
  var nodes = new Array(this.size()), i = -1;
  this.each(function() { nodes[++i] = this; });
  return nodes;
}

function selection_node() {

  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
    for (var group = groups[j], i = 0, n = group.length; i < n; ++i) {
      var node = group[i];
      if (node) return node;
    }
  }

  return null;
}

function selection_size() {
  var size = 0;
  this.each(function() { ++size; });
  return size;
}

function selection_empty() {
  return !this.node();
}

function selection_each(callback) {

  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
    for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {
      if (node = group[i]) callback.call(node, node.__data__, i, group);
    }
  }

  return this;
}

function attrRemove(name) {
  return function() {
    this.removeAttribute(name);
  };
}

function attrRemoveNS(fullname) {
  return function() {
    this.removeAttributeNS(fullname.space, fullname.local);
  };
}

function attrConstant(name, value) {
  return function() {
    this.setAttribute(name, value);
  };
}

function attrConstantNS(fullname, value) {
  return function() {
    this.setAttributeNS(fullname.space, fullname.local, value);
  };
}

function attrFunction(name, value) {
  return function() {
    var v = value.apply(this, arguments);
    if (v == null) this.removeAttribute(name);
    else this.setAttribute(name, v);
  };
}

function attrFunctionNS(fullname, value) {
  return function() {
    var v = value.apply(this, arguments);
    if (v == null) this.removeAttributeNS(fullname.space, fullname.local);
    else this.setAttributeNS(fullname.space, fullname.local, v);
  };
}

function selection_attr(name, value) {
  var fullname = namespace(name);

  if (arguments.length < 2) {
    var node = this.node();
    return fullname.local
        ? node.getAttributeNS(fullname.space, fullname.local)
        : node.getAttribute(fullname);
  }

  return this.each((value == null
      ? (fullname.local ? attrRemoveNS : attrRemove) : (typeof value === "function"
      ? (fullname.local ? attrFunctionNS : attrFunction)
      : (fullname.local ? attrConstantNS : attrConstant)))(fullname, value));
}

function defaultView(node) {
  return (node.ownerDocument && node.ownerDocument.defaultView) // node is a Node
      || (node.document && node) // node is a Window
      || node.defaultView; // node is a Document
}

function styleRemove(name) {
  return function() {
    this.style.removeProperty(name);
  };
}

function styleConstant(name, value, priority) {
  return function() {
    this.style.setProperty(name, value, priority);
  };
}

function styleFunction(name, value, priority) {
  return function() {
    var v = value.apply(this, arguments);
    if (v == null) this.style.removeProperty(name);
    else this.style.setProperty(name, v, priority);
  };
}

function selection_style(name, value, priority) {
  return arguments.length > 1
      ? this.each((value == null
            ? styleRemove : typeof value === "function"
            ? styleFunction
            : styleConstant)(name, value, priority == null ? "" : priority))
      : styleValue(this.node(), name);
}

function styleValue(node, name) {
  return node.style.getPropertyValue(name)
      || defaultView(node).getComputedStyle(node, null).getPropertyValue(name);
}

function propertyRemove(name) {
  return function() {
    delete this[name];
  };
}

function propertyConstant(name, value) {
  return function() {
    this[name] = value;
  };
}

function propertyFunction(name, value) {
  return function() {
    var v = value.apply(this, arguments);
    if (v == null) delete this[name];
    else this[name] = v;
  };
}

function selection_property(name, value) {
  return arguments.length > 1
      ? this.each((value == null
          ? propertyRemove : typeof value === "function"
          ? propertyFunction
          : propertyConstant)(name, value))
      : this.node()[name];
}

function classArray(string) {
  return string.trim().split(/^|\s+/);
}

function classList(node) {
  return node.classList || new ClassList(node);
}

function ClassList(node) {
  this._node = node;
  this._names = classArray(node.getAttribute("class") || "");
}

ClassList.prototype = {
  add: function(name) {
    var i = this._names.indexOf(name);
    if (i < 0) {
      this._names.push(name);
      this._node.setAttribute("class", this._names.join(" "));
    }
  },
  remove: function(name) {
    var i = this._names.indexOf(name);
    if (i >= 0) {
      this._names.splice(i, 1);
      this._node.setAttribute("class", this._names.join(" "));
    }
  },
  contains: function(name) {
    return this._names.indexOf(name) >= 0;
  }
};

function classedAdd(node, names) {
  var list = classList(node), i = -1, n = names.length;
  while (++i < n) list.add(names[i]);
}

function classedRemove(node, names) {
  var list = classList(node), i = -1, n = names.length;
  while (++i < n) list.remove(names[i]);
}

function classedTrue(names) {
  return function() {
    classedAdd(this, names);
  };
}

function classedFalse(names) {
  return function() {
    classedRemove(this, names);
  };
}

function classedFunction(names, value) {
  return function() {
    (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);
  };
}

function selection_classed(name, value) {
  var names = classArray(name + "");

  if (arguments.length < 2) {
    var list = classList(this.node()), i = -1, n = names.length;
    while (++i < n) if (!list.contains(names[i])) return false;
    return true;
  }

  return this.each((typeof value === "function"
      ? classedFunction : value
      ? classedTrue
      : classedFalse)(names, value));
}

function textRemove() {
  this.textContent = "";
}

function textConstant(value) {
  return function() {
    this.textContent = value;
  };
}

function textFunction(value) {
  return function() {
    var v = value.apply(this, arguments);
    this.textContent = v == null ? "" : v;
  };
}

function selection_text(value) {
  return arguments.length
      ? this.each(value == null
          ? textRemove : (typeof value === "function"
          ? textFunction
          : textConstant)(value))
      : this.node().textContent;
}

function htmlRemove() {
  this.innerHTML = "";
}

function htmlConstant(value) {
  return function() {
    this.innerHTML = value;
  };
}

function htmlFunction(value) {
  return function() {
    var v = value.apply(this, arguments);
    this.innerHTML = v == null ? "" : v;
  };
}

function selection_html(value) {
  return arguments.length
      ? this.each(value == null
          ? htmlRemove : (typeof value === "function"
          ? htmlFunction
          : htmlConstant)(value))
      : this.node().innerHTML;
}

function raise() {
  if (this.nextSibling) this.parentNode.appendChild(this);
}

function selection_raise() {
  return this.each(raise);
}

function lower() {
  if (this.previousSibling) this.parentNode.insertBefore(this, this.parentNode.firstChild);
}

function selection_lower() {
  return this.each(lower);
}

function selection_append(name) {
  var create = typeof name === "function" ? name : creator(name);
  return this.select(function() {
    return this.appendChild(create.apply(this, arguments));
  });
}

function constantNull() {
  return null;
}

function selection_insert(name, before) {
  var create = typeof name === "function" ? name : creator(name),
      select = before == null ? constantNull : typeof before === "function" ? before : selector(before);
  return this.select(function() {
    return this.insertBefore(create.apply(this, arguments), select.apply(this, arguments) || null);
  });
}

function remove() {
  var parent = this.parentNode;
  if (parent) parent.removeChild(this);
}

function selection_remove() {
  return this.each(remove);
}

function selection_cloneShallow() {
  return this.parentNode.insertBefore(this.cloneNode(false), this.nextSibling);
}

function selection_cloneDeep() {
  return this.parentNode.insertBefore(this.cloneNode(true), this.nextSibling);
}

function selection_clone(deep) {
  return this.select(deep ? selection_cloneDeep : selection_cloneShallow);
}

function selection_datum(value) {
  return arguments.length
      ? this.property("__data__", value)
      : this.node().__data__;
}

var filterEvents = {};

var event = null;

if (typeof document !== "undefined") {
  var element = document.documentElement;
  if (!("onmouseenter" in element)) {
    filterEvents = {mouseenter: "mouseover", mouseleave: "mouseout"};
  }
}

function filterContextListener(listener, index, group) {
  listener = contextListener(listener, index, group);
  return function(event) {
    var related = event.relatedTarget;
    if (!related || (related !== this && !(related.compareDocumentPosition(this) & 8))) {
      listener.call(this, event);
    }
  };
}

function contextListener(listener, index, group) {
  return function(event1) {
    var event0 = event; // Events can be reentrant (e.g., focus).
    event = event1;
    try {
      listener.call(this, this.__data__, index, group);
    } finally {
      event = event0;
    }
  };
}

function parseTypenames(typenames) {
  return typenames.trim().split(/^|\s+/).map(function(t) {
    var name = "", i = t.indexOf(".");
    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
    return {type: t, name: name};
  });
}

function onRemove(typename) {
  return function() {
    var on = this.__on;
    if (!on) return;
    for (var j = 0, i = -1, m = on.length, o; j < m; ++j) {
      if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {
        this.removeEventListener(o.type, o.listener, o.capture);
      } else {
        on[++i] = o;
      }
    }
    if (++i) on.length = i;
    else delete this.__on;
  };
}

function onAdd(typename, value, capture) {
  var wrap = filterEvents.hasOwnProperty(typename.type) ? filterContextListener : contextListener;
  return function(d, i, group) {
    var on = this.__on, o, listener = wrap(value, i, group);
    if (on) for (var j = 0, m = on.length; j < m; ++j) {
      if ((o = on[j]).type === typename.type && o.name === typename.name) {
        this.removeEventListener(o.type, o.listener, o.capture);
        this.addEventListener(o.type, o.listener = listener, o.capture = capture);
        o.value = value;
        return;
      }
    }
    this.addEventListener(typename.type, listener, capture);
    o = {type: typename.type, name: typename.name, value: value, listener: listener, capture: capture};
    if (!on) this.__on = [o];
    else on.push(o);
  };
}

function selection_on(typename, value, capture) {
  var typenames = parseTypenames(typename + ""), i, n = typenames.length, t;

  if (arguments.length < 2) {
    var on = this.node().__on;
    if (on) for (var j = 0, m = on.length, o; j < m; ++j) {
      for (i = 0, o = on[j]; i < n; ++i) {
        if ((t = typenames[i]).type === o.type && t.name === o.name) {
          return o.value;
        }
      }
    }
    return;
  }

  on = value ? onAdd : onRemove;
  if (capture == null) capture = false;
  for (i = 0; i < n; ++i) this.each(on(typenames[i], value, capture));
  return this;
}

function customEvent(event1, listener, that, args) {
  var event0 = event;
  event1.sourceEvent = event;
  event = event1;
  try {
    return listener.apply(that, args);
  } finally {
    event = event0;
  }
}

function dispatchEvent(node, type, params) {
  var window = defaultView(node),
      event = window.CustomEvent;

  if (typeof event === "function") {
    event = new event(type, params);
  } else {
    event = window.document.createEvent("Event");
    if (params) event.initEvent(type, params.bubbles, params.cancelable), event.detail = params.detail;
    else event.initEvent(type, false, false);
  }

  node.dispatchEvent(event);
}

function dispatchConstant(type, params) {
  return function() {
    return dispatchEvent(this, type, params);
  };
}

function dispatchFunction(type, params) {
  return function() {
    return dispatchEvent(this, type, params.apply(this, arguments));
  };
}

function selection_dispatch(type, params) {
  return this.each((typeof params === "function"
      ? dispatchFunction
      : dispatchConstant)(type, params));
}

var root = [null];

function Selection(groups, parents) {
  this._groups = groups;
  this._parents = parents;
}

function selection() {
  return new Selection([[document.documentElement]], root);
}

Selection.prototype = selection.prototype = {
  constructor: Selection,
  select: selection_select,
  selectAll: selection_selectAll,
  filter: selection_filter,
  data: selection_data,
  enter: selection_enter,
  exit: selection_exit,
  join: selection_join,
  merge: selection_merge,
  order: selection_order,
  sort: selection_sort,
  call: selection_call,
  nodes: selection_nodes,
  node: selection_node,
  size: selection_size,
  empty: selection_empty,
  each: selection_each,
  attr: selection_attr,
  style: selection_style,
  property: selection_property,
  classed: selection_classed,
  text: selection_text,
  html: selection_html,
  raise: selection_raise,
  lower: selection_lower,
  append: selection_append,
  insert: selection_insert,
  remove: selection_remove,
  clone: selection_clone,
  datum: selection_datum,
  on: selection_on,
  dispatch: selection_dispatch
};

function d3Select(selector) {
  return typeof selector === "string"
      ? new Selection([[document.querySelector(selector)]], [document.documentElement])
      : new Selection([[selector]], root);
}

function create(name) {
  return d3Select(creator(name).call(document.documentElement));
}

var nextId = 0;

function local() {
  return new Local;
}

function Local() {
  this._ = "@" + (++nextId).toString(36);
}

Local.prototype = local.prototype = {
  constructor: Local,
  get: function(node) {
    var id = this._;
    while (!(id in node)) if (!(node = node.parentNode)) return;
    return node[id];
  },
  set: function(node, value) {
    return node[this._] = value;
  },
  remove: function(node) {
    return this._ in node && delete node[this._];
  },
  toString: function() {
    return this._;
  }
};

function sourceEvent() {
  var current = event, source;
  while (source = current.sourceEvent) current = source;
  return current;
}

function point(node, event) {
  var svg = node.ownerSVGElement || node;

  if (svg.createSVGPoint) {
    var point = svg.createSVGPoint();
    point.x = event.clientX, point.y = event.clientY;
    point = point.matrixTransform(node.getScreenCTM().inverse());
    return [point.x, point.y];
  }

  var rect = node.getBoundingClientRect();
  return [event.clientX - rect.left - node.clientLeft, event.clientY - rect.top - node.clientTop];
}

function mouse(node) {
  var event = sourceEvent();
  if (event.changedTouches) event = event.changedTouches[0];
  return point(node, event);
}

function selectAll(selector) {
  return typeof selector === "string"
      ? new Selection([document.querySelectorAll(selector)], [document.documentElement])
      : new Selection([selector == null ? [] : selector], root);
}

function touch(node, touches, identifier) {
  if (arguments.length < 3) identifier = touches, touches = sourceEvent().changedTouches;

  for (var i = 0, n = touches ? touches.length : 0, touch; i < n; ++i) {
    if ((touch = touches[i]).identifier === identifier) {
      return point(node, touch);
    }
  }

  return null;
}

function touches(node, touches) {
  if (touches == null) touches = sourceEvent().touches;

  for (var i = 0, n = touches ? touches.length : 0, points = new Array(n); i < n; ++i) {
    points[i] = point(node, touches[i]);
  }

  return points;
}

var noop = {value: function() {}};

function dispatch() {
  for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {
    if (!(t = arguments[i] + "") || (t in _)) throw new Error("illegal type: " + t);
    _[t] = [];
  }
  return new Dispatch(_);
}

function Dispatch(_) {
  this._ = _;
}

function parseTypenames$1(typenames, types) {
  return typenames.trim().split(/^|\s+/).map(function(t) {
    var name = "", i = t.indexOf(".");
    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
    if (t && !types.hasOwnProperty(t)) throw new Error("unknown type: " + t);
    return {type: t, name: name};
  });
}

Dispatch.prototype = dispatch.prototype = {
  constructor: Dispatch,
  on: function(typename, callback) {
    var _ = this._,
        T = parseTypenames$1(typename + "", _),
        t,
        i = -1,
        n = T.length;

    // If no callback was specified, return the callback of the given type and name.
    if (arguments.length < 2) {
      while (++i < n) if ((t = (typename = T[i]).type) && (t = get(_[t], typename.name))) return t;
      return;
    }

    // If a type was specified, set the callback for the given type and name.
    // Otherwise, if a null callback was specified, remove callbacks of the given name.
    if (callback != null && typeof callback !== "function") throw new Error("invalid callback: " + callback);
    while (++i < n) {
      if (t = (typename = T[i]).type) _[t] = set(_[t], typename.name, callback);
      else if (callback == null) for (t in _) _[t] = set(_[t], typename.name, null);
    }

    return this;
  },
  copy: function() {
    var copy = {}, _ = this._;
    for (var t in _) copy[t] = _[t].slice();
    return new Dispatch(copy);
  },
  call: function(type, that) {
    if ((n = arguments.length - 2) > 0) for (var args = new Array(n), i = 0, n, t; i < n; ++i) args[i] = arguments[i + 2];
    if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);
    for (t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);
  },
  apply: function(type, that, args) {
    if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);
    for (var t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);
  }
};

function get(type, name) {
  for (var i = 0, n = type.length, c; i < n; ++i) {
    if ((c = type[i]).name === name) {
      return c.value;
    }
  }
}

function set(type, name, callback) {
  for (var i = 0, n = type.length; i < n; ++i) {
    if (type[i].name === name) {
      type[i] = noop, type = type.slice(0, i).concat(type.slice(i + 1));
      break;
    }
  }
  if (callback != null) type.push({name: name, value: callback});
  return type;
}

var frame = 0, // is an animation frame pending?
    timeout = 0, // is a timeout pending?
    interval = 0, // are any timers active?
    pokeDelay = 1000, // how frequently we check for clock skew
    taskHead,
    taskTail,
    clockLast = 0,
    clockNow = 0,
    clockSkew = 0,
    clock = typeof performance === "object" && performance.now ? performance : Date,
    setFrame = typeof window === "object" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function(f) { setTimeout(f, 17); };

function now() {
  return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);
}

function clearNow() {
  clockNow = 0;
}

function Timer() {
  this._call =
  this._time =
  this._next = null;
}

Timer.prototype = timer.prototype = {
  constructor: Timer,
  restart: function(callback, delay, time) {
    if (typeof callback !== "function") throw new TypeError("callback is not a function");
    time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);
    if (!this._next && taskTail !== this) {
      if (taskTail) taskTail._next = this;
      else taskHead = this;
      taskTail = this;
    }
    this._call = callback;
    this._time = time;
    sleep();
  },
  stop: function() {
    if (this._call) {
      this._call = null;
      this._time = Infinity;
      sleep();
    }
  }
};

function timer(callback, delay, time) {
  var t = new Timer;
  t.restart(callback, delay, time);
  return t;
}

function timerFlush() {
  now(); // Get the current time, if not already set.
  ++frame; // Pretend we’ve set an alarm, if we haven’t already.
  var t = taskHead, e;
  while (t) {
    if ((e = clockNow - t._time) >= 0) t._call.call(null, e);
    t = t._next;
  }
  --frame;
}

function wake() {
  clockNow = (clockLast = clock.now()) + clockSkew;
  frame = timeout = 0;
  try {
    timerFlush();
  } finally {
    frame = 0;
    nap();
    clockNow = 0;
  }
}

function poke() {
  var now = clock.now(), delay = now - clockLast;
  if (delay > pokeDelay) clockSkew -= delay, clockLast = now;
}

function nap() {
  var t0, t1 = taskHead, t2, time = Infinity;
  while (t1) {
    if (t1._call) {
      if (time > t1._time) time = t1._time;
      t0 = t1, t1 = t1._next;
    } else {
      t2 = t1._next, t1._next = null;
      t1 = t0 ? t0._next = t2 : taskHead = t2;
    }
  }
  taskTail = t0;
  sleep(time);
}

function sleep(time) {
  if (frame) return; // Soonest alarm already set, or will be.
  if (timeout) timeout = clearTimeout(timeout);
  var delay = time - clockNow;
  if (delay > 24) {
    if (time < Infinity) timeout = setTimeout(wake, delay);
    if (interval) interval = clearInterval(interval);
  } else {
    if (!interval) clockLast = clockNow, interval = setInterval(poke, pokeDelay);
    frame = 1, setFrame(wake);
  }
}

function timeout$1(callback, delay, time) {
  var t = new Timer;
  delay = delay == null ? 0 : +delay;
  t.restart(function(elapsed) {
    t.stop();
    callback(elapsed + delay);
  }, delay, time);
  return t;
}

var emptyOn = dispatch("start", "end", "cancel", "interrupt");
var emptyTween = [];

var CREATED = 0;
var SCHEDULED = 1;
var STARTING = 2;
var STARTED = 3;
var RUNNING = 4;
var ENDING = 5;
var ENDED = 6;

function schedule(node, name, id, index, group, timing) {
  var schedules = node.__transition;
  if (!schedules) node.__transition = {};
  else if (id in schedules) return;
  create$1(node, id, {
    name: name,
    index: index, // For context during callback.
    group: group, // For context during callback.
    on: emptyOn,
    tween: emptyTween,
    time: timing.time,
    delay: timing.delay,
    duration: timing.duration,
    ease: timing.ease,
    timer: null,
    state: CREATED
  });
}

function init(node, id) {
  var schedule = get$1(node, id);
  if (schedule.state > CREATED) throw new Error("too late; already scheduled");
  return schedule;
}

function set$1(node, id) {
  var schedule = get$1(node, id);
  if (schedule.state > STARTED) throw new Error("too late; already running");
  return schedule;
}

function get$1(node, id) {
  var schedule = node.__transition;
  if (!schedule || !(schedule = schedule[id])) throw new Error("transition not found");
  return schedule;
}

function create$1(node, id, self) {
  var schedules = node.__transition,
      tween;

  // Initialize the self timer when the transition is created.
  // Note the actual delay is not known until the first callback!
  schedules[id] = self;
  self.timer = timer(schedule, 0, self.time);

  function schedule(elapsed) {
    self.state = SCHEDULED;
    self.timer.restart(start, self.delay, self.time);

    // If the elapsed delay is less than our first sleep, start immediately.
    if (self.delay <= elapsed) start(elapsed - self.delay);
  }

  function start(elapsed) {
    var i, j, n, o;

    // If the state is not SCHEDULED, then we previously errored on start.
    if (self.state !== SCHEDULED) return stop();

    for (i in schedules) {
      o = schedules[i];
      if (o.name !== self.name) continue;

      // While this element already has a starting transition during this frame,
      // defer starting an interrupting transition until that transition has a
      // chance to tick (and possibly end); see d3/d3-transition#54!
      if (o.state === STARTED) return timeout$1(start);

      // Interrupt the active transition, if any.
      if (o.state === RUNNING) {
        o.state = ENDED;
        o.timer.stop();
        o.on.call("interrupt", node, node.__data__, o.index, o.group);
        delete schedules[i];
      }

      // Cancel any pre-empted transitions.
      else if (+i < id) {
        o.state = ENDED;
        o.timer.stop();
        o.on.call("cancel", node, node.__data__, o.index, o.group);
        delete schedules[i];
      }
    }

    // Defer the first tick to end of the current frame; see d3/d3#1576.
    // Note the transition may be canceled after start and before the first tick!
    // Note this must be scheduled before the start event; see d3/d3-transition#16!
    // Assuming this is successful, subsequent callbacks go straight to tick.
    timeout$1(function() {
      if (self.state === STARTED) {
        self.state = RUNNING;
        self.timer.restart(tick, self.delay, self.time);
        tick(elapsed);
      }
    });

    // Dispatch the start event.
    // Note this must be done before the tween are initialized.
    self.state = STARTING;
    self.on.call("start", node, node.__data__, self.index, self.group);
    if (self.state !== STARTING) return; // interrupted
    self.state = STARTED;

    // Initialize the tween, deleting null tween.
    tween = new Array(n = self.tween.length);
    for (i = 0, j = -1; i < n; ++i) {
      if (o = self.tween[i].value.call(node, node.__data__, self.index, self.group)) {
        tween[++j] = o;
      }
    }
    tween.length = j + 1;
  }

  function tick(elapsed) {
    var t = elapsed < self.duration ? self.ease.call(null, elapsed / self.duration) : (self.timer.restart(stop), self.state = ENDING, 1),
        i = -1,
        n = tween.length;

    while (++i < n) {
      tween[i].call(node, t);
    }

    // Dispatch the end event.
    if (self.state === ENDING) {
      self.on.call("end", node, node.__data__, self.index, self.group);
      stop();
    }
  }

  function stop() {
    self.state = ENDED;
    self.timer.stop();
    delete schedules[id];
    for (var i in schedules) return; // eslint-disable-line no-unused-vars
    delete node.__transition;
  }
}

function interrupt(node, name) {
  var schedules = node.__transition,
      schedule,
      active,
      empty = true,
      i;

  if (!schedules) return;

  name = name == null ? null : name + "";

  for (i in schedules) {
    if ((schedule = schedules[i]).name !== name) { empty = false; continue; }
    active = schedule.state > STARTING && schedule.state < ENDING;
    schedule.state = ENDED;
    schedule.timer.stop();
    schedule.on.call(active ? "interrupt" : "cancel", node, node.__data__, schedule.index, schedule.group);
    delete schedules[i];
  }

  if (empty) delete node.__transition;
}

function selection_interrupt(name) {
  return this.each(function() {
    interrupt(this, name);
  });
}

function define(constructor, factory, prototype) {
  constructor.prototype = factory.prototype = prototype;
  prototype.constructor = constructor;
}

function extend(parent, definition) {
  var prototype = Object.create(parent.prototype);
  for (var key in definition) prototype[key] = definition[key];
  return prototype;
}

function Color() {}

var darker = 0.7;
var brighter = 1 / darker;

var reI = "\\s*([+-]?\\d+)\\s*",
    reN = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",
    reP = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",
    reHex3 = /^#([0-9a-f]{3})$/,
    reHex6 = /^#([0-9a-f]{6})$/,
    reRgbInteger = new RegExp("^rgb\\(" + [reI, reI, reI] + "\\)$"),
    reRgbPercent = new RegExp("^rgb\\(" + [reP, reP, reP] + "\\)$"),
    reRgbaInteger = new RegExp("^rgba\\(" + [reI, reI, reI, reN] + "\\)$"),
    reRgbaPercent = new RegExp("^rgba\\(" + [reP, reP, reP, reN] + "\\)$"),
    reHslPercent = new RegExp("^hsl\\(" + [reN, reP, reP] + "\\)$"),
    reHslaPercent = new RegExp("^hsla\\(" + [reN, reP, reP, reN] + "\\)$");

var named = {
  aliceblue: 0xf0f8ff,
  antiquewhite: 0xfaebd7,
  aqua: 0x00ffff,
  aquamarine: 0x7fffd4,
  azure: 0xf0ffff,
  beige: 0xf5f5dc,
  bisque: 0xffe4c4,
  black: 0x000000,
  blanchedalmond: 0xffebcd,
  blue: 0x0000ff,
  blueviolet: 0x8a2be2,
  brown: 0xa52a2a,
  burlywood: 0xdeb887,
  cadetblue: 0x5f9ea0,
  chartreuse: 0x7fff00,
  chocolate: 0xd2691e,
  coral: 0xff7f50,
  cornflowerblue: 0x6495ed,
  cornsilk: 0xfff8dc,
  crimson: 0xdc143c,
  cyan: 0x00ffff,
  darkblue: 0x00008b,
  darkcyan: 0x008b8b,
  darkgoldenrod: 0xb8860b,
  darkgray: 0xa9a9a9,
  darkgreen: 0x006400,
  darkgrey: 0xa9a9a9,
  darkkhaki: 0xbdb76b,
  darkmagenta: 0x8b008b,
  darkolivegreen: 0x556b2f,
  darkorange: 0xff8c00,
  darkorchid: 0x9932cc,
  darkred: 0x8b0000,
  darksalmon: 0xe9967a,
  darkseagreen: 0x8fbc8f,
  darkslateblue: 0x483d8b,
  darkslategray: 0x2f4f4f,
  darkslategrey: 0x2f4f4f,
  darkturquoise: 0x00ced1,
  darkviolet: 0x9400d3,
  deeppink: 0xff1493,
  deepskyblue: 0x00bfff,
  dimgray: 0x696969,
  dimgrey: 0x696969,
  dodgerblue: 0x1e90ff,
  firebrick: 0xb22222,
  floralwhite: 0xfffaf0,
  forestgreen: 0x228b22,
  fuchsia: 0xff00ff,
  gainsboro: 0xdcdcdc,
  ghostwhite: 0xf8f8ff,
  gold: 0xffd700,
  goldenrod: 0xdaa520,
  gray: 0x808080,
  green: 0x008000,
  greenyellow: 0xadff2f,
  grey: 0x808080,
  honeydew: 0xf0fff0,
  hotpink: 0xff69b4,
  indianred: 0xcd5c5c,
  indigo: 0x4b0082,
  ivory: 0xfffff0,
  khaki: 0xf0e68c,
  lavender: 0xe6e6fa,
  lavenderblush: 0xfff0f5,
  lawngreen: 0x7cfc00,
  lemonchiffon: 0xfffacd,
  lightblue: 0xadd8e6,
  lightcoral: 0xf08080,
  lightcyan: 0xe0ffff,
  lightgoldenrodyellow: 0xfafad2,
  lightgray: 0xd3d3d3,
  lightgreen: 0x90ee90,
  lightgrey: 0xd3d3d3,
  lightpink: 0xffb6c1,
  lightsalmon: 0xffa07a,
  lightseagreen: 0x20b2aa,
  lightskyblue: 0x87cefa,
  lightslategray: 0x778899,
  lightslategrey: 0x778899,
  lightsteelblue: 0xb0c4de,
  lightyellow: 0xffffe0,
  lime: 0x00ff00,
  limegreen: 0x32cd32,
  linen: 0xfaf0e6,
  magenta: 0xff00ff,
  maroon: 0x800000,
  mediumaquamarine: 0x66cdaa,
  mediumblue: 0x0000cd,
  mediumorchid: 0xba55d3,
  mediumpurple: 0x9370db,
  mediumseagreen: 0x3cb371,
  mediumslateblue: 0x7b68ee,
  mediumspringgreen: 0x00fa9a,
  mediumturquoise: 0x48d1cc,
  mediumvioletred: 0xc71585,
  midnightblue: 0x191970,
  mintcream: 0xf5fffa,
  mistyrose: 0xffe4e1,
  moccasin: 0xffe4b5,
  navajowhite: 0xffdead,
  navy: 0x000080,
  oldlace: 0xfdf5e6,
  olive: 0x808000,
  olivedrab: 0x6b8e23,
  orange: 0xffa500,
  orangered: 0xff4500,
  orchid: 0xda70d6,
  palegoldenrod: 0xeee8aa,
  palegreen: 0x98fb98,
  paleturquoise: 0xafeeee,
  palevioletred: 0xdb7093,
  papayawhip: 0xffefd5,
  peachpuff: 0xffdab9,
  peru: 0xcd853f,
  pink: 0xffc0cb,
  plum: 0xdda0dd,
  powderblue: 0xb0e0e6,
  purple: 0x800080,
  rebeccapurple: 0x663399,
  red: 0xff0000,
  rosybrown: 0xbc8f8f,
  royalblue: 0x4169e1,
  saddlebrown: 0x8b4513,
  salmon: 0xfa8072,
  sandybrown: 0xf4a460,
  seagreen: 0x2e8b57,
  seashell: 0xfff5ee,
  sienna: 0xa0522d,
  silver: 0xc0c0c0,
  skyblue: 0x87ceeb,
  slateblue: 0x6a5acd,
  slategray: 0x708090,
  slategrey: 0x708090,
  snow: 0xfffafa,
  springgreen: 0x00ff7f,
  steelblue: 0x4682b4,
  tan: 0xd2b48c,
  teal: 0x008080,
  thistle: 0xd8bfd8,
  tomato: 0xff6347,
  turquoise: 0x40e0d0,
  violet: 0xee82ee,
  wheat: 0xf5deb3,
  white: 0xffffff,
  whitesmoke: 0xf5f5f5,
  yellow: 0xffff00,
  yellowgreen: 0x9acd32
};

define(Color, color, {
  displayable: function() {
    return this.rgb().displayable();
  },
  hex: function() {
    return this.rgb().hex();
  },
  toString: function() {
    return this.rgb() + "";
  }
});

function color(format) {
  var m;
  format = (format + "").trim().toLowerCase();
  return (m = reHex3.exec(format)) ? (m = parseInt(m[1], 16), new Rgb((m >> 8 & 0xf) | (m >> 4 & 0x0f0), (m >> 4 & 0xf) | (m & 0xf0), ((m & 0xf) << 4) | (m & 0xf), 1)) // #f00
      : (m = reHex6.exec(format)) ? rgbn(parseInt(m[1], 16)) // #ff0000
      : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)
      : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)
      : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)
      : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)
      : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)
      : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)
      : named.hasOwnProperty(format) ? rgbn(named[format])
      : format === "transparent" ? new Rgb(NaN, NaN, NaN, 0)
      : null;
}

function rgbn(n) {
  return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);
}

function rgba(r, g, b, a) {
  if (a <= 0) r = g = b = NaN;
  return new Rgb(r, g, b, a);
}

function rgbConvert(o) {
  if (!(o instanceof Color)) o = color(o);
  if (!o) return new Rgb;
  o = o.rgb();
  return new Rgb(o.r, o.g, o.b, o.opacity);
}

function rgb(r, g, b, opacity) {
  return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);
}

function Rgb(r, g, b, opacity) {
  this.r = +r;
  this.g = +g;
  this.b = +b;
  this.opacity = +opacity;
}

define(Rgb, rgb, extend(Color, {
  brighter: function(k) {
    k = k == null ? brighter : Math.pow(brighter, k);
    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
  },
  darker: function(k) {
    k = k == null ? darker : Math.pow(darker, k);
    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
  },
  rgb: function() {
    return this;
  },
  displayable: function() {
    return (0 <= this.r && this.r <= 255)
        && (0 <= this.g && this.g <= 255)
        && (0 <= this.b && this.b <= 255)
        && (0 <= this.opacity && this.opacity <= 1);
  },
  hex: function() {
    return "#" + hex(this.r) + hex(this.g) + hex(this.b);
  },
  toString: function() {
    var a = this.opacity; a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
    return (a === 1 ? "rgb(" : "rgba(")
        + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + ", "
        + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + ", "
        + Math.max(0, Math.min(255, Math.round(this.b) || 0))
        + (a === 1 ? ")" : ", " + a + ")");
  }
}));

function hex(value) {
  value = Math.max(0, Math.min(255, Math.round(value) || 0));
  return (value < 16 ? "0" : "") + value.toString(16);
}

function hsla(h, s, l, a) {
  if (a <= 0) h = s = l = NaN;
  else if (l <= 0 || l >= 1) h = s = NaN;
  else if (s <= 0) h = NaN;
  return new Hsl(h, s, l, a);
}

function hslConvert(o) {
  if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);
  if (!(o instanceof Color)) o = color(o);
  if (!o) return new Hsl;
  if (o instanceof Hsl) return o;
  o = o.rgb();
  var r = o.r / 255,
      g = o.g / 255,
      b = o.b / 255,
      min = Math.min(r, g, b),
      max = Math.max(r, g, b),
      h = NaN,
      s = max - min,
      l = (max + min) / 2;
  if (s) {
    if (r === max) h = (g - b) / s + (g < b) * 6;
    else if (g === max) h = (b - r) / s + 2;
    else h = (r - g) / s + 4;
    s /= l < 0.5 ? max + min : 2 - max - min;
    h *= 60;
  } else {
    s = l > 0 && l < 1 ? 0 : h;
  }
  return new Hsl(h, s, l, o.opacity);
}

function hsl(h, s, l, opacity) {
  return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);
}

function Hsl(h, s, l, opacity) {
  this.h = +h;
  this.s = +s;
  this.l = +l;
  this.opacity = +opacity;
}

define(Hsl, hsl, extend(Color, {
  brighter: function(k) {
    k = k == null ? brighter : Math.pow(brighter, k);
    return new Hsl(this.h, this.s, this.l * k, this.opacity);
  },
  darker: function(k) {
    k = k == null ? darker : Math.pow(darker, k);
    return new Hsl(this.h, this.s, this.l * k, this.opacity);
  },
  rgb: function() {
    var h = this.h % 360 + (this.h < 0) * 360,
        s = isNaN(h) || isNaN(this.s) ? 0 : this.s,
        l = this.l,
        m2 = l + (l < 0.5 ? l : 1 - l) * s,
        m1 = 2 * l - m2;
    return new Rgb(
      hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2),
      hsl2rgb(h, m1, m2),
      hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2),
      this.opacity
    );
  },
  displayable: function() {
    return (0 <= this.s && this.s <= 1 || isNaN(this.s))
        && (0 <= this.l && this.l <= 1)
        && (0 <= this.opacity && this.opacity <= 1);
  }
}));

/* From FvD 13.37, CSS Color Module Level 3 */
function hsl2rgb(h, m1, m2) {
  return (h < 60 ? m1 + (m2 - m1) * h / 60
      : h < 180 ? m2
      : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60
      : m1) * 255;
}

var deg2rad = Math.PI / 180;
var rad2deg = 180 / Math.PI;

// https://beta.observablehq.com/@mbostock/lab-and-rgb
var K = 18,
    Xn = 0.96422,
    Yn = 1,
    Zn = 0.82521,
    t0 = 4 / 29,
    t1 = 6 / 29,
    t2 = 3 * t1 * t1,
    t3 = t1 * t1 * t1;

function labConvert(o) {
  if (o instanceof Lab) return new Lab(o.l, o.a, o.b, o.opacity);
  if (o instanceof Hcl) {
    if (isNaN(o.h)) return new Lab(o.l, 0, 0, o.opacity);
    var h = o.h * deg2rad;
    return new Lab(o.l, Math.cos(h) * o.c, Math.sin(h) * o.c, o.opacity);
  }
  if (!(o instanceof Rgb)) o = rgbConvert(o);
  var r = rgb2lrgb(o.r),
      g = rgb2lrgb(o.g),
      b = rgb2lrgb(o.b),
      y = xyz2lab((0.2225045 * r + 0.7168786 * g + 0.0606169 * b) / Yn), x, z;
  if (r === g && g === b) x = z = y; else {
    x = xyz2lab((0.4360747 * r + 0.3850649 * g + 0.1430804 * b) / Xn);
    z = xyz2lab((0.0139322 * r + 0.0971045 * g + 0.7141733 * b) / Zn);
  }
  return new Lab(116 * y - 16, 500 * (x - y), 200 * (y - z), o.opacity);
}

function gray(l, opacity) {
  return new Lab(l, 0, 0, opacity == null ? 1 : opacity);
}

function lab(l, a, b, opacity) {
  return arguments.length === 1 ? labConvert(l) : new Lab(l, a, b, opacity == null ? 1 : opacity);
}

function Lab(l, a, b, opacity) {
  this.l = +l;
  this.a = +a;
  this.b = +b;
  this.opacity = +opacity;
}

define(Lab, lab, extend(Color, {
  brighter: function(k) {
    return new Lab(this.l + K * (k == null ? 1 : k), this.a, this.b, this.opacity);
  },
  darker: function(k) {
    return new Lab(this.l - K * (k == null ? 1 : k), this.a, this.b, this.opacity);
  },
  rgb: function() {
    var y = (this.l + 16) / 116,
        x = isNaN(this.a) ? y : y + this.a / 500,
        z = isNaN(this.b) ? y : y - this.b / 200;
    x = Xn * lab2xyz(x);
    y = Yn * lab2xyz(y);
    z = Zn * lab2xyz(z);
    return new Rgb(
      lrgb2rgb( 3.1338561 * x - 1.6168667 * y - 0.4906146 * z),
      lrgb2rgb(-0.9787684 * x + 1.9161415 * y + 0.0334540 * z),
      lrgb2rgb( 0.0719453 * x - 0.2289914 * y + 1.4052427 * z),
      this.opacity
    );
  }
}));

function xyz2lab(t) {
  return t > t3 ? Math.pow(t, 1 / 3) : t / t2 + t0;
}

function lab2xyz(t) {
  return t > t1 ? t * t * t : t2 * (t - t0);
}

function lrgb2rgb(x) {
  return 255 * (x <= 0.0031308 ? 12.92 * x : 1.055 * Math.pow(x, 1 / 2.4) - 0.055);
}

function rgb2lrgb(x) {
  return (x /= 255) <= 0.04045 ? x / 12.92 : Math.pow((x + 0.055) / 1.055, 2.4);
}

function hclConvert(o) {
  if (o instanceof Hcl) return new Hcl(o.h, o.c, o.l, o.opacity);
  if (!(o instanceof Lab)) o = labConvert(o);
  if (o.a === 0 && o.b === 0) return new Hcl(NaN, 0, o.l, o.opacity);
  var h = Math.atan2(o.b, o.a) * rad2deg;
  return new Hcl(h < 0 ? h + 360 : h, Math.sqrt(o.a * o.a + o.b * o.b), o.l, o.opacity);
}

function lch(l, c, h, opacity) {
  return arguments.length === 1 ? hclConvert(l) : new Hcl(h, c, l, opacity == null ? 1 : opacity);
}

function hcl(h, c, l, opacity) {
  return arguments.length === 1 ? hclConvert(h) : new Hcl(h, c, l, opacity == null ? 1 : opacity);
}

function Hcl(h, c, l, opacity) {
  this.h = +h;
  this.c = +c;
  this.l = +l;
  this.opacity = +opacity;
}

define(Hcl, hcl, extend(Color, {
  brighter: function(k) {
    return new Hcl(this.h, this.c, this.l + K * (k == null ? 1 : k), this.opacity);
  },
  darker: function(k) {
    return new Hcl(this.h, this.c, this.l - K * (k == null ? 1 : k), this.opacity);
  },
  rgb: function() {
    return labConvert(this).rgb();
  }
}));

var A = -0.14861,
    B = +1.78277,
    C = -0.29227,
    D = -0.90649,
    E = +1.97294,
    ED = E * D,
    EB = E * B,
    BC_DA = B * C - D * A;

function cubehelixConvert(o) {
  if (o instanceof Cubehelix) return new Cubehelix(o.h, o.s, o.l, o.opacity);
  if (!(o instanceof Rgb)) o = rgbConvert(o);
  var r = o.r / 255,
      g = o.g / 255,
      b = o.b / 255,
      l = (BC_DA * b + ED * r - EB * g) / (BC_DA + ED - EB),
      bl = b - l,
      k = (E * (g - l) - C * bl) / D,
      s = Math.sqrt(k * k + bl * bl) / (E * l * (1 - l)), // NaN if l=0 or l=1
      h = s ? Math.atan2(k, bl) * rad2deg - 120 : NaN;
  return new Cubehelix(h < 0 ? h + 360 : h, s, l, o.opacity);
}

function cubehelix(h, s, l, opacity) {
  return arguments.length === 1 ? cubehelixConvert(h) : new Cubehelix(h, s, l, opacity == null ? 1 : opacity);
}

function Cubehelix(h, s, l, opacity) {
  this.h = +h;
  this.s = +s;
  this.l = +l;
  this.opacity = +opacity;
}

define(Cubehelix, cubehelix, extend(Color, {
  brighter: function(k) {
    k = k == null ? brighter : Math.pow(brighter, k);
    return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
  },
  darker: function(k) {
    k = k == null ? darker : Math.pow(darker, k);
    return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
  },
  rgb: function() {
    var h = isNaN(this.h) ? 0 : (this.h + 120) * deg2rad,
        l = +this.l,
        a = isNaN(this.s) ? 0 : this.s * l * (1 - l),
        cosh = Math.cos(h),
        sinh = Math.sin(h);
    return new Rgb(
      255 * (l + a * (A * cosh + B * sinh)),
      255 * (l + a * (C * cosh + D * sinh)),
      255 * (l + a * (E * cosh)),
      this.opacity
    );
  }
}));

function basis(t1, v0, v1, v2, v3) {
  var t2 = t1 * t1, t3 = t2 * t1;
  return ((1 - 3 * t1 + 3 * t2 - t3) * v0
      + (4 - 6 * t2 + 3 * t3) * v1
      + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2
      + t3 * v3) / 6;
}

function basis$1(values) {
  var n = values.length - 1;
  return function(t) {
    var i = t <= 0 ? (t = 0) : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n),
        v1 = values[i],
        v2 = values[i + 1],
        v0 = i > 0 ? values[i - 1] : 2 * v1 - v2,
        v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;
    return basis((t - i / n) * n, v0, v1, v2, v3);
  };
}

function basisClosed(values) {
  var n = values.length;
  return function(t) {
    var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n),
        v0 = values[(i + n - 1) % n],
        v1 = values[i % n],
        v2 = values[(i + 1) % n],
        v3 = values[(i + 2) % n];
    return basis((t - i / n) * n, v0, v1, v2, v3);
  };
}

function constant$1(x) {
  return function() {
    return x;
  };
}

function linear(a, d) {
  return function(t) {
    return a + t * d;
  };
}

function exponential(a, b, y) {
  return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function(t) {
    return Math.pow(a + t * b, y);
  };
}

function hue(a, b) {
  var d = b - a;
  return d ? linear(a, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : constant$1(isNaN(a) ? b : a);
}

function gamma(y) {
  return (y = +y) === 1 ? nogamma : function(a, b) {
    return b - a ? exponential(a, b, y) : constant$1(isNaN(a) ? b : a);
  };
}

function nogamma(a, b) {
  var d = b - a;
  return d ? linear(a, d) : constant$1(isNaN(a) ? b : a);
}

var interpolateRgb = (function rgbGamma(y) {
  var color = gamma(y);

  function rgb$1(start, end) {
    var r = color((start = rgb(start)).r, (end = rgb(end)).r),
        g = color(start.g, end.g),
        b = color(start.b, end.b),
        opacity = nogamma(start.opacity, end.opacity);
    return function(t) {
      start.r = r(t);
      start.g = g(t);
      start.b = b(t);
      start.opacity = opacity(t);
      return start + "";
    };
  }

  rgb$1.gamma = rgbGamma;

  return rgb$1;
})(1);

function rgbSpline(spline) {
  return function(colors) {
    var n = colors.length,
        r = new Array(n),
        g = new Array(n),
        b = new Array(n),
        i, color;
    for (i = 0; i < n; ++i) {
      color = rgb(colors[i]);
      r[i] = color.r || 0;
      g[i] = color.g || 0;
      b[i] = color.b || 0;
    }
    r = spline(r);
    g = spline(g);
    b = spline(b);
    color.opacity = 1;
    return function(t) {
      color.r = r(t);
      color.g = g(t);
      color.b = b(t);
      return color + "";
    };
  };
}

var rgbBasis = rgbSpline(basis$1);
var rgbBasisClosed = rgbSpline(basisClosed);

function array(a, b) {
  var nb = b ? b.length : 0,
      na = a ? Math.min(nb, a.length) : 0,
      x = new Array(na),
      c = new Array(nb),
      i;

  for (i = 0; i < na; ++i) x[i] = interpolate(a[i], b[i]);
  for (; i < nb; ++i) c[i] = b[i];

  return function(t) {
    for (i = 0; i < na; ++i) c[i] = x[i](t);
    return c;
  };
}

function date(a, b) {
  var d = new Date;
  return a = +a, b -= a, function(t) {
    return d.setTime(a + b * t), d;
  };
}

function reinterpolate(a, b) {
  return a = +a, b -= a, function(t) {
    return a + b * t;
  };
}

function object(a, b) {
  var i = {},
      c = {},
      k;

  if (a === null || typeof a !== "object") a = {};
  if (b === null || typeof b !== "object") b = {};

  for (k in b) {
    if (k in a) {
      i[k] = interpolate(a[k], b[k]);
    } else {
      c[k] = b[k];
    }
  }

  return function(t) {
    for (k in i) c[k] = i[k](t);
    return c;
  };
}

var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,
    reB = new RegExp(reA.source, "g");

function zero(b) {
  return function() {
    return b;
  };
}

function one(b) {
  return function(t) {
    return b(t) + "";
  };
}

function interpolateString(a, b) {
  var bi = reA.lastIndex = reB.lastIndex = 0, // scan index for next number in b
      am, // current match in a
      bm, // current match in b
      bs, // string preceding current number in b, if any
      i = -1, // index in s
      s = [], // string constants and placeholders
      q = []; // number interpolators

  // Coerce inputs to strings.
  a = a + "", b = b + "";

  // Interpolate pairs of numbers in a & b.
  while ((am = reA.exec(a))
      && (bm = reB.exec(b))) {
    if ((bs = bm.index) > bi) { // a string precedes the next number in b
      bs = b.slice(bi, bs);
      if (s[i]) s[i] += bs; // coalesce with previous string
      else s[++i] = bs;
    }
    if ((am = am[0]) === (bm = bm[0])) { // numbers in a & b match
      if (s[i]) s[i] += bm; // coalesce with previous string
      else s[++i] = bm;
    } else { // interpolate non-matching numbers
      s[++i] = null;
      q.push({i: i, x: reinterpolate(am, bm)});
    }
    bi = reB.lastIndex;
  }

  // Add remains of b.
  if (bi < b.length) {
    bs = b.slice(bi);
    if (s[i]) s[i] += bs; // coalesce with previous string
    else s[++i] = bs;
  }

  // Special optimization for only a single match.
  // Otherwise, interpolate each of the numbers and rejoin the string.
  return s.length < 2 ? (q[0]
      ? one(q[0].x)
      : zero(b))
      : (b = q.length, function(t) {
          for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);
          return s.join("");
        });
}

function interpolate(a, b) {
  var t = typeof b, c;
  return b == null || t === "boolean" ? constant$1(b)
      : (t === "number" ? reinterpolate
      : t === "string" ? ((c = color(b)) ? (b = c, interpolateRgb) : interpolateString)
      : b instanceof color ? interpolateRgb
      : b instanceof Date ? date
      : Array.isArray(b) ? array
      : typeof b.valueOf !== "function" && typeof b.toString !== "function" || isNaN(b) ? object
      : reinterpolate)(a, b);
}

function discrete(range) {
  var n = range.length;
  return function(t) {
    return range[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];
  };
}

function hue$1(a, b) {
  var i = hue(+a, +b);
  return function(t) {
    var x = i(t);
    return x - 360 * Math.floor(x / 360);
  };
}

function interpolateRound(a, b) {
  return a = +a, b -= a, function(t) {
    return Math.round(a + b * t);
  };
}

var degrees = 180 / Math.PI;

var identity = {
  translateX: 0,
  translateY: 0,
  rotate: 0,
  skewX: 0,
  scaleX: 1,
  scaleY: 1
};

function decompose(a, b, c, d, e, f) {
  var scaleX, scaleY, skewX;
  if (scaleX = Math.sqrt(a * a + b * b)) a /= scaleX, b /= scaleX;
  if (skewX = a * c + b * d) c -= a * skewX, d -= b * skewX;
  if (scaleY = Math.sqrt(c * c + d * d)) c /= scaleY, d /= scaleY, skewX /= scaleY;
  if (a * d < b * c) a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;
  return {
    translateX: e,
    translateY: f,
    rotate: Math.atan2(b, a) * degrees,
    skewX: Math.atan(skewX) * degrees,
    scaleX: scaleX,
    scaleY: scaleY
  };
}

var cssNode,
    cssRoot,
    cssView,
    svgNode;

function parseCss(value) {
  if (value === "none") return identity;
  if (!cssNode) cssNode = document.createElement("DIV"), cssRoot = document.documentElement, cssView = document.defaultView;
  cssNode.style.transform = value;
  value = cssView.getComputedStyle(cssRoot.appendChild(cssNode), null).getPropertyValue("transform");
  cssRoot.removeChild(cssNode);
  value = value.slice(7, -1).split(",");
  return decompose(+value[0], +value[1], +value[2], +value[3], +value[4], +value[5]);
}

function parseSvg(value) {
  if (value == null) return identity;
  if (!svgNode) svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
  svgNode.setAttribute("transform", value);
  if (!(value = svgNode.transform.baseVal.consolidate())) return identity;
  value = value.matrix;
  return decompose(value.a, value.b, value.c, value.d, value.e, value.f);
}

function interpolateTransform(parse, pxComma, pxParen, degParen) {

  function pop(s) {
    return s.length ? s.pop() + " " : "";
  }

  function translate(xa, ya, xb, yb, s, q) {
    if (xa !== xb || ya !== yb) {
      var i = s.push("translate(", null, pxComma, null, pxParen);
      q.push({i: i - 4, x: reinterpolate(xa, xb)}, {i: i - 2, x: reinterpolate(ya, yb)});
    } else if (xb || yb) {
      s.push("translate(" + xb + pxComma + yb + pxParen);
    }
  }

  function rotate(a, b, s, q) {
    if (a !== b) {
      if (a - b > 180) b += 360; else if (b - a > 180) a += 360; // shortest path
      q.push({i: s.push(pop(s) + "rotate(", null, degParen) - 2, x: reinterpolate(a, b)});
    } else if (b) {
      s.push(pop(s) + "rotate(" + b + degParen);
    }
  }

  function skewX(a, b, s, q) {
    if (a !== b) {
      q.push({i: s.push(pop(s) + "skewX(", null, degParen) - 2, x: reinterpolate(a, b)});
    } else if (b) {
      s.push(pop(s) + "skewX(" + b + degParen);
    }
  }

  function scale(xa, ya, xb, yb, s, q) {
    if (xa !== xb || ya !== yb) {
      var i = s.push(pop(s) + "scale(", null, ",", null, ")");
      q.push({i: i - 4, x: reinterpolate(xa, xb)}, {i: i - 2, x: reinterpolate(ya, yb)});
    } else if (xb !== 1 || yb !== 1) {
      s.push(pop(s) + "scale(" + xb + "," + yb + ")");
    }
  }

  return function(a, b) {
    var s = [], // string constants and placeholders
        q = []; // number interpolators
    a = parse(a), b = parse(b);
    translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);
    rotate(a.rotate, b.rotate, s, q);
    skewX(a.skewX, b.skewX, s, q);
    scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);
    a = b = null; // gc
    return function(t) {
      var i = -1, n = q.length, o;
      while (++i < n) s[(o = q[i]).i] = o.x(t);
      return s.join("");
    };
  };
}

var interpolateTransformCss = interpolateTransform(parseCss, "px, ", "px)", "deg)");
var interpolateTransformSvg = interpolateTransform(parseSvg, ", ", ")", ")");

var rho = Math.SQRT2,
    rho2 = 2,
    rho4 = 4,
    epsilon2 = 1e-12;

function cosh(x) {
  return ((x = Math.exp(x)) + 1 / x) / 2;
}

function sinh(x) {
  return ((x = Math.exp(x)) - 1 / x) / 2;
}

function tanh(x) {
  return ((x = Math.exp(2 * x)) - 1) / (x + 1);
}

// p0 = [ux0, uy0, w0]
// p1 = [ux1, uy1, w1]
function interpolateZoom(p0, p1) {
  var ux0 = p0[0], uy0 = p0[1], w0 = p0[2],
      ux1 = p1[0], uy1 = p1[1], w1 = p1[2],
      dx = ux1 - ux0,
      dy = uy1 - uy0,
      d2 = dx * dx + dy * dy,
      i,
      S;

  // Special case for u0 ≅ u1.
  if (d2 < epsilon2) {
    S = Math.log(w1 / w0) / rho;
    i = function(t) {
      return [
        ux0 + t * dx,
        uy0 + t * dy,
        w0 * Math.exp(rho * t * S)
      ];
    };
  }

  // General case.
  else {
    var d1 = Math.sqrt(d2),
        b0 = (w1 * w1 - w0 * w0 + rho4 * d2) / (2 * w0 * rho2 * d1),
        b1 = (w1 * w1 - w0 * w0 - rho4 * d2) / (2 * w1 * rho2 * d1),
        r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0),
        r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
    S = (r1 - r0) / rho;
    i = function(t) {
      var s = t * S,
          coshr0 = cosh(r0),
          u = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s + r0) - sinh(r0));
      return [
        ux0 + u * dx,
        uy0 + u * dy,
        w0 * coshr0 / cosh(rho * s + r0)
      ];
    };
  }

  i.duration = S * 1000;

  return i;
}

function hsl$1(hue) {
  return function(start, end) {
    var h = hue((start = hsl(start)).h, (end = hsl(end)).h),
        s = nogamma(start.s, end.s),
        l = nogamma(start.l, end.l),
        opacity = nogamma(start.opacity, end.opacity);
    return function(t) {
      start.h = h(t);
      start.s = s(t);
      start.l = l(t);
      start.opacity = opacity(t);
      return start + "";
    };
  }
}

var hsl$2 = hsl$1(hue);
var hslLong = hsl$1(nogamma);

function lab$1(start, end) {
  var l = nogamma((start = lab(start)).l, (end = lab(end)).l),
      a = nogamma(start.a, end.a),
      b = nogamma(start.b, end.b),
      opacity = nogamma(start.opacity, end.opacity);
  return function(t) {
    start.l = l(t);
    start.a = a(t);
    start.b = b(t);
    start.opacity = opacity(t);
    return start + "";
  };
}

function hcl$1(hue) {
  return function(start, end) {
    var h = hue((start = hcl(start)).h, (end = hcl(end)).h),
        c = nogamma(start.c, end.c),
        l = nogamma(start.l, end.l),
        opacity = nogamma(start.opacity, end.opacity);
    return function(t) {
      start.h = h(t);
      start.c = c(t);
      start.l = l(t);
      start.opacity = opacity(t);
      return start + "";
    };
  }
}

var hcl$2 = hcl$1(hue);
var hclLong = hcl$1(nogamma);

function cubehelix$1(hue) {
  return (function cubehelixGamma(y) {
    y = +y;

    function cubehelix$1(start, end) {
      var h = hue((start = cubehelix(start)).h, (end = cubehelix(end)).h),
          s = nogamma(start.s, end.s),
          l = nogamma(start.l, end.l),
          opacity = nogamma(start.opacity, end.opacity);
      return function(t) {
        start.h = h(t);
        start.s = s(t);
        start.l = l(Math.pow(t, y));
        start.opacity = opacity(t);
        return start + "";
      };
    }

    cubehelix$1.gamma = cubehelixGamma;

    return cubehelix$1;
  })(1);
}

var cubehelix$2 = cubehelix$1(hue);
var cubehelixLong = cubehelix$1(nogamma);

function piecewise(interpolate, values) {
  var i = 0, n = values.length - 1, v = values[0], I = new Array(n < 0 ? 0 : n);
  while (i < n) I[i] = interpolate(v, v = values[++i]);
  return function(t) {
    var i = Math.max(0, Math.min(n - 1, Math.floor(t *= n)));
    return I[i](t - i);
  };
}

function quantize(interpolator, n) {
  var samples = new Array(n);
  for (var i = 0; i < n; ++i) samples[i] = interpolator(i / (n - 1));
  return samples;
}

function tweenRemove(id, name) {
  var tween0, tween1;
  return function() {
    var schedule = set$1(this, id),
        tween = schedule.tween;

    // If this node shared tween with the previous node,
    // just assign the updated shared tween and we’re done!
    // Otherwise, copy-on-write.
    if (tween !== tween0) {
      tween1 = tween0 = tween;
      for (var i = 0, n = tween1.length; i < n; ++i) {
        if (tween1[i].name === name) {
          tween1 = tween1.slice();
          tween1.splice(i, 1);
          break;
        }
      }
    }

    schedule.tween = tween1;
  };
}

function tweenFunction(id, name, value) {
  var tween0, tween1;
  if (typeof value !== "function") throw new Error;
  return function() {
    var schedule = set$1(this, id),
        tween = schedule.tween;

    // If this node shared tween with the previous node,
    // just assign the updated shared tween and we’re done!
    // Otherwise, copy-on-write.
    if (tween !== tween0) {
      tween1 = (tween0 = tween).slice();
      for (var t = {name: name, value: value}, i = 0, n = tween1.length; i < n; ++i) {
        if (tween1[i].name === name) {
          tween1[i] = t;
          break;
        }
      }
      if (i === n) tween1.push(t);
    }

    schedule.tween = tween1;
  };
}

function transition_tween(name, value) {
  var id = this._id;

  name += "";

  if (arguments.length < 2) {
    var tween = get$1(this.node(), id).tween;
    for (var i = 0, n = tween.length, t; i < n; ++i) {
      if ((t = tween[i]).name === name) {
        return t.value;
      }
    }
    return null;
  }

  return this.each((value == null ? tweenRemove : tweenFunction)(id, name, value));
}

function tweenValue(transition, name, value) {
  var id = transition._id;

  transition.each(function() {
    var schedule = set$1(this, id);
    (schedule.value || (schedule.value = {}))[name] = value.apply(this, arguments);
  });

  return function(node) {
    return get$1(node, id).value[name];
  };
}

function interpolate$1(a, b) {
  var c;
  return (typeof b === "number" ? reinterpolate
      : b instanceof color ? interpolateRgb
      : (c = color(b)) ? (b = c, interpolateRgb)
      : interpolateString)(a, b);
}

function attrRemove$1(name) {
  return function() {
    this.removeAttribute(name);
  };
}

function attrRemoveNS$1(fullname) {
  return function() {
    this.removeAttributeNS(fullname.space, fullname.local);
  };
}

function attrConstant$1(name, interpolate, value1) {
  var string00,
      string1 = value1 + "",
      interpolate0;
  return function() {
    var string0 = this.getAttribute(name);
    return string0 === string1 ? null
        : string0 === string00 ? interpolate0
        : interpolate0 = interpolate(string00 = string0, value1);
  };
}

function attrConstantNS$1(fullname, interpolate, value1) {
  var string00,
      string1 = value1 + "",
      interpolate0;
  return function() {
    var string0 = this.getAttributeNS(fullname.space, fullname.local);
    return string0 === string1 ? null
        : string0 === string00 ? interpolate0
        : interpolate0 = interpolate(string00 = string0, value1);
  };
}

function attrFunction$1(name, interpolate, value) {
  var string00,
      string10,
      interpolate0;
  return function() {
    var string0, value1 = value(this), string1;
    if (value1 == null) return void this.removeAttribute(name);
    string0 = this.getAttribute(name);
    string1 = value1 + "";
    return string0 === string1 ? null
        : string0 === string00 && string1 === string10 ? interpolate0
        : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
  };
}

function attrFunctionNS$1(fullname, interpolate, value) {
  var string00,
      string10,
      interpolate0;
  return function() {
    var string0, value1 = value(this), string1;
    if (value1 == null) return void this.removeAttributeNS(fullname.space, fullname.local);
    string0 = this.getAttributeNS(fullname.space, fullname.local);
    string1 = value1 + "";
    return string0 === string1 ? null
        : string0 === string00 && string1 === string10 ? interpolate0
        : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
  };
}

function transition_attr(name, value) {
  var fullname = namespace(name), i = fullname === "transform" ? interpolateTransformSvg : interpolate$1;
  return this.attrTween(name, typeof value === "function"
      ? (fullname.local ? attrFunctionNS$1 : attrFunction$1)(fullname, i, tweenValue(this, "attr." + name, value))
      : value == null ? (fullname.local ? attrRemoveNS$1 : attrRemove$1)(fullname)
      : (fullname.local ? attrConstantNS$1 : attrConstant$1)(fullname, i, value));
}

function attrInterpolate(name, i) {
  return function(t) {
    this.setAttribute(name, i(t));
  };
}

function attrInterpolateNS(fullname, i) {
  return function(t) {
    this.setAttributeNS(fullname.space, fullname.local, i(t));
  };
}

function attrTweenNS(fullname, value) {
  var t0, i0;
  function tween() {
    var i = value.apply(this, arguments);
    if (i !== i0) t0 = (i0 = i) && attrInterpolateNS(fullname, i);
    return t0;
  }
  tween._value = value;
  return tween;
}

function attrTween(name, value) {
  var t0, i0;
  function tween() {
    var i = value.apply(this, arguments);
    if (i !== i0) t0 = (i0 = i) && attrInterpolate(name, i);
    return t0;
  }
  tween._value = value;
  return tween;
}

function transition_attrTween(name, value) {
  var key = "attr." + name;
  if (arguments.length < 2) return (key = this.tween(key)) && key._value;
  if (value == null) return this.tween(key, null);
  if (typeof value !== "function") throw new Error;
  var fullname = namespace(name);
  return this.tween(key, (fullname.local ? attrTweenNS : attrTween)(fullname, value));
}

function delayFunction(id, value) {
  return function() {
    init(this, id).delay = +value.apply(this, arguments);
  };
}

function delayConstant(id, value) {
  return value = +value, function() {
    init(this, id).delay = value;
  };
}

function transition_delay(value) {
  var id = this._id;

  return arguments.length
      ? this.each((typeof value === "function"
          ? delayFunction
          : delayConstant)(id, value))
      : get$1(this.node(), id).delay;
}

function durationFunction(id, value) {
  return function() {
    set$1(this, id).duration = +value.apply(this, arguments);
  };
}

function durationConstant(id, value) {
  return value = +value, function() {
    set$1(this, id).duration = value;
  };
}

function transition_duration(value) {
  var id = this._id;

  return arguments.length
      ? this.each((typeof value === "function"
          ? durationFunction
          : durationConstant)(id, value))
      : get$1(this.node(), id).duration;
}

function easeConstant(id, value) {
  if (typeof value !== "function") throw new Error;
  return function() {
    set$1(this, id).ease = value;
  };
}

function transition_ease(value) {
  var id = this._id;

  return arguments.length
      ? this.each(easeConstant(id, value))
      : get$1(this.node(), id).ease;
}

function transition_filter(match) {
  if (typeof match !== "function") match = matcher(match);

  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
        subgroup.push(node);
      }
    }
  }

  return new Transition(subgroups, this._parents, this._name, this._id);
}

function transition_merge(transition) {
  if (transition._id !== this._id) throw new Error;

  for (var groups0 = this._groups, groups1 = transition._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group0[i] || group1[i]) {
        merge[i] = node;
      }
    }
  }

  for (; j < m0; ++j) {
    merges[j] = groups0[j];
  }

  return new Transition(merges, this._parents, this._name, this._id);
}

function start(name) {
  return (name + "").trim().split(/^|\s+/).every(function(t) {
    var i = t.indexOf(".");
    if (i >= 0) t = t.slice(0, i);
    return !t || t === "start";
  });
}

function onFunction(id, name, listener) {
  var on0, on1, sit = start(name) ? init : set$1;
  return function() {
    var schedule = sit(this, id),
        on = schedule.on;

    // If this node shared a dispatch with the previous node,
    // just assign the updated shared dispatch and we’re done!
    // Otherwise, copy-on-write.
    if (on !== on0) (on1 = (on0 = on).copy()).on(name, listener);

    schedule.on = on1;
  };
}

function transition_on(name, listener) {
  var id = this._id;

  return arguments.length < 2
      ? get$1(this.node(), id).on.on(name)
      : this.each(onFunction(id, name, listener));
}

function removeFunction(id) {
  return function() {
    var parent = this.parentNode;
    for (var i in this.__transition) if (+i !== id) return;
    if (parent) parent.removeChild(this);
  };
}

function transition_remove() {
  return this.on("end.remove", removeFunction(this._id));
}

function transition_select(select) {
  var name = this._name,
      id = this._id;

  if (typeof select !== "function") select = selector(select);

  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
        if ("__data__" in node) subnode.__data__ = node.__data__;
        subgroup[i] = subnode;
        schedule(subgroup[i], name, id, i, subgroup, get$1(node, id));
      }
    }
  }

  return new Transition(subgroups, this._parents, name, id);
}

function transition_selectAll(select) {
  var name = this._name,
      id = this._id;

  if (typeof select !== "function") select = selectorAll(select);

  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        for (var children = select.call(node, node.__data__, i, group), child, inherit = get$1(node, id), k = 0, l = children.length; k < l; ++k) {
          if (child = children[k]) {
            schedule(child, name, id, k, children, inherit);
          }
        }
        subgroups.push(children);
        parents.push(node);
      }
    }
  }

  return new Transition(subgroups, parents, name, id);
}

var Selection$1 = selection.prototype.constructor;

function transition_selection() {
  return new Selection$1(this._groups, this._parents);
}

function styleNull(name, interpolate) {
  var string00,
      string10,
      interpolate0;
  return function() {
    var string0 = styleValue(this, name),
        string1 = (this.style.removeProperty(name), styleValue(this, name));
    return string0 === string1 ? null
        : string0 === string00 && string1 === string10 ? interpolate0
        : interpolate0 = interpolate(string00 = string0, string10 = string1);
  };
}

function styleRemove$1(name) {
  return function() {
    this.style.removeProperty(name);
  };
}

function styleConstant$1(name, interpolate, value1) {
  var string00,
      string1 = value1 + "",
      interpolate0;
  return function() {
    var string0 = styleValue(this, name);
    return string0 === string1 ? null
        : string0 === string00 ? interpolate0
        : interpolate0 = interpolate(string00 = string0, value1);
  };
}

function styleFunction$1(name, interpolate, value) {
  var string00,
      string10,
      interpolate0;
  return function() {
    var string0 = styleValue(this, name),
        value1 = value(this),
        string1 = value1 + "";
    if (value1 == null) string1 = value1 = (this.style.removeProperty(name), styleValue(this, name));
    return string0 === string1 ? null
        : string0 === string00 && string1 === string10 ? interpolate0
        : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
  };
}

function styleMaybeRemove(id, name) {
  var on0, on1, listener0, key = "style." + name, event = "end." + key, remove;
  return function() {
    var schedule = set$1(this, id),
        on = schedule.on,
        listener = schedule.value[key] == null ? remove || (remove = styleRemove$1(name)) : undefined;

    // If this node shared a dispatch with the previous node,
    // just assign the updated shared dispatch and we’re done!
    // Otherwise, copy-on-write.
    if (on !== on0 || listener0 !== listener) (on1 = (on0 = on).copy()).on(event, listener0 = listener);

    schedule.on = on1;
  };
}

function transition_style(name, value, priority) {
  var i = (name += "") === "transform" ? interpolateTransformCss : interpolate$1;
  return value == null ? this
      .styleTween(name, styleNull(name, i))
      .on("end.style." + name, styleRemove$1(name))
    : typeof value === "function" ? this
      .styleTween(name, styleFunction$1(name, i, tweenValue(this, "style." + name, value)))
      .each(styleMaybeRemove(this._id, name))
    : this
      .styleTween(name, styleConstant$1(name, i, value), priority)
      .on("end.style." + name, null);
}

function styleInterpolate(name, i, priority) {
  return function(t) {
    this.style.setProperty(name, i(t), priority);
  };
}

function styleTween(name, value, priority) {
  var t, i0;
  function tween() {
    var i = value.apply(this, arguments);
    if (i !== i0) t = (i0 = i) && styleInterpolate(name, i, priority);
    return t;
  }
  tween._value = value;
  return tween;
}

function transition_styleTween(name, value, priority) {
  var key = "style." + (name += "");
  if (arguments.length < 2) return (key = this.tween(key)) && key._value;
  if (value == null) return this.tween(key, null);
  if (typeof value !== "function") throw new Error;
  return this.tween(key, styleTween(name, value, priority == null ? "" : priority));
}

function textConstant$1(value) {
  return function() {
    this.textContent = value;
  };
}

function textFunction$1(value) {
  return function() {
    var value1 = value(this);
    this.textContent = value1 == null ? "" : value1;
  };
}

function transition_text(value) {
  return this.tween("text", typeof value === "function"
      ? textFunction$1(tweenValue(this, "text", value))
      : textConstant$1(value == null ? "" : value + ""));
}

function transition_transition() {
  var name = this._name,
      id0 = this._id,
      id1 = newId();

  for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        var inherit = get$1(node, id0);
        schedule(node, name, id1, i, group, {
          time: inherit.time + inherit.delay + inherit.duration,
          delay: 0,
          duration: inherit.duration,
          ease: inherit.ease
        });
      }
    }
  }

  return new Transition(groups, this._parents, name, id1);
}

function transition_end() {
  var on0, on1, that = this, id = that._id, size = that.size();
  return new Promise(function(resolve, reject) {
    var cancel = {value: reject},
        end = {value: function() { if (--size === 0) resolve(); }};

    that.each(function() {
      var schedule = set$1(this, id),
          on = schedule.on;

      // If this node shared a dispatch with the previous node,
      // just assign the updated shared dispatch and we’re done!
      // Otherwise, copy-on-write.
      if (on !== on0) {
        on1 = (on0 = on).copy();
        on1._.cancel.push(cancel);
        on1._.interrupt.push(cancel);
        on1._.end.push(end);
      }

      schedule.on = on1;
    });
  });
}

var id = 0;

function Transition(groups, parents, name, id) {
  this._groups = groups;
  this._parents = parents;
  this._name = name;
  this._id = id;
}

function transition(name) {
  return selection().transition(name);
}

function newId() {
  return ++id;
}

var selection_prototype = selection.prototype;

Transition.prototype = transition.prototype = {
  constructor: Transition,
  select: transition_select,
  selectAll: transition_selectAll,
  filter: transition_filter,
  merge: transition_merge,
  selection: transition_selection,
  transition: transition_transition,
  call: selection_prototype.call,
  nodes: selection_prototype.nodes,
  node: selection_prototype.node,
  size: selection_prototype.size,
  empty: selection_prototype.empty,
  each: selection_prototype.each,
  on: transition_on,
  attr: transition_attr,
  attrTween: transition_attrTween,
  style: transition_style,
  styleTween: transition_styleTween,
  text: transition_text,
  remove: transition_remove,
  tween: transition_tween,
  delay: transition_delay,
  duration: transition_duration,
  ease: transition_ease,
  end: transition_end
};

function linear$1(t) {
  return +t;
}

function quadIn(t) {
  return t * t;
}

function quadOut(t) {
  return t * (2 - t);
}

function quadInOut(t) {
  return ((t *= 2) <= 1 ? t * t : --t * (2 - t) + 1) / 2;
}

function cubicIn(t) {
  return t * t * t;
}

function cubicOut(t) {
  return --t * t * t + 1;
}

function cubicInOut(t) {
  return ((t *= 2) <= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2;
}

var exponent = 3;

var polyIn = (function custom(e) {
  e = +e;

  function polyIn(t) {
    return Math.pow(t, e);
  }

  polyIn.exponent = custom;

  return polyIn;
})(exponent);

var polyOut = (function custom(e) {
  e = +e;

  function polyOut(t) {
    return 1 - Math.pow(1 - t, e);
  }

  polyOut.exponent = custom;

  return polyOut;
})(exponent);

var polyInOut = (function custom(e) {
  e = +e;

  function polyInOut(t) {
    return ((t *= 2) <= 1 ? Math.pow(t, e) : 2 - Math.pow(2 - t, e)) / 2;
  }

  polyInOut.exponent = custom;

  return polyInOut;
})(exponent);

var pi = Math.PI,
    halfPi = pi / 2;

function sinIn(t) {
  return 1 - Math.cos(t * halfPi);
}

function sinOut(t) {
  return Math.sin(t * halfPi);
}

function sinInOut(t) {
  return (1 - Math.cos(pi * t)) / 2;
}

function expIn(t) {
  return Math.pow(2, 10 * t - 10);
}

function expOut(t) {
  return 1 - Math.pow(2, -10 * t);
}

function expInOut(t) {
  return ((t *= 2) <= 1 ? Math.pow(2, 10 * t - 10) : 2 - Math.pow(2, 10 - 10 * t)) / 2;
}

function circleIn(t) {
  return 1 - Math.sqrt(1 - t * t);
}

function circleOut(t) {
  return Math.sqrt(1 - --t * t);
}

function circleInOut(t) {
  return ((t *= 2) <= 1 ? 1 - Math.sqrt(1 - t * t) : Math.sqrt(1 - (t -= 2) * t) + 1) / 2;
}

var b1 = 4 / 11,
    b2 = 6 / 11,
    b3 = 8 / 11,
    b4 = 3 / 4,
    b5 = 9 / 11,
    b6 = 10 / 11,
    b7 = 15 / 16,
    b8 = 21 / 22,
    b9 = 63 / 64,
    b0 = 1 / b1 / b1;

function bounceIn(t) {
  return 1 - bounceOut(1 - t);
}

function bounceOut(t) {
  return (t = +t) < b1 ? b0 * t * t : t < b3 ? b0 * (t -= b2) * t + b4 : t < b6 ? b0 * (t -= b5) * t + b7 : b0 * (t -= b8) * t + b9;
}

function bounceInOut(t) {
  return ((t *= 2) <= 1 ? 1 - bounceOut(1 - t) : bounceOut(t - 1) + 1) / 2;
}

var overshoot = 1.70158;

var backIn = (function custom(s) {
  s = +s;

  function backIn(t) {
    return t * t * ((s + 1) * t - s);
  }

  backIn.overshoot = custom;

  return backIn;
})(overshoot);

var backOut = (function custom(s) {
  s = +s;

  function backOut(t) {
    return --t * t * ((s + 1) * t + s) + 1;
  }

  backOut.overshoot = custom;

  return backOut;
})(overshoot);

var backInOut = (function custom(s) {
  s = +s;

  function backInOut(t) {
    return ((t *= 2) < 1 ? t * t * ((s + 1) * t - s) : (t -= 2) * t * ((s + 1) * t + s) + 2) / 2;
  }

  backInOut.overshoot = custom;

  return backInOut;
})(overshoot);

var tau = 2 * Math.PI,
    amplitude = 1,
    period = 0.3;

var elasticIn = (function custom(a, p) {
  var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);

  function elasticIn(t) {
    return a * Math.pow(2, 10 * --t) * Math.sin((s - t) / p);
  }

  elasticIn.amplitude = function(a) { return custom(a, p * tau); };
  elasticIn.period = function(p) { return custom(a, p); };

  return elasticIn;
})(amplitude, period);

var elasticOut = (function custom(a, p) {
  var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);

  function elasticOut(t) {
    return 1 - a * Math.pow(2, -10 * (t = +t)) * Math.sin((t + s) / p);
  }

  elasticOut.amplitude = function(a) { return custom(a, p * tau); };
  elasticOut.period = function(p) { return custom(a, p); };

  return elasticOut;
})(amplitude, period);

var elasticInOut = (function custom(a, p) {
  var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);

  function elasticInOut(t) {
    return ((t = t * 2 - 1) < 0
        ? a * Math.pow(2, 10 * t) * Math.sin((s - t) / p)
        : 2 - a * Math.pow(2, -10 * t) * Math.sin((s + t) / p)) / 2;
  }

  elasticInOut.amplitude = function(a) { return custom(a, p * tau); };
  elasticInOut.period = function(p) { return custom(a, p); };

  return elasticInOut;
})(amplitude, period);

var defaultTiming = {
  time: null, // Set on use.
  delay: 0,
  duration: 250,
  ease: cubicInOut
};

function inherit(node, id) {
  var timing;
  while (!(timing = node.__transition) || !(timing = timing[id])) {
    if (!(node = node.parentNode)) {
      return defaultTiming.time = now(), defaultTiming;
    }
  }
  return timing;
}

function selection_transition(name) {
  var id,
      timing;

  if (name instanceof Transition) {
    id = name._id, name = name._name;
  } else {
    id = newId(), (timing = defaultTiming).time = now(), name = name == null ? null : name + "";
  }

  for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        schedule(node, name, id, i, group, timing || inherit(node, id));
      }
    }
  }

  return new Transition(groups, this._parents, name, id);
}

selection.prototype.interrupt = selection_interrupt;
selection.prototype.transition = selection_transition;

var root$1 = [null];

function active(node, name) {
  var schedules = node.__transition,
      schedule,
      i;

  if (schedules) {
    name = name == null ? null : name + "";
    for (i in schedules) {
      if ((schedule = schedules[i]).state > SCHEDULED && schedule.name === name) {
        return new Transition([[node]], root$1, name, +i);
      }
    }
  }

  return null;
}

function ascending$1(a, b) {
  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
}

function bisector(compare) {
  if (compare.length === 1) compare = ascendingComparator(compare);
  return {
    left: function(a, x, lo, hi) {
      if (lo == null) lo = 0;
      if (hi == null) hi = a.length;
      while (lo < hi) {
        var mid = lo + hi >>> 1;
        if (compare(a[mid], x) < 0) lo = mid + 1;
        else hi = mid;
      }
      return lo;
    },
    right: function(a, x, lo, hi) {
      if (lo == null) lo = 0;
      if (hi == null) hi = a.length;
      while (lo < hi) {
        var mid = lo + hi >>> 1;
        if (compare(a[mid], x) > 0) hi = mid;
        else lo = mid + 1;
      }
      return lo;
    }
  };
}

function ascendingComparator(f) {
  return function(d, x) {
    return ascending$1(f(d), x);
  };
}

var ascendingBisect = bisector(ascending$1);
var bisectRight = ascendingBisect.right;
var bisectLeft = ascendingBisect.left;

function pairs(array, f) {
  if (f == null) f = pair;
  var i = 0, n = array.length - 1, p = array[0], pairs = new Array(n < 0 ? 0 : n);
  while (i < n) pairs[i] = f(p, p = array[++i]);
  return pairs;
}

function pair(a, b) {
  return [a, b];
}

function cross(values0, values1, reduce) {
  var n0 = values0.length,
      n1 = values1.length,
      values = new Array(n0 * n1),
      i0,
      i1,
      i,
      value0;

  if (reduce == null) reduce = pair;

  for (i0 = i = 0; i0 < n0; ++i0) {
    for (value0 = values0[i0], i1 = 0; i1 < n1; ++i1, ++i) {
      values[i] = reduce(value0, values1[i1]);
    }
  }

  return values;
}

function d3Descending(a, b) {
  return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
}

function number(x) {
  return x === null ? NaN : +x;
}

function d3Variance(values, valueof) {
  var n = values.length,
      m = 0,
      i = -1,
      mean = 0,
      value,
      delta,
      sum = 0;

  if (valueof == null) {
    while (++i < n) {
      if (!isNaN(value = number(values[i]))) {
        delta = value - mean;
        mean += delta / ++m;
        sum += delta * (value - mean);
      }
    }
  }

  else {
    while (++i < n) {
      if (!isNaN(value = number(valueof(values[i], i, values)))) {
        delta = value - mean;
        mean += delta / ++m;
        sum += delta * (value - mean);
      }
    }
  }

  if (m > 1) return sum / (m - 1);
}

function d3Deviation(array, f) {
  var v = d3Variance(array, f);
  return v ? Math.sqrt(v) : v;
}

function extent(values, valueof) {
  var n = values.length,
      i = -1,
      value,
      min,
      max;

  if (valueof == null) {
    while (++i < n) { // Find the first comparable value.
      if ((value = values[i]) != null && value >= value) {
        min = max = value;
        while (++i < n) { // Compare the remaining values.
          if ((value = values[i]) != null) {
            if (min > value) min = value;
            if (max < value) max = value;
          }
        }
      }
    }
  }

  else {
    while (++i < n) { // Find the first comparable value.
      if ((value = valueof(values[i], i, values)) != null && value >= value) {
        min = max = value;
        while (++i < n) { // Compare the remaining values.
          if ((value = valueof(values[i], i, values)) != null) {
            if (min > value) min = value;
            if (max < value) max = value;
          }
        }
      }
    }
  }

  return [min, max];
}

var array$1 = Array.prototype;

var slice = array$1.slice;
var map = array$1.map;

function constant$2(x) {
  return function() {
    return x;
  };
}

function identity$1(x) {
  return x;
}

function sequence(start, stop, step) {
  start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;

  var i = -1,
      n = Math.max(0, Math.ceil((stop - start) / step)) | 0,
      range = new Array(n);

  while (++i < n) {
    range[i] = start + i * step;
  }

  return range;
}

var e10 = Math.sqrt(50),
    e5 = Math.sqrt(10),
    e2 = Math.sqrt(2);

function ticks(start, stop, count) {
  var reverse,
      i = -1,
      n,
      ticks,
      step;

  stop = +stop, start = +start, count = +count;
  if (start === stop && count > 0) return [start];
  if (reverse = stop < start) n = start, start = stop, stop = n;
  if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];

  if (step > 0) {
    start = Math.ceil(start / step);
    stop = Math.floor(stop / step);
    ticks = new Array(n = Math.ceil(stop - start + 1));
    while (++i < n) ticks[i] = (start + i) * step;
  } else {
    start = Math.floor(start * step);
    stop = Math.ceil(stop * step);
    ticks = new Array(n = Math.ceil(start - stop + 1));
    while (++i < n) ticks[i] = (start - i) / step;
  }

  if (reverse) ticks.reverse();

  return ticks;
}

function tickIncrement(start, stop, count) {
  var step = (stop - start) / Math.max(0, count),
      power = Math.floor(Math.log(step) / Math.LN10),
      error = step / Math.pow(10, power);
  return power >= 0
      ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power)
      : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);
}

function tickStep(start, stop, count) {
  var step0 = Math.abs(stop - start) / Math.max(0, count),
      step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),
      error = step0 / step1;
  if (error >= e10) step1 *= 10;
  else if (error >= e5) step1 *= 5;
  else if (error >= e2) step1 *= 2;
  return stop < start ? -step1 : step1;
}

function sturges(values) {
  return Math.ceil(Math.log(values.length) / Math.LN2) + 1;
}

function histogram() {
  var value = identity$1,
      domain = extent,
      threshold = sturges;

  function histogram(data) {
    var i,
        n = data.length,
        x,
        values = new Array(n);

    for (i = 0; i < n; ++i) {
      values[i] = value(data[i], i, data);
    }

    var xz = domain(values),
        x0 = xz[0],
        x1 = xz[1],
        tz = threshold(values, x0, x1);

    // Convert number of thresholds into uniform thresholds.
    if (!Array.isArray(tz)) {
      tz = tickStep(x0, x1, tz);
      tz = sequence(Math.ceil(x0 / tz) * tz, x1, tz); // exclusive
    }

    // Remove any thresholds outside the domain.
    var m = tz.length;
    while (tz[0] <= x0) tz.shift(), --m;
    while (tz[m - 1] > x1) tz.pop(), --m;

    var bins = new Array(m + 1),
        bin;

    // Initialize bins.
    for (i = 0; i <= m; ++i) {
      bin = bins[i] = [];
      bin.x0 = i > 0 ? tz[i - 1] : x0;
      bin.x1 = i < m ? tz[i] : x1;
    }

    // Assign data to bins by value, ignoring any outside the domain.
    for (i = 0; i < n; ++i) {
      x = values[i];
      if (x0 <= x && x <= x1) {
        bins[bisectRight(tz, x, 0, m)].push(data[i]);
      }
    }

    return bins;
  }

  histogram.value = function(_) {
    return arguments.length ? (value = typeof _ === "function" ? _ : constant$2(_), histogram) : value;
  };

  histogram.domain = function(_) {
    return arguments.length ? (domain = typeof _ === "function" ? _ : constant$2([_[0], _[1]]), histogram) : domain;
  };

  histogram.thresholds = function(_) {
    return arguments.length ? (threshold = typeof _ === "function" ? _ : Array.isArray(_) ? constant$2(slice.call(_)) : constant$2(_), histogram) : threshold;
  };

  return histogram;
}

function threshold(values, p, valueof) {
  if (valueof == null) valueof = number;
  if (!(n = values.length)) return;
  if ((p = +p) <= 0 || n < 2) return +valueof(values[0], 0, values);
  if (p >= 1) return +valueof(values[n - 1], n - 1, values);
  var n,
      i = (n - 1) * p,
      i0 = Math.floor(i),
      value0 = +valueof(values[i0], i0, values),
      value1 = +valueof(values[i0 + 1], i0 + 1, values);
  return value0 + (value1 - value0) * (i - i0);
}

function freedmanDiaconis(values, min, max) {
  values = map.call(values, number).sort(ascending$1);
  return Math.ceil((max - min) / (2 * (threshold(values, 0.75) - threshold(values, 0.25)) * Math.pow(values.length, -1 / 3)));
}

function scott(values, min, max) {
  return Math.ceil((max - min) / (3.5 * d3Deviation(values) * Math.pow(values.length, -1 / 3)));
}

function d3Max(values, valueof) {
  var n = values.length,
      i = -1,
      value,
      max;

  if (valueof == null) {
    while (++i < n) { // Find the first comparable value.
      if ((value = values[i]) != null && value >= value) {
        max = value;
        while (++i < n) { // Compare the remaining values.
          if ((value = values[i]) != null && value > max) {
            max = value;
          }
        }
      }
    }
  }

  else {
    while (++i < n) { // Find the first comparable value.
      if ((value = valueof(values[i], i, values)) != null && value >= value) {
        max = value;
        while (++i < n) { // Compare the remaining values.
          if ((value = valueof(values[i], i, values)) != null && value > max) {
            max = value;
          }
        }
      }
    }
  }

  return max;
}

function d3Mean(values, valueof) {
  var n = values.length,
      m = n,
      i = -1,
      value,
      sum = 0;

  if (valueof == null) {
    while (++i < n) {
      if (!isNaN(value = number(values[i]))) sum += value;
      else --m;
    }
  }

  else {
    while (++i < n) {
      if (!isNaN(value = number(valueof(values[i], i, values)))) sum += value;
      else --m;
    }
  }

  if (m) return sum / m;
}

function d3Median(values, valueof) {
  var n = values.length,
      i = -1,
      value,
      numbers = [];

  if (valueof == null) {
    while (++i < n) {
      if (!isNaN(value = number(values[i]))) {
        numbers.push(value);
      }
    }
  }

  else {
    while (++i < n) {
      if (!isNaN(value = number(valueof(values[i], i, values)))) {
        numbers.push(value);
      }
    }
  }

  return threshold(numbers.sort(ascending$1), 0.5);
}

function merge(arrays) {
  var n = arrays.length,
      m,
      i = -1,
      j = 0,
      merged,
      array;

  while (++i < n) j += arrays[i].length;
  merged = new Array(j);

  while (--n >= 0) {
    array = arrays[n];
    m = array.length;
    while (--m >= 0) {
      merged[--j] = array[m];
    }
  }

  return merged;
}

function d3Min(values, valueof) {
  var n = values.length,
      i = -1,
      value,
      min;

  if (valueof == null) {
    while (++i < n) { // Find the first comparable value.
      if ((value = values[i]) != null && value >= value) {
        min = value;
        while (++i < n) { // Compare the remaining values.
          if ((value = values[i]) != null && min > value) {
            min = value;
          }
        }
      }
    }
  }

  else {
    while (++i < n) { // Find the first comparable value.
      if ((value = valueof(values[i], i, values)) != null && value >= value) {
        min = value;
        while (++i < n) { // Compare the remaining values.
          if ((value = valueof(values[i], i, values)) != null && min > value) {
            min = value;
          }
        }
      }
    }
  }

  return min;
}

function permute(array, indexes) {
  var i = indexes.length, permutes = new Array(i);
  while (i--) permutes[i] = array[indexes[i]];
  return permutes;
}

function scan(values, compare) {
  if (!(n = values.length)) return;
  var n,
      i = 0,
      j = 0,
      xi,
      xj = values[j];

  if (compare == null) compare = ascending$1;

  while (++i < n) {
    if (compare(xi = values[i], xj) < 0 || compare(xj, xj) !== 0) {
      xj = xi, j = i;
    }
  }

  if (compare(xj, xj) === 0) return j;
}

function shuffle(array, i0, i1) {
  var m = (i1 == null ? array.length : i1) - (i0 = i0 == null ? 0 : +i0),
      t,
      i;

  while (m) {
    i = Math.random() * m-- | 0;
    t = array[m + i0];
    array[m + i0] = array[i + i0];
    array[i + i0] = t;
  }

  return array;
}

function d3Sum(values, valueof) {
  var n = values.length,
      i = -1,
      value,
      sum = 0;

  if (valueof == null) {
    while (++i < n) {
      if (value = +values[i]) sum += value; // Note: zero and null are equivalent.
    }
  }

  else {
    while (++i < n) {
      if (value = +valueof(values[i], i, values)) sum += value;
    }
  }

  return sum;
}

function transpose(matrix) {
  if (!(n = matrix.length)) return [];
  for (var i = -1, m = d3Min(matrix, length), transpose = new Array(m); ++i < m;) {
    for (var j = -1, n, row = transpose[i] = new Array(n); ++j < n;) {
      row[j] = matrix[j][i];
    }
  }
  return transpose;
}

function length(d) {
  return d.length;
}

function zip() {
  return transpose(arguments);
}

var prefix = "$";

function Map() {}

Map.prototype = map$1.prototype = {
  constructor: Map,
  has: function(key) {
    return (prefix + key) in this;
  },
  get: function(key) {
    return this[prefix + key];
  },
  set: function(key, value) {
    this[prefix + key] = value;
    return this;
  },
  remove: function(key) {
    var property = prefix + key;
    return property in this && delete this[property];
  },
  clear: function() {
    for (var property in this) if (property[0] === prefix) delete this[property];
  },
  keys: function() {
    var keys = [];
    for (var property in this) if (property[0] === prefix) keys.push(property.slice(1));
    return keys;
  },
  values: function() {
    var values = [];
    for (var property in this) if (property[0] === prefix) values.push(this[property]);
    return values;
  },
  entries: function() {
    var entries = [];
    for (var property in this) if (property[0] === prefix) entries.push({key: property.slice(1), value: this[property]});
    return entries;
  },
  size: function() {
    var size = 0;
    for (var property in this) if (property[0] === prefix) ++size;
    return size;
  },
  empty: function() {
    for (var property in this) if (property[0] === prefix) return false;
    return true;
  },
  each: function(f) {
    for (var property in this) if (property[0] === prefix) f(this[property], property.slice(1), this);
  }
};

function map$1(object, f) {
  var map = new Map;

  // Copy constructor.
  if (object instanceof Map) object.each(function(value, key) { map.set(key, value); });

  // Index array by numeric index or specified key function.
  else if (Array.isArray(object)) {
    var i = -1,
        n = object.length,
        o;

    if (f == null) while (++i < n) map.set(i, object[i]);
    else while (++i < n) map.set(f(o = object[i], i, object), o);
  }

  // Convert object to map.
  else if (object) for (var key in object) map.set(key, object[key]);

  return map;
}

function d3Nest() {
  var keys = [],
      sortKeys = [],
      sortValues,
      rollup,
      nest;

  function apply(array, depth, createResult, setResult) {
    if (depth >= keys.length) {
      if (sortValues != null) array.sort(sortValues);
      return rollup != null ? rollup(array) : array;
    }

    var i = -1,
        n = array.length,
        key = keys[depth++],
        keyValue,
        value,
        valuesByKey = map$1(),
        values,
        result = createResult();

    while (++i < n) {
      if (values = valuesByKey.get(keyValue = key(value = array[i]) + "")) {
        values.push(value);
      } else {
        valuesByKey.set(keyValue, [value]);
      }
    }

    valuesByKey.each(function(values, key) {
      setResult(result, key, apply(values, depth, createResult, setResult));
    });

    return result;
  }

  function entries(map, depth) {
    if (++depth > keys.length) return map;
    var array, sortKey = sortKeys[depth - 1];
    if (rollup != null && depth >= keys.length) array = map.entries();
    else array = [], map.each(function(v, k) { array.push({key: k, values: entries(v, depth)}); });
    return sortKey != null ? array.sort(function(a, b) { return sortKey(a.key, b.key); }) : array;
  }

  return nest = {
    object: function(array) { return apply(array, 0, createObject, setObject); },
    map: function(array) { return apply(array, 0, createMap, setMap); },
    entries: function(array) { return entries(apply(array, 0, createMap, setMap), 0); },
    key: function(d) { keys.push(d); return nest; },
    sortKeys: function(order) { sortKeys[keys.length - 1] = order; return nest; },
    sortValues: function(order) { sortValues = order; return nest; },
    rollup: function(f) { rollup = f; return nest; }
  };
}

function createObject() {
  return {};
}

function setObject(object, key, value) {
  object[key] = value;
}

function createMap() {
  return map$1();
}

function setMap(map, key, value) {
  map.set(key, value);
}

function Set() {}

var proto = map$1.prototype;

Set.prototype = set$2.prototype = {
  constructor: Set,
  has: proto.has,
  add: function(value) {
    value += "";
    this[prefix + value] = value;
    return this;
  },
  remove: proto.remove,
  clear: proto.clear,
  values: proto.keys,
  size: proto.size,
  empty: proto.empty,
  each: proto.each
};

function set$2(object, f) {
  var set = new Set;

  // Copy constructor.
  if (object instanceof Set) object.each(function(value) { set.add(value); });

  // Otherwise, assume it’s an array.
  else if (object) {
    var i = -1, n = object.length;
    if (f == null) while (++i < n) set.add(object[i]);
    else while (++i < n) set.add(f(object[i], i, object));
  }

  return set;
}

function keys(map) {
  var keys = [];
  for (var key in map) keys.push(key);
  return keys;
}

function d3Values(map) {
  var values = [];
  for (var key in map) values.push(map[key]);
  return values;
}

function entries(map) {
  var entries = [];
  for (var key in map) entries.push({key: key, value: map[key]});
  return entries;
}

var EOL = {},
    EOF = {},
    QUOTE = 34,
    NEWLINE = 10,
    RETURN = 13;

function objectConverter(columns) {
  return new Function("d", "return {" + columns.map(function(name, i) {
    return JSON.stringify(name) + ": d[" + i + "]";
  }).join(",") + "}");
}

function customConverter(columns, f) {
  var object = objectConverter(columns);
  return function(row, i) {
    return f(object(row), i, columns);
  };
}

// Compute unique columns in order of discovery.
function inferColumns(rows) {
  var columnSet = Object.create(null),
      columns = [];

  rows.forEach(function(row) {
    for (var column in row) {
      if (!(column in columnSet)) {
        columns.push(columnSet[column] = column);
      }
    }
  });

  return columns;
}

function pad(value, width) {
  var s = value + "", length = s.length;
  return length < width ? new Array(width - length + 1).join(0) + s : s;
}

function formatYear(year) {
  return year < 0 ? "-" + pad(-year, 6)
    : year > 9999 ? "+" + pad(year, 6)
    : pad(year, 4);
}

function formatDate(date) {
  var hours = date.getUTCHours(),
      minutes = date.getUTCMinutes(),
      seconds = date.getUTCSeconds(),
      milliseconds = date.getUTCMilliseconds();
  return isNaN(date) ? "Invalid Date"
      : formatYear(date.getUTCFullYear()) + "-" + pad(date.getUTCMonth() + 1, 2) + "-" + pad(date.getUTCDate(), 2)
      + (milliseconds ? "T" + pad(hours, 2) + ":" + pad(minutes, 2) + ":" + pad(seconds, 2) + "." + pad(milliseconds, 3) + "Z"
      : seconds ? "T" + pad(hours, 2) + ":" + pad(minutes, 2) + ":" + pad(seconds, 2) + "Z"
      : minutes || hours ? "T" + pad(hours, 2) + ":" + pad(minutes, 2) + "Z"
      : "");
}

function dsv(delimiter) {
  var reFormat = new RegExp("[\"" + delimiter + "\n\r]"),
      DELIMITER = delimiter.charCodeAt(0);

  function parse(text, f) {
    var convert, columns, rows = parseRows(text, function(row, i) {
      if (convert) return convert(row, i - 1);
      columns = row, convert = f ? customConverter(row, f) : objectConverter(row);
    });
    rows.columns = columns || [];
    return rows;
  }

  function parseRows(text, f) {
    var rows = [], // output rows
        N = text.length,
        I = 0, // current character index
        n = 0, // current line number
        t, // current token
        eof = N <= 0, // current token followed by EOF?
        eol = false; // current token followed by EOL?

    // Strip the trailing newline.
    if (text.charCodeAt(N - 1) === NEWLINE) --N;
    if (text.charCodeAt(N - 1) === RETURN) --N;

    function token() {
      if (eof) return EOF;
      if (eol) return eol = false, EOL;

      // Unescape quotes.
      var i, j = I, c;
      if (text.charCodeAt(j) === QUOTE) {
        while (I++ < N && text.charCodeAt(I) !== QUOTE || text.charCodeAt(++I) === QUOTE);
        if ((i = I) >= N) eof = true;
        else if ((c = text.charCodeAt(I++)) === NEWLINE) eol = true;
        else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }
        return text.slice(j + 1, i - 1).replace(/""/g, "\"");
      }

      // Find next delimiter or newline.
      while (I < N) {
        if ((c = text.charCodeAt(i = I++)) === NEWLINE) eol = true;
        else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }
        else if (c !== DELIMITER) continue;
        return text.slice(j, i);
      }

      // Return last token before EOF.
      return eof = true, text.slice(j, N);
    }

    while ((t = token()) !== EOF) {
      var row = [];
      while (t !== EOL && t !== EOF) row.push(t), t = token();
      if (f && (row = f(row, n++)) == null) continue;
      rows.push(row);
    }

    return rows;
  }

  function preformatBody(rows, columns) {
    return rows.map(function(row) {
      return columns.map(function(column) {
        return formatValue(row[column]);
      }).join(delimiter);
    });
  }

  function format(rows, columns) {
    if (columns == null) columns = inferColumns(rows);
    return [columns.map(formatValue).join(delimiter)].concat(preformatBody(rows, columns)).join("\n");
  }

  function formatBody(rows, columns) {
    if (columns == null) columns = inferColumns(rows);
    return preformatBody(rows, columns).join("\n");
  }

  function formatRows(rows) {
    return rows.map(formatRow).join("\n");
  }

  function formatRow(row) {
    return row.map(formatValue).join(delimiter);
  }

  function formatValue(value) {
    return value == null ? ""
        : value instanceof Date ? formatDate(value)
        : reFormat.test(value += "") ? "\"" + value.replace(/"/g, "\"\"") + "\""
        : value;
  }

  return {
    parse: parse,
    parseRows: parseRows,
    format: format,
    formatBody: formatBody,
    formatRows: formatRows
  };
}

var csv = dsv(",");

var csvParse = csv.parse;
var csvParseRows = csv.parseRows;
var csvFormat = csv.format;
var csvFormatBody = csv.formatBody;
var csvFormatRows = csv.formatRows;

var tsv = dsv("\t");

var tsvParse = tsv.parse;
var tsvParseRows = tsv.parseRows;
var tsvFormat = tsv.format;
var tsvFormatBody = tsv.formatBody;
var tsvFormatRows = tsv.formatRows;

function autoType(object) {
  for (var key in object) {
    var value = object[key].trim(), number;
    if (!value) value = null;
    else if (value === "true") value = true;
    else if (value === "false") value = false;
    else if (value === "NaN") value = NaN;
    else if (!isNaN(number = +value)) value = number;
    else if (/^([-+]\d{2})?\d{4}(-\d{2}(-\d{2})?)?(T\d{2}:\d{2}(:\d{2}(\.\d{3})?)?(Z|[-+]\d{2}:\d{2})?)?$/.test(value)) value = new Date(value);
    else continue;
    object[key] = value;
  }
  return object;
}

// Computes the decimal coefficient and exponent of the specified number x with
// significant digits p, where x is positive and p is in [1, 21] or undefined.
// For example, formatDecimal(1.23) returns ["123", 0].
function formatDecimal(x, p) {
  if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf("e")) < 0) return null; // NaN, ±Infinity
  var i, coefficient = x.slice(0, i);

  // The string returned by toExponential either has the form \d\.\d+e[-+]\d+
  // (e.g., 1.2e+3) or the form \de[-+]\d+ (e.g., 1e+3).
  return [
    coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
    +x.slice(i + 1)
  ];
}

function exponent$1(x) {
  return x = formatDecimal(Math.abs(x)), x ? x[1] : NaN;
}

function formatGroup(grouping, thousands) {
  return function(value, width) {
    var i = value.length,
        t = [],
        j = 0,
        g = grouping[0],
        length = 0;

    while (i > 0 && g > 0) {
      if (length + g + 1 > width) g = Math.max(1, width - length);
      t.push(value.substring(i -= g, i + g));
      if ((length += g + 1) > width) break;
      g = grouping[j = (j + 1) % grouping.length];
    }

    return t.reverse().join(thousands);
  };
}

function formatNumerals(numerals) {
  return function(value) {
    return value.replace(/[0-9]/g, function(i) {
      return numerals[+i];
    });
  };
}

// [[fill]align][sign][symbol][0][width][,][.precision][~][type]
var re = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;

function formatSpecifier(specifier) {
  return new FormatSpecifier(specifier);
}

formatSpecifier.prototype = FormatSpecifier.prototype; // instanceof

function FormatSpecifier(specifier) {
  if (!(match = re.exec(specifier))) throw new Error("invalid format: " + specifier);
  var match;
  this.fill = match[1] || " ";
  this.align = match[2] || ">";
  this.sign = match[3] || "-";
  this.symbol = match[4] || "";
  this.zero = !!match[5];
  this.width = match[6] && +match[6];
  this.comma = !!match[7];
  this.precision = match[8] && +match[8].slice(1);
  this.trim = !!match[9];
  this.type = match[10] || "";
}

FormatSpecifier.prototype.toString = function() {
  return this.fill
      + this.align
      + this.sign
      + this.symbol
      + (this.zero ? "0" : "")
      + (this.width == null ? "" : Math.max(1, this.width | 0))
      + (this.comma ? "," : "")
      + (this.precision == null ? "" : "." + Math.max(0, this.precision | 0))
      + (this.trim ? "~" : "")
      + this.type;
};

// Trims insignificant zeros, e.g., replaces 1.2000k with 1.2k.
function formatTrim(s) {
  out: for (var n = s.length, i = 1, i0 = -1, i1; i < n; ++i) {
    switch (s[i]) {
      case ".": i0 = i1 = i; break;
      case "0": if (i0 === 0) i0 = i; i1 = i; break;
      default: if (i0 > 0) { if (!+s[i]) break out; i0 = 0; } break;
    }
  }
  return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;
}

var prefixExponent;

function formatPrefixAuto(x, p) {
  var d = formatDecimal(x, p);
  if (!d) return x + "";
  var coefficient = d[0],
      exponent = d[1],
      i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,
      n = coefficient.length;
  return i === n ? coefficient
      : i > n ? coefficient + new Array(i - n + 1).join("0")
      : i > 0 ? coefficient.slice(0, i) + "." + coefficient.slice(i)
      : "0." + new Array(1 - i).join("0") + formatDecimal(x, Math.max(0, p + i - 1))[0]; // less than 1y!
}

function formatRounded(x, p) {
  var d = formatDecimal(x, p);
  if (!d) return x + "";
  var coefficient = d[0],
      exponent = d[1];
  return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient
      : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1)
      : coefficient + new Array(exponent - coefficient.length + 2).join("0");
}

var formatTypes = {
  "%": function(x, p) { return (x * 100).toFixed(p); },
  "b": function(x) { return Math.round(x).toString(2); },
  "c": function(x) { return x + ""; },
  "d": function(x) { return Math.round(x).toString(10); },
  "e": function(x, p) { return x.toExponential(p); },
  "f": function(x, p) { return x.toFixed(p); },
  "g": function(x, p) { return x.toPrecision(p); },
  "o": function(x) { return Math.round(x).toString(8); },
  "p": function(x, p) { return formatRounded(x * 100, p); },
  "r": formatRounded,
  "s": formatPrefixAuto,
  "X": function(x) { return Math.round(x).toString(16).toUpperCase(); },
  "x": function(x) { return Math.round(x).toString(16); }
};

function identity$2(x) {
  return x;
}

var prefixes = ["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];

function formatLocale(locale) {
  var group = locale.grouping && locale.thousands ? formatGroup(locale.grouping, locale.thousands) : identity$2,
      currency = locale.currency,
      decimal = locale.decimal,
      numerals = locale.numerals ? formatNumerals(locale.numerals) : identity$2,
      percent = locale.percent || "%";

  function newFormat(specifier) {
    specifier = formatSpecifier(specifier);

    var fill = specifier.fill,
        align = specifier.align,
        sign = specifier.sign,
        symbol = specifier.symbol,
        zero = specifier.zero,
        width = specifier.width,
        comma = specifier.comma,
        precision = specifier.precision,
        trim = specifier.trim,
        type = specifier.type;

    // The "n" type is an alias for ",g".
    if (type === "n") comma = true, type = "g";

    // The "" type, and any invalid type, is an alias for ".12~g".
    else if (!formatTypes[type]) precision == null && (precision = 12), trim = true, type = "g";

    // If zero fill is specified, padding goes after sign and before digits.
    if (zero || (fill === "0" && align === "=")) zero = true, fill = "0", align = "=";

    // Compute the prefix and suffix.
    // For SI-prefix, the suffix is lazily computed.
    var prefix = symbol === "$" ? currency[0] : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "",
        suffix = symbol === "$" ? currency[1] : /[%p]/.test(type) ? percent : "";

    // What format function should we use?
    // Is this an integer type?
    // Can this type generate exponential notation?
    var formatType = formatTypes[type],
        maybeSuffix = /[defgprs%]/.test(type);

    // Set the default precision if not specified,
    // or clamp the specified precision to the supported range.
    // For significant precision, it must be in [1, 21].
    // For fixed precision, it must be in [0, 20].
    precision = precision == null ? 6
        : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision))
        : Math.max(0, Math.min(20, precision));

    function format(value) {
      var valuePrefix = prefix,
          valueSuffix = suffix,
          i, n, c;

      if (type === "c") {
        valueSuffix = formatType(value) + valueSuffix;
        value = "";
      } else {
        value = +value;

        // Perform the initial formatting.
        var valueNegative = value < 0;
        value = formatType(Math.abs(value), precision);

        // Trim insignificant zeros.
        if (trim) value = formatTrim(value);

        // If a negative value rounds to zero during formatting, treat as positive.
        if (valueNegative && +value === 0) valueNegative = false;

        // Compute the prefix and suffix.
        valuePrefix = (valueNegative ? (sign === "(" ? sign : "-") : sign === "-" || sign === "(" ? "" : sign) + valuePrefix;
        valueSuffix = (type === "s" ? prefixes[8 + prefixExponent / 3] : "") + valueSuffix + (valueNegative && sign === "(" ? ")" : "");

        // Break the formatted value into the integer “value” part that can be
        // grouped, and fractional or exponential “suffix” part that is not.
        if (maybeSuffix) {
          i = -1, n = value.length;
          while (++i < n) {
            if (c = value.charCodeAt(i), 48 > c || c > 57) {
              valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;
              value = value.slice(0, i);
              break;
            }
          }
        }
      }

      // If the fill character is not "0", grouping is applied before padding.
      if (comma && !zero) value = group(value, Infinity);

      // Compute the padding.
      var length = valuePrefix.length + value.length + valueSuffix.length,
          padding = length < width ? new Array(width - length + 1).join(fill) : "";

      // If the fill character is "0", grouping is applied after padding.
      if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = "";

      // Reconstruct the final output based on the desired alignment.
      switch (align) {
        case "<": value = valuePrefix + value + valueSuffix + padding; break;
        case "=": value = valuePrefix + padding + value + valueSuffix; break;
        case "^": value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length); break;
        default: value = padding + valuePrefix + value + valueSuffix; break;
      }

      return numerals(value);
    }

    format.toString = function() {
      return specifier + "";
    };

    return format;
  }

  function formatPrefix(specifier, value) {
    var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = "f", specifier)),
        e = Math.max(-8, Math.min(8, Math.floor(exponent$1(value) / 3))) * 3,
        k = Math.pow(10, -e),
        prefix = prefixes[8 + e / 3];
    return function(value) {
      return f(k * value) + prefix;
    };
  }

  return {
    format: newFormat,
    formatPrefix: formatPrefix
  };
}

var locale;
var format;
var formatPrefix;

defaultLocale({
  decimal: ".",
  thousands: ",",
  grouping: [3],
  currency: ["$", ""]
});

function defaultLocale(definition) {
  locale = formatLocale(definition);
  format = locale.format;
  formatPrefix = locale.formatPrefix;
  return locale;
}

function precisionFixed(step) {
  return Math.max(0, -exponent$1(Math.abs(step)));
}

function precisionPrefix(step, value) {
  return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent$1(value) / 3))) * 3 - exponent$1(Math.abs(step)));
}

function precisionRound(step, max) {
  step = Math.abs(step), max = Math.abs(max) - step;
  return Math.max(0, exponent$1(max) - exponent$1(step)) + 1;
}

var t0$1 = new Date,
    t1$1 = new Date;

function newInterval(floori, offseti, count, field) {

  function interval(date) {
    return floori(date = new Date(+date)), date;
  }

  interval.floor = interval;

  interval.ceil = function(date) {
    return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;
  };

  interval.round = function(date) {
    var d0 = interval(date),
        d1 = interval.ceil(date);
    return date - d0 < d1 - date ? d0 : d1;
  };

  interval.offset = function(date, step) {
    return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;
  };

  interval.range = function(start, stop, step) {
    var range = [];
    start = interval.ceil(start);
    step = step == null ? 1 : Math.floor(step);
    if (!(start < stop) || !(step > 0)) return range; // also handles Invalid Date
    do range.push(new Date(+start)); while (offseti(start, step), floori(start), start < stop)
    return range;
  };

  interval.filter = function(test) {
    return newInterval(function(date) {
      if (date >= date) while (floori(date), !test(date)) date.setTime(date - 1);
    }, function(date, step) {
      if (date >= date) while (--step >= 0) while (offseti(date, 1), !test(date)) {} // eslint-disable-line no-empty
    });
  };

  if (count) {
    interval.count = function(start, end) {
      t0$1.setTime(+start), t1$1.setTime(+end);
      floori(t0$1), floori(t1$1);
      return Math.floor(count(t0$1, t1$1));
    };

    interval.every = function(step) {
      step = Math.floor(step);
      return !isFinite(step) || !(step > 0) ? null
          : !(step > 1) ? interval
          : interval.filter(field
              ? function(d) { return field(d) % step === 0; }
              : function(d) { return interval.count(0, d) % step === 0; });
    };
  }

  return interval;
}

var millisecond = newInterval(function() {
  // noop
}, function(date, step) {
  date.setTime(+date + step);
}, function(start, end) {
  return end - start;
});

// An optimized implementation for this simple case.
millisecond.every = function(k) {
  k = Math.floor(k);
  if (!isFinite(k) || !(k > 0)) return null;
  if (!(k > 1)) return millisecond;
  return newInterval(function(date) {
    date.setTime(Math.floor(date / k) * k);
  }, function(date, step) {
    date.setTime(+date + step * k);
  }, function(start, end) {
    return (end - start) / k;
  });
};

var durationSecond = 1e3;
var durationMinute = 6e4;
var durationHour = 36e5;
var durationDay = 864e5;
var durationWeek = 6048e5;

var second = newInterval(function(date) {
  date.setTime(Math.floor(date / durationSecond) * durationSecond);
}, function(date, step) {
  date.setTime(+date + step * durationSecond);
}, function(start, end) {
  return (end - start) / durationSecond;
}, function(date) {
  return date.getUTCSeconds();
});

var minute = newInterval(function(date) {
  date.setTime(Math.floor(date / durationMinute) * durationMinute);
}, function(date, step) {
  date.setTime(+date + step * durationMinute);
}, function(start, end) {
  return (end - start) / durationMinute;
}, function(date) {
  return date.getMinutes();
});

var hour = newInterval(function(date) {
  var offset = date.getTimezoneOffset() * durationMinute % durationHour;
  if (offset < 0) offset += durationHour;
  date.setTime(Math.floor((+date - offset) / durationHour) * durationHour + offset);
}, function(date, step) {
  date.setTime(+date + step * durationHour);
}, function(start, end) {
  return (end - start) / durationHour;
}, function(date) {
  return date.getHours();
});

var day = newInterval(function(date) {
  date.setHours(0, 0, 0, 0);
}, function(date, step) {
  date.setDate(date.getDate() + step);
}, function(start, end) {
  return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationDay;
}, function(date) {
  return date.getDate() - 1;
});

function weekday(i) {
  return newInterval(function(date) {
    date.setDate(date.getDate() - (date.getDay() + 7 - i) % 7);
    date.setHours(0, 0, 0, 0);
  }, function(date, step) {
    date.setDate(date.getDate() + step * 7);
  }, function(start, end) {
    return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationWeek;
  });
}

var sunday = weekday(0);
var monday = weekday(1);
var tuesday = weekday(2);
var wednesday = weekday(3);
var thursday = weekday(4);
var friday = weekday(5);
var saturday = weekday(6);

var month = newInterval(function(date) {
  date.setDate(1);
  date.setHours(0, 0, 0, 0);
}, function(date, step) {
  date.setMonth(date.getMonth() + step);
}, function(start, end) {
  return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;
}, function(date) {
  return date.getMonth();
});

var year = newInterval(function(date) {
  date.setMonth(0, 1);
  date.setHours(0, 0, 0, 0);
}, function(date, step) {
  date.setFullYear(date.getFullYear() + step);
}, function(start, end) {
  return end.getFullYear() - start.getFullYear();
}, function(date) {
  return date.getFullYear();
});

// An optimized implementation for this simple case.
year.every = function(k) {
  return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function(date) {
    date.setFullYear(Math.floor(date.getFullYear() / k) * k);
    date.setMonth(0, 1);
    date.setHours(0, 0, 0, 0);
  }, function(date, step) {
    date.setFullYear(date.getFullYear() + step * k);
  });
};

var utcMinute = newInterval(function(date) {
  date.setUTCSeconds(0, 0);
}, function(date, step) {
  date.setTime(+date + step * durationMinute);
}, function(start, end) {
  return (end - start) / durationMinute;
}, function(date) {
  return date.getUTCMinutes();
});

var utcHour = newInterval(function(date) {
  date.setUTCMinutes(0, 0, 0);
}, function(date, step) {
  date.setTime(+date + step * durationHour);
}, function(start, end) {
  return (end - start) / durationHour;
}, function(date) {
  return date.getUTCHours();
});

var utcDay = newInterval(function(date) {
  date.setUTCHours(0, 0, 0, 0);
}, function(date, step) {
  date.setUTCDate(date.getUTCDate() + step);
}, function(start, end) {
  return (end - start) / durationDay;
}, function(date) {
  return date.getUTCDate() - 1;
});

function utcWeekday(i) {
  return newInterval(function(date) {
    date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i) % 7);
    date.setUTCHours(0, 0, 0, 0);
  }, function(date, step) {
    date.setUTCDate(date.getUTCDate() + step * 7);
  }, function(start, end) {
    return (end - start) / durationWeek;
  });
}

var utcSunday = utcWeekday(0);
var utcMonday = utcWeekday(1);
var utcTuesday = utcWeekday(2);
var utcWednesday = utcWeekday(3);
var utcThursday = utcWeekday(4);
var utcFriday = utcWeekday(5);
var utcSaturday = utcWeekday(6);

var utcMonth = newInterval(function(date) {
  date.setUTCDate(1);
  date.setUTCHours(0, 0, 0, 0);
}, function(date, step) {
  date.setUTCMonth(date.getUTCMonth() + step);
}, function(start, end) {
  return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12;
}, function(date) {
  return date.getUTCMonth();
});

var utcYear = newInterval(function(date) {
  date.setUTCMonth(0, 1);
  date.setUTCHours(0, 0, 0, 0);
}, function(date, step) {
  date.setUTCFullYear(date.getUTCFullYear() + step);
}, function(start, end) {
  return end.getUTCFullYear() - start.getUTCFullYear();
}, function(date) {
  return date.getUTCFullYear();
});

// An optimized implementation for this simple case.
utcYear.every = function(k) {
  return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function(date) {
    date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k) * k);
    date.setUTCMonth(0, 1);
    date.setUTCHours(0, 0, 0, 0);
  }, function(date, step) {
    date.setUTCFullYear(date.getUTCFullYear() + step * k);
  });
};

function localDate(d) {
  if (0 <= d.y && d.y < 100) {
    var date = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);
    date.setFullYear(d.y);
    return date;
  }
  return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L);
}

function utcDate(d) {
  if (0 <= d.y && d.y < 100) {
    var date = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));
    date.setUTCFullYear(d.y);
    return date;
  }
  return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));
}

function newYear(y) {
  return {y: y, m: 0, d: 1, H: 0, M: 0, S: 0, L: 0};
}

function formatLocale$1(locale) {
  var locale_dateTime = locale.dateTime,
      locale_date = locale.date,
      locale_time = locale.time,
      locale_periods = locale.periods,
      locale_weekdays = locale.days,
      locale_shortWeekdays = locale.shortDays,
      locale_months = locale.months,
      locale_shortMonths = locale.shortMonths;

  var periodRe = formatRe(locale_periods),
      periodLookup = formatLookup(locale_periods),
      weekdayRe = formatRe(locale_weekdays),
      weekdayLookup = formatLookup(locale_weekdays),
      shortWeekdayRe = formatRe(locale_shortWeekdays),
      shortWeekdayLookup = formatLookup(locale_shortWeekdays),
      monthRe = formatRe(locale_months),
      monthLookup = formatLookup(locale_months),
      shortMonthRe = formatRe(locale_shortMonths),
      shortMonthLookup = formatLookup(locale_shortMonths);

  var formats = {
    "a": formatShortWeekday,
    "A": formatWeekday,
    "b": formatShortMonth,
    "B": formatMonth,
    "c": null,
    "d": formatDayOfMonth,
    "e": formatDayOfMonth,
    "f": formatMicroseconds,
    "H": formatHour24,
    "I": formatHour12,
    "j": formatDayOfYear,
    "L": formatMilliseconds,
    "m": formatMonthNumber,
    "M": formatMinutes,
    "p": formatPeriod,
    "Q": formatUnixTimestamp,
    "s": formatUnixTimestampSeconds,
    "S": formatSeconds,
    "u": formatWeekdayNumberMonday,
    "U": formatWeekNumberSunday,
    "V": formatWeekNumberISO,
    "w": formatWeekdayNumberSunday,
    "W": formatWeekNumberMonday,
    "x": null,
    "X": null,
    "y": formatYear$1,
    "Y": formatFullYear,
    "Z": formatZone,
    "%": formatLiteralPercent
  };

  var utcFormats = {
    "a": formatUTCShortWeekday,
    "A": formatUTCWeekday,
    "b": formatUTCShortMonth,
    "B": formatUTCMonth,
    "c": null,
    "d": formatUTCDayOfMonth,
    "e": formatUTCDayOfMonth,
    "f": formatUTCMicroseconds,
    "H": formatUTCHour24,
    "I": formatUTCHour12,
    "j": formatUTCDayOfYear,
    "L": formatUTCMilliseconds,
    "m": formatUTCMonthNumber,
    "M": formatUTCMinutes,
    "p": formatUTCPeriod,
    "Q": formatUnixTimestamp,
    "s": formatUnixTimestampSeconds,
    "S": formatUTCSeconds,
    "u": formatUTCWeekdayNumberMonday,
    "U": formatUTCWeekNumberSunday,
    "V": formatUTCWeekNumberISO,
    "w": formatUTCWeekdayNumberSunday,
    "W": formatUTCWeekNumberMonday,
    "x": null,
    "X": null,
    "y": formatUTCYear,
    "Y": formatUTCFullYear,
    "Z": formatUTCZone,
    "%": formatLiteralPercent
  };

  var parses = {
    "a": parseShortWeekday,
    "A": parseWeekday,
    "b": parseShortMonth,
    "B": parseMonth,
    "c": parseLocaleDateTime,
    "d": parseDayOfMonth,
    "e": parseDayOfMonth,
    "f": parseMicroseconds,
    "H": parseHour24,
    "I": parseHour24,
    "j": parseDayOfYear,
    "L": parseMilliseconds,
    "m": parseMonthNumber,
    "M": parseMinutes,
    "p": parsePeriod,
    "Q": parseUnixTimestamp,
    "s": parseUnixTimestampSeconds,
    "S": parseSeconds,
    "u": parseWeekdayNumberMonday,
    "U": parseWeekNumberSunday,
    "V": parseWeekNumberISO,
    "w": parseWeekdayNumberSunday,
    "W": parseWeekNumberMonday,
    "x": parseLocaleDate,
    "X": parseLocaleTime,
    "y": parseYear,
    "Y": parseFullYear,
    "Z": parseZone,
    "%": parseLiteralPercent
  };

  // These recursive directive definitions must be deferred.
  formats.x = newFormat(locale_date, formats);
  formats.X = newFormat(locale_time, formats);
  formats.c = newFormat(locale_dateTime, formats);
  utcFormats.x = newFormat(locale_date, utcFormats);
  utcFormats.X = newFormat(locale_time, utcFormats);
  utcFormats.c = newFormat(locale_dateTime, utcFormats);

  function newFormat(specifier, formats) {
    return function(date) {
      var string = [],
          i = -1,
          j = 0,
          n = specifier.length,
          c,
          pad,
          format;

      if (!(date instanceof Date)) date = new Date(+date);

      while (++i < n) {
        if (specifier.charCodeAt(i) === 37) {
          string.push(specifier.slice(j, i));
          if ((pad = pads[c = specifier.charAt(++i)]) != null) c = specifier.charAt(++i);
          else pad = c === "e" ? " " : "0";
          if (format = formats[c]) c = format(date, pad);
          string.push(c);
          j = i + 1;
        }
      }

      string.push(specifier.slice(j, i));
      return string.join("");
    };
  }

  function newParse(specifier, newDate) {
    return function(string) {
      var d = newYear(1900),
          i = parseSpecifier(d, specifier, string += "", 0),
          week, day$1;
      if (i != string.length) return null;

      // If a UNIX timestamp is specified, return it.
      if ("Q" in d) return new Date(d.Q);

      // The am-pm flag is 0 for AM, and 1 for PM.
      if ("p" in d) d.H = d.H % 12 + d.p * 12;

      // Convert day-of-week and week-of-year to day-of-year.
      if ("V" in d) {
        if (d.V < 1 || d.V > 53) return null;
        if (!("w" in d)) d.w = 1;
        if ("Z" in d) {
          week = utcDate(newYear(d.y)), day$1 = week.getUTCDay();
          week = day$1 > 4 || day$1 === 0 ? utcMonday.ceil(week) : utcMonday(week);
          week = utcDay.offset(week, (d.V - 1) * 7);
          d.y = week.getUTCFullYear();
          d.m = week.getUTCMonth();
          d.d = week.getUTCDate() + (d.w + 6) % 7;
        } else {
          week = newDate(newYear(d.y)), day$1 = week.getDay();
          week = day$1 > 4 || day$1 === 0 ? monday.ceil(week) : monday(week);
          week = day.offset(week, (d.V - 1) * 7);
          d.y = week.getFullYear();
          d.m = week.getMonth();
          d.d = week.getDate() + (d.w + 6) % 7;
        }
      } else if ("W" in d || "U" in d) {
        if (!("w" in d)) d.w = "u" in d ? d.u % 7 : "W" in d ? 1 : 0;
        day$1 = "Z" in d ? utcDate(newYear(d.y)).getUTCDay() : newDate(newYear(d.y)).getDay();
        d.m = 0;
        d.d = "W" in d ? (d.w + 6) % 7 + d.W * 7 - (day$1 + 5) % 7 : d.w + d.U * 7 - (day$1 + 6) % 7;
      }

      // If a time zone is specified, all fields are interpreted as UTC and then
      // offset according to the specified time zone.
      if ("Z" in d) {
        d.H += d.Z / 100 | 0;
        d.M += d.Z % 100;
        return utcDate(d);
      }

      // Otherwise, all fields are in local time.
      return newDate(d);
    };
  }

  function parseSpecifier(d, specifier, string, j) {
    var i = 0,
        n = specifier.length,
        m = string.length,
        c,
        parse;

    while (i < n) {
      if (j >= m) return -1;
      c = specifier.charCodeAt(i++);
      if (c === 37) {
        c = specifier.charAt(i++);
        parse = parses[c in pads ? specifier.charAt(i++) : c];
        if (!parse || ((j = parse(d, string, j)) < 0)) return -1;
      } else if (c != string.charCodeAt(j++)) {
        return -1;
      }
    }

    return j;
  }

  function parsePeriod(d, string, i) {
    var n = periodRe.exec(string.slice(i));
    return n ? (d.p = periodLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }

  function parseShortWeekday(d, string, i) {
    var n = shortWeekdayRe.exec(string.slice(i));
    return n ? (d.w = shortWeekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }

  function parseWeekday(d, string, i) {
    var n = weekdayRe.exec(string.slice(i));
    return n ? (d.w = weekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }

  function parseShortMonth(d, string, i) {
    var n = shortMonthRe.exec(string.slice(i));
    return n ? (d.m = shortMonthLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }

  function parseMonth(d, string, i) {
    var n = monthRe.exec(string.slice(i));
    return n ? (d.m = monthLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }

  function parseLocaleDateTime(d, string, i) {
    return parseSpecifier(d, locale_dateTime, string, i);
  }

  function parseLocaleDate(d, string, i) {
    return parseSpecifier(d, locale_date, string, i);
  }

  function parseLocaleTime(d, string, i) {
    return parseSpecifier(d, locale_time, string, i);
  }

  function formatShortWeekday(d) {
    return locale_shortWeekdays[d.getDay()];
  }

  function formatWeekday(d) {
    return locale_weekdays[d.getDay()];
  }

  function formatShortMonth(d) {
    return locale_shortMonths[d.getMonth()];
  }

  function formatMonth(d) {
    return locale_months[d.getMonth()];
  }

  function formatPeriod(d) {
    return locale_periods[+(d.getHours() >= 12)];
  }

  function formatUTCShortWeekday(d) {
    return locale_shortWeekdays[d.getUTCDay()];
  }

  function formatUTCWeekday(d) {
    return locale_weekdays[d.getUTCDay()];
  }

  function formatUTCShortMonth(d) {
    return locale_shortMonths[d.getUTCMonth()];
  }

  function formatUTCMonth(d) {
    return locale_months[d.getUTCMonth()];
  }

  function formatUTCPeriod(d) {
    return locale_periods[+(d.getUTCHours() >= 12)];
  }

  return {
    format: function(specifier) {
      var f = newFormat(specifier += "", formats);
      f.toString = function() { return specifier; };
      return f;
    },
    parse: function(specifier) {
      var p = newParse(specifier += "", localDate);
      p.toString = function() { return specifier; };
      return p;
    },
    utcFormat: function(specifier) {
      var f = newFormat(specifier += "", utcFormats);
      f.toString = function() { return specifier; };
      return f;
    },
    utcParse: function(specifier) {
      var p = newParse(specifier, utcDate);
      p.toString = function() { return specifier; };
      return p;
    }
  };
}

var pads = {"-": "", "_": " ", "0": "0"},
    numberRe = /^\s*\d+/, // note: ignores next directive
    percentRe = /^%/,
    requoteRe = /[\\^$*+?|[\]().{}]/g;

function pad$1(value, fill, width) {
  var sign = value < 0 ? "-" : "",
      string = (sign ? -value : value) + "",
      length = string.length;
  return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);
}

function requote(s) {
  return s.replace(requoteRe, "\\$&");
}

function formatRe(names) {
  return new RegExp("^(?:" + names.map(requote).join("|") + ")", "i");
}

function formatLookup(names) {
  var map = {}, i = -1, n = names.length;
  while (++i < n) map[names[i].toLowerCase()] = i;
  return map;
}

function parseWeekdayNumberSunday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 1));
  return n ? (d.w = +n[0], i + n[0].length) : -1;
}

function parseWeekdayNumberMonday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 1));
  return n ? (d.u = +n[0], i + n[0].length) : -1;
}

function parseWeekNumberSunday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.U = +n[0], i + n[0].length) : -1;
}

function parseWeekNumberISO(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.V = +n[0], i + n[0].length) : -1;
}

function parseWeekNumberMonday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.W = +n[0], i + n[0].length) : -1;
}

function parseFullYear(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 4));
  return n ? (d.y = +n[0], i + n[0].length) : -1;
}

function parseYear(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.y = +n[0] + (+n[0] > 68 ? 1900 : 2000), i + n[0].length) : -1;
}

function parseZone(d, string, i) {
  var n = /^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(string.slice(i, i + 6));
  return n ? (d.Z = n[1] ? 0 : -(n[2] + (n[3] || "00")), i + n[0].length) : -1;
}

function parseMonthNumber(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.m = n[0] - 1, i + n[0].length) : -1;
}

function parseDayOfMonth(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.d = +n[0], i + n[0].length) : -1;
}

function parseDayOfYear(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 3));
  return n ? (d.m = 0, d.d = +n[0], i + n[0].length) : -1;
}

function parseHour24(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.H = +n[0], i + n[0].length) : -1;
}

function parseMinutes(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.M = +n[0], i + n[0].length) : -1;
}

function parseSeconds(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.S = +n[0], i + n[0].length) : -1;
}

function parseMilliseconds(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 3));
  return n ? (d.L = +n[0], i + n[0].length) : -1;
}

function parseMicroseconds(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 6));
  return n ? (d.L = Math.floor(n[0] / 1000), i + n[0].length) : -1;
}

function parseLiteralPercent(d, string, i) {
  var n = percentRe.exec(string.slice(i, i + 1));
  return n ? i + n[0].length : -1;
}

function parseUnixTimestamp(d, string, i) {
  var n = numberRe.exec(string.slice(i));
  return n ? (d.Q = +n[0], i + n[0].length) : -1;
}

function parseUnixTimestampSeconds(d, string, i) {
  var n = numberRe.exec(string.slice(i));
  return n ? (d.Q = (+n[0]) * 1000, i + n[0].length) : -1;
}

function formatDayOfMonth(d, p) {
  return pad$1(d.getDate(), p, 2);
}

function formatHour24(d, p) {
  return pad$1(d.getHours(), p, 2);
}

function formatHour12(d, p) {
  return pad$1(d.getHours() % 12 || 12, p, 2);
}

function formatDayOfYear(d, p) {
  return pad$1(1 + day.count(year(d), d), p, 3);
}

function formatMilliseconds(d, p) {
  return pad$1(d.getMilliseconds(), p, 3);
}

function formatMicroseconds(d, p) {
  return formatMilliseconds(d, p) + "000";
}

function formatMonthNumber(d, p) {
  return pad$1(d.getMonth() + 1, p, 2);
}

function formatMinutes(d, p) {
  return pad$1(d.getMinutes(), p, 2);
}

function formatSeconds(d, p) {
  return pad$1(d.getSeconds(), p, 2);
}

function formatWeekdayNumberMonday(d) {
  var day = d.getDay();
  return day === 0 ? 7 : day;
}

function formatWeekNumberSunday(d, p) {
  return pad$1(sunday.count(year(d), d), p, 2);
}

function formatWeekNumberISO(d, p) {
  var day = d.getDay();
  d = (day >= 4 || day === 0) ? thursday(d) : thursday.ceil(d);
  return pad$1(thursday.count(year(d), d) + (year(d).getDay() === 4), p, 2);
}

function formatWeekdayNumberSunday(d) {
  return d.getDay();
}

function formatWeekNumberMonday(d, p) {
  return pad$1(monday.count(year(d), d), p, 2);
}

function formatYear$1(d, p) {
  return pad$1(d.getFullYear() % 100, p, 2);
}

function formatFullYear(d, p) {
  return pad$1(d.getFullYear() % 10000, p, 4);
}

function formatZone(d) {
  var z = d.getTimezoneOffset();
  return (z > 0 ? "-" : (z *= -1, "+"))
      + pad$1(z / 60 | 0, "0", 2)
      + pad$1(z % 60, "0", 2);
}

function formatUTCDayOfMonth(d, p) {
  return pad$1(d.getUTCDate(), p, 2);
}

function formatUTCHour24(d, p) {
  return pad$1(d.getUTCHours(), p, 2);
}

function formatUTCHour12(d, p) {
  return pad$1(d.getUTCHours() % 12 || 12, p, 2);
}

function formatUTCDayOfYear(d, p) {
  return pad$1(1 + utcDay.count(utcYear(d), d), p, 3);
}

function formatUTCMilliseconds(d, p) {
  return pad$1(d.getUTCMilliseconds(), p, 3);
}

function formatUTCMicroseconds(d, p) {
  return formatUTCMilliseconds(d, p) + "000";
}

function formatUTCMonthNumber(d, p) {
  return pad$1(d.getUTCMonth() + 1, p, 2);
}

function formatUTCMinutes(d, p) {
  return pad$1(d.getUTCMinutes(), p, 2);
}

function formatUTCSeconds(d, p) {
  return pad$1(d.getUTCSeconds(), p, 2);
}

function formatUTCWeekdayNumberMonday(d) {
  var dow = d.getUTCDay();
  return dow === 0 ? 7 : dow;
}

function formatUTCWeekNumberSunday(d, p) {
  return pad$1(utcSunday.count(utcYear(d), d), p, 2);
}

function formatUTCWeekNumberISO(d, p) {
  var day = d.getUTCDay();
  d = (day >= 4 || day === 0) ? utcThursday(d) : utcThursday.ceil(d);
  return pad$1(utcThursday.count(utcYear(d), d) + (utcYear(d).getUTCDay() === 4), p, 2);
}

function formatUTCWeekdayNumberSunday(d) {
  return d.getUTCDay();
}

function formatUTCWeekNumberMonday(d, p) {
  return pad$1(utcMonday.count(utcYear(d), d), p, 2);
}

function formatUTCYear(d, p) {
  return pad$1(d.getUTCFullYear() % 100, p, 2);
}

function formatUTCFullYear(d, p) {
  return pad$1(d.getUTCFullYear() % 10000, p, 4);
}

function formatUTCZone() {
  return "+0000";
}

function formatLiteralPercent() {
  return "%";
}

function formatUnixTimestamp(d) {
  return +d;
}

function formatUnixTimestampSeconds(d) {
  return Math.floor(+d / 1000);
}

var locale$1;
var timeFormat;
var timeParse;
var utcFormat;
var utcParse;

defaultLocale$1({
  dateTime: "%x, %X",
  date: "%-m/%-d/%Y",
  time: "%-I:%M:%S %p",
  periods: ["AM", "PM"],
  days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
  shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
  months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
  shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
});

function defaultLocale$1(definition) {
  locale$1 = formatLocale$1(definition);
  timeFormat = locale$1.format;
  timeParse = locale$1.parse;
  utcFormat = locale$1.utcFormat;
  utcParse = locale$1.utcParse;
  return locale$1;
}

var isoSpecifier = "%Y-%m-%dT%H:%M:%S.%LZ";

function formatIsoNative(date) {
  return date.toISOString();
}

var formatIso = Date.prototype.toISOString
    ? formatIsoNative
    : utcFormat(isoSpecifier);

function parseIsoNative(string) {
  var date = new Date(string);
  return isNaN(date) ? null : date;
}

var parseIso = +new Date("2000-01-01T00:00:00.000Z")
    ? parseIsoNative
    : utcParse(isoSpecifier);

function applyMixins(derivedCtor, baseCtors) {
    baseCtors.forEach(function (baseCtor) {
        Object.getOwnPropertyNames(baseCtor).forEach(function (name) {
            if (name !== "constructor") {
                var descriptor = Object.getOwnPropertyDescriptor(baseCtor, name);
                Object.defineProperty(derivedCtor, name, descriptor);
            }
        });
    });
}
var Class = /** @class */ (function () {
    function Class() {
    }
    Class.prototype.class = function (_) {
        if (!arguments.length)
            return this._class;
        this._class = _;
        return this;
    };
    Class.prototype.classID = function () {
        return this._class.split(" ").pop();
    };
    Class.prototype.classMeta = function () {
        return classID2Meta(this.classID());
    };
    Class.prototype.implements = function (source) {
        applyMixins(this, [source]);
    };
    Class.prototype.mixin = function (mixinClass) {
        this.implements(mixinClass.prototype);
        //  Special case mixins  ---
        if (mixinClass.prototype.hasOwnProperty("_class")) {
            this._class += " " + mixinClass.prototype._class.split(" ").pop();
        }
    };
    Class.prototype.overrideMethod = function (methodID, newMethod) {
        if (this[methodID] === undefined) {
            throw new Error("Method:  " + methodID + " does not exist.");
        }
        var origMethod = this[methodID];
        this[methodID] = function () {
            arguments[arguments.length] = origMethod;
            arguments.length++;
            return newMethod.apply(this, arguments);
        };
        return this;
    };
    Class.prototype.cssTag = function (id) {
        return ("" + id).replace(/[^a-z0-9]/g, function (s) {
            var c = s.charCodeAt(0);
            if (c === 32)
                return "-";
            if (c >= 65 && c <= 90)
                return "_" + s.toLowerCase();
            return "_0x" + c.toString(16);
        });
    };
    return Class;
}());
Class.prototype._class = "common_Class";

function deepEqual(a, b) {
    if (a === b)
        return true;
    var arrA = Array.isArray(a);
    var arrB = Array.isArray(b);
    var i;
    if (arrA && arrB) {
        if (a.length !== b.length)
            return false;
        for (i = 0; i < a.length; i++)
            if (!deepEqual(a[i], b[i]))
                return false;
        return true;
    }
    // tslint:disable-next-line:triple-equals
    if (arrA != arrB)
        return false;
    if (a && b && typeof a === "object" && typeof b === "object") {
        var keys = Object.keys(a);
        if (keys.length !== Object.keys(b).length)
            return false;
        var dateA = a instanceof Date;
        var dateB = b instanceof Date;
        if (dateA && dateB)
            return a.getTime() === b.getTime();
        // tslint:disable-next-line:triple-equals
        if (dateA != dateB)
            return false;
        var regexpA = a instanceof RegExp;
        var regexpB = b instanceof RegExp;
        if (regexpA && regexpB)
            return a.toString() === b.toString();
        // tslint:disable-next-line:triple-equals
        if (regexpA != regexpB)
            return false;
        for (i = 0; i < keys.length; i++)
            if (!Object.prototype.hasOwnProperty.call(b, keys[i]))
                return false;
        for (i = 0; i < keys.length; i++)
            if (!deepEqual(a[keys[i]], b[keys[i]]))
                return false;
        return true;
    }
    return false;
}
var __meta_ = "__meta_";
var __private_ = "__private_";
var __prop_ = "_";
var __prop_data_ = "__prop_";
var __default_ = "__default_";
function isMeta(key) {
    return key.indexOf(__meta_) === 0;
}
function isPrivate(obj, key) {
    return obj[__private_ + key] || obj[__private_ + __meta_ + key];
}
var Meta = /** @class */ (function () {
    function Meta(id, defaultValue, type, description, set, ext) {
        ext = ext || {};
        this.id = id;
        this.type = type;
        this.origDefaultValue = defaultValue;
        this.defaultValue = ext.optional && defaultValue === null ? undefined : defaultValue;
        this.description = description;
        this.set = set;
        this.ext = ext;
        switch (type) {
            case "any":
                this.checkedAssign = function (_) { return _; };
                break;
            case "set":
                this.checkedAssign = function (_) {
                    if (window.__hpcc_debug) {
                        var options = typeof set === "function" ? set.call(this) : set;
                        if (options && options.length && options.indexOf(_) < 0) {
                            console.error("Invalid value for '" + this.classID() + "." + id + "':  " + _ + " expected " + JSON.stringify(options));
                        }
                    }
                    return _;
                };
                break;
            case "html-color":
                this.checkedAssign = function (_) {
                    if (window.__hpcc_debug && _ && _ !== "red") {
                        var litmus = "red";
                        var d = document.createElement("div");
                        d.style.color = litmus;
                        d.style.color = _;
                        // Element's style.color will be reverted to litmus or set to "" if an invalid color is given
                        if (d.style.color === litmus || d.style.color === "") {
                            console.error("Invalid value for '" + this.classID() + "." + id + "':  " + _ + " expected " + type);
                        }
                    }
                    return _;
                };
                break;
            case "boolean":
                this.checkedAssign = function (_) {
                    return typeof (_) === "string" && ["false", "off", "0"].indexOf(_.toLowerCase()) >= 0 ? false : Boolean(_);
                };
                break;
            case "number":
                this.checkedAssign = function (_) {
                    return Number(_);
                };
                break;
            case "string":
                this.checkedAssign = function (_) {
                    return String(_);
                };
                break;
            case "array":
                this.checkedAssign = function (_) {
                    if (!(_ instanceof Array)) {
                        console.error("Invalid value for '" + this.classID() + "." + id + "':  " + _ + " expected " + type);
                    }
                    return _;
                };
                break;
            case "object":
                this.checkedAssign = function (_) {
                    if (!(_ instanceof Object)) {
                        console.error("Invalid value for '" + this.classID() + "." + id + "':  " + _ + " expected " + type);
                    }
                    return _;
                };
                break;
            case "widget":
                this.checkedAssign = function (_) {
                    if (!_._class || _._class.indexOf("common_PropertyExt") < 0) {
                        console.error("Invalid value for '" + this.classID() + "." + id + "':  " + _ + " expected " + type);
                    }
                    return _;
                };
                break;
            case "widgetArray":
                this.checkedAssign = function (_) {
                    if (_.some(function (row) { return (!row._class || row._class.indexOf("common_Widget") < 0); })) {
                        console.error("Invalid value for '" + this.classID() + "." + id + "':  " + _ + " expected " + type);
                    }
                    return _;
                };
                break;
            case "propertyArray":
                this.checkedAssign = function (_) {
                    if (_.some(function (row) { return !row.publishedProperties; })) {
                        console.log("Invalid value for '" + this.classID() + "." + id + "':  " + _ + " expected " + type);
                    }
                    return _;
                };
                break;
            default:
                this.checkedAssign = function (_) {
                    if (window.__hpcc_debug) {
                        console.error("Unchecked property type for '" + this.classID() + "." + id + "':  " + _ + " expected " + type);
                    }
                    return _;
                };
                break;
        }
    }
    return Meta;
}());
var MetaProxy = /** @class */ (function () {
    function MetaProxy(id, proxy, method, defaultValue, ext) {
        this.id = id;
        this.type = "proxy";
        this.proxy = proxy;
        this.method = method;
        this.defaultValue = defaultValue;
        this.ext = ext || {};
    }
    return MetaProxy;
}());
function isMetaProxy(meta) {
    return meta.type === "proxy";
}
var propExtID = 0;
var PropertyExt = /** @class */ (function (_super) {
    __extends(PropertyExt, _super);
    function PropertyExt() {
        var _this = _super.call(this) || this;
        _this._publishedProperties = [];
        _this.calcPublishedProperties();
        _this._id = "_pe" + (++propExtID);
        _this._watchArrIdx = 0;
        _this._watchArr = {};
        _this.publishedProperties(true).forEach(function (meta) {
            switch (meta.type) {
                case "array":
                case "widgetArray":
                case "propertyArray":
                    this[meta.id + "_reset"]();
                    break;
            }
        }, _this);
        return _this;
    }
    PropertyExt.prototype.id = function (_) {
        if (!arguments.length)
            return this._id;
        this._id = _;
        return this;
    };
    // Publish Properties  ---
    PropertyExt.prototype.calcPublishedProperties = function (includePrivate, expandProxies) {
        this._publishedProperties = [];
        var protoStack = [];
        var __proto__ = Object.getPrototypeOf(this);
        while (__proto__) {
            if (__proto__ === PropertyExt.prototype) {
                break;
            }
            protoStack.unshift(__proto__);
            __proto__ = Object.getPrototypeOf(__proto__);
        }
        for (var _i = 0, protoStack_1 = protoStack; _i < protoStack_1.length; _i++) {
            __proto__ = protoStack_1[_i];
            for (var key in __proto__) {
                if (__proto__.hasOwnProperty(key)) {
                    if (isMeta(key)) {
                        this._publishedProperties.push(this[key]);
                    }
                }
            }
        }
    };
    PropertyExt.prototype.resolvePublishedProxy = function (meta) {
        var item = this;
        while (meta instanceof MetaProxy) {
            item = item[meta.proxy];
            meta = item.publishedProperty(meta.method);
        }
        return meta;
    };
    PropertyExt.prototype.publishedProperties = function (includePrivate, expandProxies) {
        var _this = this;
        if (includePrivate === void 0) { includePrivate = false; }
        if (expandProxies === void 0) { expandProxies = false; }
        return this._publishedProperties.filter(function (meta) { return includePrivate || !isPrivate(_this, meta.id); }).map(function (meta) {
            if (expandProxies && isMetaProxy(meta)) {
                var selfProp = meta;
                var item = _this;
                while (meta.type === "proxy") {
                    item = item[meta.proxy];
                    meta = item.publishedProperty(meta.method);
                }
                if (meta.id !== selfProp.id) {
                    meta = JSON.parse(JSON.stringify(meta)); //  Clone meta so we can safely replace the id.
                    meta.id = selfProp.id;
                }
            }
            return meta;
        });
    };
    PropertyExt.prototype.widgetWalker = function (visitor) {
        var _this = this;
        visitor(this);
        this.publishedProperties(false, true).forEach(function (publishItem) {
            switch (publishItem.type) {
                case "widget":
                    var widget = _this[publishItem.id]();
                    if (widget) {
                        widget.widgetWalker(visitor);
                    }
                    break;
                case "widgetArray":
                case "propertyArray":
                    var widgets = _this[publishItem.id]();
                    if (widgets) {
                        widgets.forEach(function (widget) {
                            widget.widgetWalker(visitor);
                        });
                    }
                    break;
            }
        });
    };
    PropertyExt.prototype.propertyWalker = function (visitor, filter) {
        var context = this;
        this.publishedProperties(false, true).forEach(function (publishItem) {
            if (typeof (filter) !== "function" || filter(context, publishItem)) {
                visitor(context, publishItem);
            }
        });
    };
    PropertyExt.prototype.serialize = function () {
        var retVal = {
            __class: this.classID()
        };
        for (var _i = 0, _a = this.publishedProperties(); _i < _a.length; _i++) {
            var prop = _a[_i];
            if (prop.id === "fields")
                continue;
            var val = this[prop.id]();
            switch (prop.type) {
                case "propertyArray":
                    if (this[prop.id + "_modified"]()) ;
                    var serialization = val.filter(function (item) { return item.valid(); }).map(function (item) { return item.serialize(); }).filter(function (item) { return item !== undefined; });
                    if (serialization) {
                        retVal[prop.id] = serialization;
                    }
                    break;
                case "widget":
                    retVal[prop.id] = val.serialize();
                    break;
                default:
                    if (this[prop.id + "_modified"]()) {
                        if (!(val instanceof Object)) {
                            retVal[prop.id] = val;
                        }
                    }
            }
        }
        return retVal;
    };
    PropertyExt.prototype.deserialize = function (props) {
        if (!props)
            return this;
        var _loop_1 = function (prop) {
            var val = props[prop.id];
            if (val !== undefined) {
                switch (prop.type) {
                    case "propertyArray":
                        if (prop.ext && prop.ext.autoExpand) {
                            this_1["" + prop.id](val.map(function (item) { return new prop.ext.autoExpand().deserialize(item); }));
                        }
                        break;
                    case "widget":
                        var currVal = this_1["" + prop.id]();
                        if (currVal.classID() === val.__class) {
                            currVal.deserialize(val);
                        }
                        else {
                            console.log("Dynamic class initialization not supported.");
                        }
                        break;
                    default:
                        this_1["" + prop.id](val);
                }
            }
        };
        var this_1 = this;
        for (var _i = 0, _a = this.publishedProperties(); _i < _a.length; _i++) {
            var prop = _a[_i];
            _loop_1(prop);
        }
        return this;
    };
    PropertyExt.prototype.publishedProperty = function (id) {
        return this[__meta_ + id];
    };
    PropertyExt.prototype.publishedModified = function () {
        return this.publishedProperties().some(function (prop) {
            return this[prop.id + "_modified"]();
        }, this);
    };
    PropertyExt.prototype.publishReset = function (privateArr, exceptionsArr) {
        privateArr = (privateArr || []).map(function (id) { return __meta_ + id; });
        exceptionsArr = (exceptionsArr || []).map(function (id) { return __meta_ + id; });
        for (var key in this) {
            if (isMeta(key)) {
                var isPrivateItem = !privateArr.length || (privateArr.length && privateArr.indexOf(key) >= 0);
                var isException = exceptionsArr.indexOf(key) >= 0;
                if (isPrivateItem && !isException) {
                    this[__private_ + key] = true;
                }
            }
        }
    };
    PropertyExt.prototype.publish = function (id, defaultValue, type, description, set, ext) {
        if (ext === void 0) { ext = {}; }
        if (id.indexOf("_") === 0) {
            id = id.slice(1);
        }
        if (this[__meta_ + id] !== undefined && !ext.override) {
            throw new Error(id + " is already published.");
        }
        var meta = this[__meta_ + id] = new Meta(id, defaultValue, type, description, set, ext);
        if (meta.ext.internal) {
            this[__private_ + id] = true;
        }
        Object.defineProperty(this, __prop_ + id, {
            set: function (_) {
                if (_ === undefined) {
                    _ = null;
                }
                else if (_ === "" && meta.ext.optional) {
                    _ = null;
                }
                else if (_ !== null) {
                    _ = meta.checkedAssign.call(this, _);
                }
                this.broadcast(id, _, this[__prop_data_ + id]);
                if (_ === null) {
                    delete this[__prop_data_ + id];
                }
                else {
                    this[__prop_data_ + id] = _;
                }
            },
            get: function () {
                if (this[id + "_disabled"]())
                    return this[id + "_default"]();
                return this[__prop_data_ + id] !== undefined ? this[__prop_data_ + id] : this[id + "_default"]();
            },
            configurable: true
        });
        if (this[id]) ;
        else {
            if (type === "propertyArray") {
                this[id] = function (_) {
                    var _this = this;
                    if (!arguments.length)
                        return this[__prop_ + id];
                    _.forEach(function (item) { return item.owner(_this); });
                    this[__prop_ + id] = _;
                    return this;
                };
            }
            else {
                this[id] = function (_) {
                    if (!arguments.length)
                        return this[__prop_ + id];
                    this[__prop_ + id] = _;
                    return this;
                };
            }
        }
        this[id + "_disabled"] = function () {
            return ext && ext.disable ? !!ext.disable(this) : false;
        };
        this[id + "_hidden"] = function () {
            return ext && ext.hidden ? !!ext.hidden(this) : false;
        };
        this[id + "_valid"] = function () {
            return ext && ext.validate ? this[id + "_disabled"]() || (ext.optional && !this[id + "_exists"]()) || (ext.autoExpand && !this.valid()) || !!ext.validate(this) : true;
        };
        this[id + "_modified"] = function () {
            if (type === "propertyArray") {
                return this[__prop_data_ + id] && (this[__prop_data_ + id].some(function (item) { return item.valid(); }));
            }
            return this[__prop_data_ + id] !== undefined;
        };
        this[id + "_exists"] = function () {
            if (this[__prop_data_ + id] != null && !(this[__prop_data_ + id] === "" && ext.optional === true))
                return true;
            if (this[id + "_default"]() != null && !(this[id + "_default"]() === "" && ext.optional === true))
                return true;
            return false;
        };
        this[id + "_default"] = function (_) {
            if (!arguments.length)
                return this[__default_ + id] !== undefined ? this[__default_ + id] : meta.defaultValue;
            if (_ === "") {
                _ = null;
            }
            if (_ === null) {
                delete this[__default_ + id];
            }
            else {
                this[__default_ + id] = _;
            }
            return this;
        };
        this[id + "_reset"] = function () {
            switch (type) {
                case "widget":
                    if (this[__prop_data_ + id]) {
                        this[__prop_data_ + id].target(null);
                    }
                    break;
                case "widgetArray":
                    if (this[__prop_data_ + id]) {
                        this[__prop_data_ + id].forEach(function (widget) {
                            widget.target(null);
                        });
                    }
                    break;
            }
            switch (type) {
                case "array":
                case "widgetArray":
                case "propertyArray":
                    this[__default_ + id] = this[id + "_default"]().map(function (row) { return row; });
                    break;
            }
            delete this[__prop_data_ + id];
            return this;
        };
        this[id + "_options"] = function () {
            if (typeof set === "function") {
                var retVal = meta.ext.optional ? [null] : [];
                return retVal.concat(set.apply(this, arguments));
            }
            return set;
        };
    };
    PropertyExt.prototype.publishWidget = function (prefix, WidgetType, id) {
        for (var key in WidgetType.prototype) {
            if (key.indexOf("__meta") === 0) {
                var publishItem = WidgetType.prototype[key];
                this.publishProxy(prefix + __prop_data_ + publishItem.id, id, publishItem.method || publishItem.id);
            }
        }
    };
    PropertyExt.prototype.publishProxy = function (id, proxy, method, defaultValue) {
        method = method || id;
        if (this[__meta_ + id] !== undefined) {
            throw new Error(id + " is already published.");
        }
        this[__meta_ + id] = new MetaProxy(id, proxy, method, defaultValue);
        this[id] = function (_) {
            if (!arguments.length)
                return defaultValue === undefined || this[id + "_modified"]() ? this[proxy][method]() : defaultValue;
            if (defaultValue !== undefined && _ === defaultValue) {
                this[proxy][method + "_reset"]();
            }
            else {
                this[proxy][method](_);
            }
            return this;
        };
        this[id + "_disabled"] = function () {
            return this[proxy][method + "_disabled"]();
        };
        this[id + "_modified"] = function () {
            return this[proxy][method + "_modified"]() && (defaultValue === undefined || this[proxy][method]() !== defaultValue);
        };
        this[id + "_exists"] = function () {
            return this[proxy][method + "_exists"]();
        };
        this[id + "_default"] = function (_) {
            if (!arguments.length)
                return this[proxy][method + "_default"]();
            this[proxy][method + "_default"](_);
            return this;
        };
        this[id + "_reset"] = function () {
            this[proxy][method + "_reset"]();
            return this;
        };
        this[id + "_options"] = function () {
            return this[proxy][method + "_options"]();
        };
    };
    PropertyExt.prototype.monitorProperty = function (propID, func) {
        var meta = this.publishedProperty(propID);
        switch (meta.type) {
            case "proxy":
                if (this[meta.proxy]) {
                    return this[meta.proxy].monitorProperty(meta.method, function (_key, newVal, oldVal) {
                        func(meta.id, newVal, oldVal);
                    });
                }
                else {
                    return {
                        remove: function () { }
                    };
                }
            default:
                var idx_1 = this._watchArrIdx++;
                this._watchArr[idx_1] = { propertyID: propID, callback: func };
                var context_1 = this;
                return {
                    remove: function () {
                        delete context_1._watchArr[idx_1];
                    }
                };
        }
    };
    PropertyExt.prototype.monitor = function (func) {
        var _this = this;
        var idx = this._watchArrIdx++;
        this._watchArr[idx] = { propertyID: undefined, callback: func };
        return {
            remove: function () {
                delete _this._watchArr[idx];
            }
        };
    };
    PropertyExt.prototype.broadcast = function (key, newVal, oldVal, source) {
        source = source || this;
        if (!deepEqual(newVal, oldVal)) {
            for (var idx in this._watchArr) {
                var monitor = this._watchArr[idx];
                if ((monitor.propertyID === undefined || monitor.propertyID === key) && monitor.callback) {
                    // console.log(`${this.classID()}->broadcast(${key}, ${newVal}, ${oldVal})`);
                    setTimeout(function (monitor2) {
                        monitor2.callback(key, newVal, oldVal, source);
                    }, 0, monitor);
                }
            }
        }
    };
    PropertyExt.prototype.applyTheme = function (theme) {
        if (!theme) {
            return;
        }
        var clsArr = this._class.split(" ");
        for (var i in clsArr) {
            if (theme[clsArr[i]]) {
                for (var paramName in theme[clsArr[i]]) {
                    if (paramName === "overrideTags" && theme[clsArr[i]][paramName] instanceof Object) {
                        for (var param in theme[clsArr[i]][paramName]) {
                            if (this.publishedProperty(paramName).ext) {
                                this.publishedProperty(paramName).ext.tags = theme[clsArr[i]][paramName][param];
                            }
                        }
                        continue;
                    }
                    if (this.publishedProperty(paramName)) {
                        this.publishedProperty(paramName).defaultValue = theme[clsArr[i]][paramName];
                    }
                }
            }
        }
    };
    PropertyExt.prototype.copyPropsTo = function (other, ignore) {
        var _this = this;
        if (ignore === void 0) { ignore = []; }
        this.publishedProperties(false).filter(function (meta) { return ignore.indexOf(meta.id) < 0; }).forEach(function (meta) {
            if (_this[meta.id + "_exists"]()) {
                other[meta.id](_this[meta.id]());
            }
            else {
                other[meta.id + "_reset"]();
            }
        });
        return this;
    };
    PropertyExt.prototype.hashSum = function (ignore, more) {
        var _this = this;
        if (ignore === void 0) { ignore = []; }
        if (more === void 0) { more = {}; }
        ignore = ignore.concat(["classed"]);
        var props = more;
        this.publishedProperties(false).filter(function (meta) { return ignore.indexOf(meta.id) < 0; }).forEach(function (meta) {
            if (_this[meta.id + "_exists"]()) {
                var value = _this[meta.id]();
                var proxyMeta = _this.resolvePublishedProxy(meta);
                switch (proxyMeta.type) {
                    case "widget":
                        value = value.hashSum();
                        break;
                    case "widgetArray":
                    case "propertyArray":
                        value = hashSum(value.map(function (v) { return v.hashSum(); }));
                        break;
                    default:
                }
                props[meta.id] = value;
            }
        });
        return hashSum(props);
    };
    //  Events  ---
    PropertyExt.prototype.on = function (eventID, func, stopPropagation) {
        if (stopPropagation === void 0) { stopPropagation = false; }
        var context = this;
        this.overrideMethod(eventID, function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var origFunc = args[args.length - 1];
            var retVal;
            if (stopPropagation) {
                if (event) {
                    event.stopPropagation();
                }
                [].push.call(args, origFunc);
            }
            else {
                retVal = origFunc.apply(context, args);
            }
            var retVal2 = func.apply(context, args);
            return retVal2 !== undefined ? retVal2 : retVal;
        });
        return this;
    };
    PropertyExt.prevClassID = "";
    return PropertyExt;
}(Class));
PropertyExt.prototype._class += " common_PropertyExt";
function publish(defaultValue, type, description, set, ext) {
    if (ext === void 0) { ext = {}; }
    return function (target, key) {
        if (!key)
            throw new Error("???");
        if (ext.reset) {
            target.publishReset();
        }
        target.publish(key, defaultValue, type, description, set, ext);
    };
}
function publishProxy(proxy, method, defaultValue, ext) {
    if (ext === void 0) { ext = {}; }
    return function (target, key) {
        if (ext.reset) {
            target.publishReset();
        }
        target.publishProxy(key, proxy, method, defaultValue);
    };
}

function _naturalSort(a, b, order, idx, sortCaseSensitive) {
    var re = /(^([+\-]?(?:0|[1-9]\d*)(?:\.\d*)?(?:[eE][+\-]?\d+)?)?$|^0x[0-9a-f]+$|\d+)/gi;
    var sre = /(^[ ]*|[ ]*$)/g;
    var dre = /(^([\w ]+,?[\w ]+)?[\w ]+,?[\w ]+\d+:\d+(:\d+)?[\w ]?|^\d{1,4}[\/\-]\d{1,4}[\/\-]\d{1,4}|^\w+, \w+ \d+, \d{4})/;
    var ore = /^0/;
    var i = function (s) { return !sortCaseSensitive && ("" + s).toLowerCase() || "" + s; };
    // convert all to strings strip whitespace
    var x = i(idx ? a[idx] : a).replace(sre, "") || "";
    var y = i(idx ? b[idx] : b).replace(sre, "") || "";
    // chunk/tokenize
    var xN = x.replace(re, "\0$1\0").replace(/\0$/, "").replace(/^\0/, "").split("\0");
    var yN = y.replace(re, "\0$1\0").replace(/\0$/, "").replace(/^\0/, "").split("\0");
    // numeric or date detection
    var xD = (xN.length !== 1 && x.match(dre) && Date.parse(x));
    var yD = xD && y.match(dre) && Date.parse(y) || null;
    var oFxNcL;
    var oFyNcL;
    // first try and sort Hex codes or Dates
    if (yD) {
        if (xD < yD) {
            return order === "ascending" ? -1 : 1;
        }
        else if (xD > yD) {
            return order === "ascending" ? 1 : -1;
        }
    }
    // natural sorting through split numeric strings and default strings
    for (var cLoc = 0, numS = Math.max(xN.length, yN.length); cLoc < numS; cLoc++) {
        // find floats not starting with "0", string or 0 if not defined (Clint Priest)
        oFxNcL = !(xN[cLoc] || "").match(ore) && parseFloat(xN[cLoc]) || xN[cLoc] || 0;
        oFyNcL = !(yN[cLoc] || "").match(ore) && parseFloat(yN[cLoc]) || yN[cLoc] || 0;
        // handle numeric vs string comparison - number < string - (Kyle Adams)
        if (isNaN(oFxNcL) !== isNaN(oFyNcL)) {
            return (isNaN(oFxNcL)) ? 1 : -1;
        }
        else if (typeof oFxNcL !== typeof oFyNcL) {
            // rely on string comparison if different types - i.e. "02" < 2 != "02" < "2"
            oFxNcL += "";
            oFyNcL += "";
        }
        if (oFxNcL < oFyNcL) {
            return order === "ascending" ? -1 : 1;
        }
        if (oFxNcL > oFyNcL) {
            return order === "ascending" ? 1 : -1;
        }
    }
    return 0;
}
//  Selection Bag(s)  ---
var SelectionBase = /** @class */ (function () {
    function SelectionBase(widget) {
        //  Can't import Widget or SVGWidget as it breaks AMD loading...
        this.__widget = widget;
    }
    SelectionBase.prototype.svgGlowID = function () {
        if (this.__svgGlowID === undefined) {
            this.__svgGlowID = this.__widget.svgGlowID && this.__widget.svgGlowID() || "";
        }
        return this.__svgGlowID;
    };
    return SelectionBase;
}());
var SelectionBag = /** @class */ (function (_super) {
    __extends(SelectionBag, _super);
    function SelectionBag(widget) {
        var _this = _super.call(this, widget) || this;
        _this.click = function (item, d3Event) {
            if (d3Event.ctrlKey) {
                if (this.items[item._id]) {
                    this.remove(item);
                }
                else {
                    this.append(item);
                }
            }
            else {
                this.clear();
                this.append(item);
            }
        };
        _this.items = {};
        return _this;
    }
    SelectionBag.prototype.clear = function () {
        for (var key in this.items) {
            this.items[key].element()
                .classed("selected", false)
                .attr("filter", null);
        }
        this.items = {};
    };
    SelectionBag.prototype.isEmpty = function () {
        for (var _key in this.items) { // jshint ignore:line
            return false;
        }
        return true;
    };
    SelectionBag.prototype.append = function (item) {
        this.items[item._id] = item;
        item.element()
            .classed("selected", true)
            .attr("filter", this.svgGlowID() ? "url(#" + this.svgGlowID() + ")" : null);
    };
    SelectionBag.prototype.remove = function (item) {
        this.items[item._id].element()
            .classed("selected", false)
            .attr("filter", null);
        delete this.items[item._id];
    };
    SelectionBag.prototype.isSelected = function (item) {
        return this.items[item._id] !== undefined;
    };
    SelectionBag.prototype.get = function () {
        var retVal = [];
        for (var key in this.items) {
            retVal.push(this.items[key]);
        }
        return retVal;
    };
    SelectionBag.prototype.set = function (itemArray) {
        this.clear();
        itemArray.forEach(function (item) {
            this.append(item);
        }, this);
    };
    return SelectionBag;
}(SelectionBase));
var SimpleSelection = /** @class */ (function (_super) {
    __extends(SimpleSelection, _super);
    function SimpleSelection(widget, widgetElement, skipBringToTop) {
        var _this = _super.call(this, widget) || this;
        _this.widgetElement(widgetElement);
        _this.skipBringToTop(skipBringToTop);
        return _this;
    }
    SimpleSelection.prototype.widgetElement = function (_) {
        if (!arguments.length)
            return this._widgetElement;
        this._widgetElement = _;
        return this;
    };
    SimpleSelection.prototype.skipBringToTop = function (_) {
        if (!arguments.length)
            return this._skipBringToTop;
        this._skipBringToTop = _;
        return this;
    };
    SimpleSelection.prototype.enter = function (elements) {
        var context = this;
        elements
            .each(function (d) {
            var selected = context._initialSelection ? context._initialSelection.indexOf(JSON.stringify(d)) >= 0 : false;
            d3Select(this)
                .classed("selected", selected)
                .classed("deselected", !selected)
                .attr("filter", context.svgGlowID() && selected ? "url(#" + context.svgGlowID() + ")" : null);
        })
            .on("click.SimpleSelection", function () {
            context.click(this);
        })
            .on("mouseover.SimpleSelection", function () {
            context.mouseOver(this);
        })
            .on("mouseout.SimpleSelection", function () {
            context.mouseOut(this);
        });
    };
    SimpleSelection.prototype.click = function (domNode) {
        if (!this._skipBringToTop) {
            domNode.parentNode.appendChild(domNode);
        }
        var element = d3Select(domNode);
        var wasSelected = element.classed("selected");
        this._widgetElement.selectAll(".selected")
            .classed("selected", false)
            .classed("deselected", true)
            .attr("filter", null);
        if (!wasSelected) {
            element
                .classed("selected", true)
                .classed("deselected", false)
                .attr("filter", this.svgGlowID() ? "url(#" + this.svgGlowID() + ")" : null);
        }
        return !wasSelected;
    };
    SimpleSelection.prototype.mouseOver = function (domNode) {
        d3Select(domNode)
            .classed("over", true);
    };
    SimpleSelection.prototype.mouseOut = function (domNode) {
        d3Select(domNode)
            .classed("over", null);
    };
    SimpleSelection.prototype.selected = function (domNode) {
        return d3Select(domNode).classed("selected");
    };
    SimpleSelection.prototype.selection = function (_) {
        if (!arguments.length) {
            var retVal_1 = [];
            if (this._widgetElement) {
                this._widgetElement.selectAll(".selected")
                    .each(function (d) { retVal_1.push(JSON.stringify(d)); });
            }
            return retVal_1;
        }
        if (this._widgetElement) {
            var context_1 = this;
            this._widgetElement.selectAll(".selected,.deselected")
                .each(function (d) {
                var selected = _.indexOf(JSON.stringify(d)) >= 0;
                d3Select(this)
                    .classed("selected", selected)
                    .classed("deselected", !selected)
                    .attr("filter", context_1.svgGlowID() ? "url(#" + context_1.svgGlowID() + ")" : null);
            });
        }
        else {
            this._initialSelection = _;
        }
        return this;
    };
    return SimpleSelection;
}(SelectionBase));
function SimpleSelectionMixin(skipBringToTop) {
    this._selection = new SimpleSelection(this, null, skipBringToTop);
}
SimpleSelectionMixin.prototype.serializeState = function () {
    return {
        selection: this._selection.selection(),
        data: this.data()
    };
};
SimpleSelectionMixin.prototype.deserializeState = function (state) {
    if (state) {
        this._selection.selection(state.selection);
        if (state.data) {
            this.data(state.data);
        }
    }
    return this;
};
var perf = window.performance;
var now$1 = perf && (perf.now || perf.mozNow || perf.msNow || perf.oNow || perf.webkitNow);
function faCode(key) {
    var faCodeMap = { "fa-glass": "\uf000", "fa-music": "\uf001", "fa-search": "\uf002", "fa-envelope-o": "\uf003", "fa-heart": "\uf004", "fa-star": "\uf005", "fa-star-o": "\uf006", "fa-user": "\uf007", "fa-film": "\uf008", "fa-th-large": "\uf009", "fa-th": "\uf00a", "fa-th-list": "\uf00b", "fa-check": "\uf00c", "fa-times": "\uf00d", "fa-search-plus": "\uf00e", "fa-search-minus": "\uf010", "fa-power-off": "\uf011", "fa-signal": "\uf012", "fa-cog": "\uf013", "fa-trash-o": "\uf014", "fa-home": "\uf015", "fa-file-o": "\uf016", "fa-clock-o": "\uf017", "fa-road": "\uf018", "fa-download": "\uf019", "fa-arrow-circle-o-down": "\uf01a", "fa-arrow-circle-o-up": "\uf01b", "fa-inbox": "\uf01c", "fa-play-circle-o": "\uf01d", "fa-repeat": "\uf01e", "fa-refresh": "\uf021", "fa-list-alt": "\uf022", "fa-lock": "\uf023", "fa-flag": "\uf024", "fa-headphones": "\uf025", "fa-volume-off": "\uf026", "fa-volume-down": "\uf027", "fa-volume-up": "\uf028", "fa-qrcode": "\uf029", "fa-barcode": "\uf02a", "fa-tag": "\uf02b", "fa-tags": "\uf02c", "fa-book": "\uf02d", "fa-bookmark": "\uf02e", "fa-print": "\uf02f", "fa-camera": "\uf030", "fa-font": "\uf031", "fa-bold": "\uf032", "fa-italic": "\uf033", "fa-text-height": "\uf034", "fa-text-width": "\uf035", "fa-align-left": "\uf036", "fa-align-center": "\uf037", "fa-align-right": "\uf038", "fa-align-justify": "\uf039", "fa-list": "\uf03a", "fa-outdent": "\uf03b", "fa-indent": "\uf03c", "fa-video-camera": "\uf03d", "fa-picture-o": "\uf03e", "fa-pencil": "\uf040", "fa-map-marker": "\uf041", "fa-adjust": "\uf042", "fa-tint": "\uf043", "fa-pencil-square-o": "\uf044", "fa-share-square-o": "\uf045", "fa-check-square-o": "\uf046", "fa-arrows": "\uf047", "fa-step-backward": "\uf048", "fa-fast-backward": "\uf049", "fa-backward": "\uf04a", "fa-play": "\uf04b", "fa-pause": "\uf04c", "fa-stop": "\uf04d", "fa-forward": "\uf04e", "fa-fast-forward": "\uf050", "fa-step-forward": "\uf051", "fa-eject": "\uf052", "fa-chevron-left": "\uf053", "fa-chevron-right": "\uf054", "fa-plus-circle": "\uf055", "fa-minus-circle": "\uf056", "fa-times-circle": "\uf057", "fa-check-circle": "\uf058", "fa-question-circle": "\uf059", "fa-info-circle": "\uf05a", "fa-crosshairs": "\uf05b", "fa-times-circle-o": "\uf05c", "fa-check-circle-o": "\uf05d", "fa-ban": "\uf05e", "fa-arrow-left": "\uf060", "fa-arrow-right": "\uf061", "fa-arrow-up": "\uf062", "fa-arrow-down": "\uf063", "fa-share": "\uf064", "fa-expand": "\uf065", "fa-compress": "\uf066", "fa-plus": "\uf067", "fa-minus": "\uf068", "fa-asterisk": "\uf069", "fa-exclamation-circle": "\uf06a", "fa-gift": "\uf06b", "fa-leaf": "\uf06c", "fa-fire": "\uf06d", "fa-eye": "\uf06e", "fa-eye-slash": "\uf070", "fa-exclamation-triangle": "\uf071", "fa-plane": "\uf072", "fa-calendar": "\uf073", "fa-random": "\uf074", "fa-comment": "\uf075", "fa-magnet": "\uf076", "fa-chevron-up": "\uf077", "fa-chevron-down": "\uf078", "fa-retweet": "\uf079", "fa-shopping-cart": "\uf07a", "fa-folder": "\uf07b", "fa-folder-open": "\uf07c", "fa-arrows-v": "\uf07d", "fa-arrows-h": "\uf07e", "fa-bar-chart": "\uf080", "fa-twitter-square": "\uf081", "fa-facebook-square": "\uf082", "fa-camera-retro": "\uf083", "fa-key": "\uf084", "fa-cogs": "\uf085", "fa-comments": "\uf086", "fa-thumbs-o-up": "\uf087", "fa-thumbs-o-down": "\uf088", "fa-star-half": "\uf089", "fa-heart-o": "\uf08a", "fa-sign-out": "\uf08b", "fa-linkedin-square": "\uf08c", "fa-thumb-tack": "\uf08d", "fa-external-link": "\uf08e", "fa-sign-in": "\uf090", "fa-trophy": "\uf091", "fa-github-square": "\uf092", "fa-upload": "\uf093", "fa-lemon-o": "\uf094", "fa-phone": "\uf095", "fa-square-o": "\uf096", "fa-bookmark-o": "\uf097", "fa-phone-square": "\uf098", "fa-twitter": "\uf099", "fa-facebook": "\uf09a", "fa-github": "\uf09b", "fa-unlock": "\uf09c", "fa-credit-card": "\uf09d", "fa-rss": "\uf09e", "fa-hdd-o": "\uf0a0", "fa-bullhorn": "\uf0a1", "fa-bell": "\uf0f3", "fa-certificate": "\uf0a3", "fa-hand-o-right": "\uf0a4", "fa-hand-o-left": "\uf0a5", "fa-hand-o-up": "\uf0a6", "fa-hand-o-down": "\uf0a7", "fa-arrow-circle-left": "\uf0a8", "fa-arrow-circle-right": "\uf0a9", "fa-arrow-circle-up": "\uf0aa", "fa-arrow-circle-down": "\uf0ab", "fa-globe": "\uf0ac", "fa-wrench": "\uf0ad", "fa-tasks": "\uf0ae", "fa-filter": "\uf0b0", "fa-briefcase": "\uf0b1", "fa-arrows-alt": "\uf0b2", "fa-users": "\uf0c0", "fa-link": "\uf0c1", "fa-cloud": "\uf0c2", "fa-flask": "\uf0c3", "fa-scissors": "\uf0c4", "fa-files-o": "\uf0c5", "fa-paperclip": "\uf0c6", "fa-floppy-o": "\uf0c7", "fa-square": "\uf0c8", "fa-bars": "\uf0c9", "fa-list-ul": "\uf0ca", "fa-list-ol": "\uf0cb", "fa-strikethrough": "\uf0cc", "fa-underline": "\uf0cd", "fa-table": "\uf0ce", "fa-magic": "\uf0d0", "fa-truck": "\uf0d1", "fa-pinterest": "\uf0d2", "fa-pinterest-square": "\uf0d3", "fa-google-plus-square": "\uf0d4", "fa-google-plus": "\uf0d5", "fa-money": "\uf0d6", "fa-caret-down": "\uf0d7", "fa-caret-up": "\uf0d8", "fa-caret-left": "\uf0d9", "fa-caret-right": "\uf0da", "fa-columns": "\uf0db", "fa-sort": "\uf0dc", "fa-sort-desc": "\uf0dd", "fa-sort-asc": "\uf0de", "fa-envelope": "\uf0e0", "fa-linkedin": "\uf0e1", "fa-undo": "\uf0e2", "fa-gavel": "\uf0e3", "fa-tachometer": "\uf0e4", "fa-comment-o": "\uf0e5", "fa-comments-o": "\uf0e6", "fa-bolt": "\uf0e7", "fa-sitemap": "\uf0e8", "fa-umbrella": "\uf0e9", "fa-clipboard": "\uf0ea", "fa-lightbulb-o": "\uf0eb", "fa-exchange": "\uf0ec", "fa-cloud-download": "\uf0ed", "fa-cloud-upload": "\uf0ee", "fa-user-md": "\uf0f0", "fa-stethoscope": "\uf0f1", "fa-suitcase": "\uf0f2", "fa-bell-o": "\uf0a2", "fa-coffee": "\uf0f4", "fa-cutlery": "\uf0f5", "fa-file-text-o": "\uf0f6", "fa-building-o": "\uf0f7", "fa-hospital-o": "\uf0f8", "fa-ambulance": "\uf0f9", "fa-medkit": "\uf0fa", "fa-fighter-jet": "\uf0fb", "fa-beer": "\uf0fc", "fa-h-square": "\uf0fd", "fa-plus-square": "\uf0fe", "fa-angle-double-left": "\uf100", "fa-angle-double-right": "\uf101", "fa-angle-double-up": "\uf102", "fa-angle-double-down": "\uf103", "fa-angle-left": "\uf104", "fa-angle-right": "\uf105", "fa-angle-up": "\uf106", "fa-angle-down": "\uf107", "fa-desktop": "\uf108", "fa-laptop": "\uf109", "fa-tablet": "\uf10a", "fa-mobile": "\uf10b", "fa-circle-o": "\uf10c", "fa-quote-left": "\uf10d", "fa-quote-right": "\uf10e", "fa-spinner": "\uf110", "fa-circle": "\uf111", "fa-reply": "\uf112", "fa-github-alt": "\uf113", "fa-folder-o": "\uf114", "fa-folder-open-o": "\uf115", "fa-smile-o": "\uf118", "fa-frown-o": "\uf119", "fa-meh-o": "\uf11a", "fa-gamepad": "\uf11b", "fa-keyboard-o": "\uf11c", "fa-flag-o": "\uf11d", "fa-flag-checkered": "\uf11e", "fa-terminal": "\uf120", "fa-code": "\uf121", "fa-reply-all": "\uf122", "fa-star-half-o": "\uf123", "fa-location-arrow": "\uf124", "fa-crop": "\uf125", "fa-code-fork": "\uf126", "fa-chain-broken": "\uf127", "fa-question": "\uf128", "fa-info": "\uf129", "fa-exclamation": "\uf12a", "fa-superscript": "\uf12b", "fa-subscript": "\uf12c", "fa-eraser": "\uf12d", "fa-puzzle-piece": "\uf12e", "fa-microphone": "\uf130", "fa-microphone-slash": "\uf131", "fa-shield": "\uf132", "fa-calendar-o": "\uf133", "fa-fire-extinguisher": "\uf134", "fa-rocket": "\uf135", "fa-maxcdn": "\uf136", "fa-chevron-circle-left": "\uf137", "fa-chevron-circle-right": "\uf138", "fa-chevron-circle-up": "\uf139", "fa-chevron-circle-down": "\uf13a", "fa-html5": "\uf13b", "fa-css3": "\uf13c", "fa-anchor": "\uf13d", "fa-unlock-alt": "\uf13e", "fa-bullseye": "\uf140", "fa-ellipsis-h": "\uf141", "fa-ellipsis-v": "\uf142", "fa-rss-square": "\uf143", "fa-play-circle": "\uf144", "fa-ticket": "\uf145", "fa-minus-square": "\uf146", "fa-minus-square-o": "\uf147", "fa-level-up": "\uf148", "fa-level-down": "\uf149", "fa-check-square": "\uf14a", "fa-pencil-square": "\uf14b", "fa-external-link-square": "\uf14c", "fa-share-square": "\uf14d", "fa-compass": "\uf14e", "fa-caret-square-o-down": "\uf150", "fa-caret-square-o-up": "\uf151", "fa-caret-square-o-right": "\uf152", "fa-eur": "\uf153", "fa-gbp": "\uf154", "fa-usd": "\uf155", "fa-inr": "\uf156", "fa-jpy": "\uf157", "fa-rub": "\uf158", "fa-krw": "\uf159", "fa-btc": "\uf15a", "fa-file": "\uf15b", "fa-file-text": "\uf15c", "fa-sort-alpha-asc": "\uf15d", "fa-sort-alpha-desc": "\uf15e", "fa-sort-amount-asc": "\uf160", "fa-sort-amount-desc": "\uf161", "fa-sort-numeric-asc": "\uf162", "fa-sort-numeric-desc": "\uf163", "fa-thumbs-up": "\uf164", "fa-thumbs-down": "\uf165", "fa-youtube-square": "\uf166", "fa-youtube": "\uf167", "fa-xing": "\uf168", "fa-xing-square": "\uf169", "fa-youtube-play": "\uf16a", "fa-dropbox": "\uf16b", "fa-stack-overflow": "\uf16c", "fa-instagram": "\uf16d", "fa-flickr": "\uf16e", "fa-adn": "\uf170", "fa-bitbucket": "\uf171", "fa-bitbucket-square": "\uf172", "fa-tumblr": "\uf173", "fa-tumblr-square": "\uf174", "fa-long-arrow-down": "\uf175", "fa-long-arrow-up": "\uf176", "fa-long-arrow-left": "\uf177", "fa-long-arrow-right": "\uf178", "fa-apple": "\uf179", "fa-windows": "\uf17a", "fa-android": "\uf17b", "fa-linux": "\uf17c", "fa-dribbble": "\uf17d", "fa-skype": "\uf17e", "fa-foursquare": "\uf180", "fa-trello": "\uf181", "fa-female": "\uf182", "fa-male": "\uf183", "fa-gratipay": "\uf184", "fa-sun-o": "\uf185", "fa-moon-o": "\uf186", "fa-archive": "\uf187", "fa-bug": "\uf188", "fa-vk": "\uf189", "fa-weibo": "\uf18a", "fa-renren": "\uf18b", "fa-pagelines": "\uf18c", "fa-stack-exchange": "\uf18d", "fa-arrow-circle-o-right": "\uf18e", "fa-arrow-circle-o-left": "\uf190", "fa-caret-square-o-left": "\uf191", "fa-dot-circle-o": "\uf192", "fa-wheelchair": "\uf193", "fa-vimeo-square": "\uf194", "fa-try": "\uf195", "fa-plus-square-o": "\uf196", "fa-space-shuttle": "\uf197", "fa-slack": "\uf198", "fa-envelope-square": "\uf199", "fa-wordpress": "\uf19a", "fa-openid": "\uf19b", "fa-university": "\uf19c", "fa-graduation-cap": "\uf19d", "fa-yahoo": "\uf19e", "fa-google": "\uf1a0", "fa-reddit": "\uf1a1", "fa-reddit-square": "\uf1a2", "fa-stumbleupon-circle": "\uf1a3", "fa-stumbleupon": "\uf1a4", "fa-delicious": "\uf1a5", "fa-digg": "\uf1a6", "fa-pied-piper": "\uf1a7", "fa-pied-piper-alt": "\uf1a8", "fa-drupal": "\uf1a9", "fa-joomla": "\uf1aa", "fa-language": "\uf1ab", "fa-fax": "\uf1ac", "fa-building": "\uf1ad", "fa-child": "\uf1ae", "fa-paw": "\uf1b0", "fa-spoon": "\uf1b1", "fa-cube": "\uf1b2", "fa-cubes": "\uf1b3", "fa-behance": "\uf1b4", "fa-behance-square": "\uf1b5", "fa-steam": "\uf1b6", "fa-steam-square": "\uf1b7", "fa-recycle": "\uf1b8", "fa-car": "\uf1b9", "fa-taxi": "\uf1ba", "fa-tree": "\uf1bb", "fa-spotify": "\uf1bc", "fa-deviantart": "\uf1bd", "fa-soundcloud": "\uf1be", "fa-database": "\uf1c0", "fa-file-pdf-o": "\uf1c1", "fa-file-word-o": "\uf1c2", "fa-file-excel-o": "\uf1c3", "fa-file-powerpoint-o": "\uf1c4", "fa-file-image-o": "\uf1c5", "fa-file-archive-o": "\uf1c6", "fa-file-audio-o": "\uf1c7", "fa-file-video-o": "\uf1c8", "fa-file-code-o": "\uf1c9", "fa-vine": "\uf1ca", "fa-codepen": "\uf1cb", "fa-jsfiddle": "\uf1cc", "fa-life-ring": "\uf1cd", "fa-circle-o-notch": "\uf1ce", "fa-rebel": "\uf1d0", "fa-empire": "\uf1d1", "fa-git-square": "\uf1d2", "fa-git": "\uf1d3", "fa-hacker-news": "\uf1d4", "fa-tencent-weibo": "\uf1d5", "fa-qq": "\uf1d6", "fa-weixin": "\uf1d7", "fa-paper-plane": "\uf1d8", "fa-paper-plane-o": "\uf1d9", "fa-history": "\uf1da", "fa-circle-thin": "\uf1db", "fa-header": "\uf1dc", "fa-paragraph": "\uf1dd", "fa-sliders": "\uf1de", "fa-share-alt": "\uf1e0", "fa-share-alt-square": "\uf1e1", "fa-bomb": "\uf1e2", "fa-futbol-o": "\uf1e3", "fa-tty": "\uf1e4", "fa-binoculars": "\uf1e5", "fa-plug": "\uf1e6", "fa-slideshare": "\uf1e7", "fa-twitch": "\uf1e8", "fa-yelp": "\uf1e9", "fa-newspaper-o": "\uf1ea", "fa-wifi": "\uf1eb", "fa-calculator": "\uf1ec", "fa-paypal": "\uf1ed", "fa-google-wallet": "\uf1ee", "fa-cc-visa": "\uf1f0", "fa-cc-mastercard": "\uf1f1", "fa-cc-discover": "\uf1f2", "fa-cc-amex": "\uf1f3", "fa-cc-paypal": "\uf1f4", "fa-cc-stripe": "\uf1f5", "fa-bell-slash": "\uf1f6", "fa-bell-slash-o": "\uf1f7", "fa-trash": "\uf1f8", "fa-copyright": "\uf1f9", "fa-at": "\uf1fa", "fa-eyedropper": "\uf1fb", "fa-paint-brush": "\uf1fc", "fa-birthday-cake": "\uf1fd", "fa-area-chart": "\uf1fe", "fa-pie-chart": "\uf200", "fa-line-chart": "\uf201", "fa-lastfm": "\uf202", "fa-lastfm-square": "\uf203", "fa-toggle-off": "\uf204", "fa-toggle-on": "\uf205", "fa-bicycle": "\uf206", "fa-bus": "\uf207", "fa-ioxhost": "\uf208", "fa-angellist": "\uf209", "fa-cc": "\uf20a", "fa-ils": "\uf20b", "fa-meanpath": "\uf20c", "fa-buysellads": "\uf20d", "fa-connectdevelop": "\uf20e", "fa-dashcube": "\uf210", "fa-forumbee": "\uf211", "fa-leanpub": "\uf212", "fa-sellsy": "\uf213", "fa-shirtsinbulk": "\uf214", "fa-simplybuilt": "\uf215", "fa-skyatlas": "\uf216", "fa-cart-plus": "\uf217", "fa-cart-arrow-down": "\uf218", "fa-diamond": "\uf219", "fa-ship": "\uf21a", "fa-user-secret": "\uf21b", "fa-motorcycle": "\uf21c", "fa-street-view": "\uf21d", "fa-heartbeat": "\uf21e", "fa-venus": "\uf221", "fa-mars": "\uf222", "fa-mercury": "\uf223", "fa-transgender": "\uf224", "fa-transgender-alt": "\uf225", "fa-venus-double": "\uf226", "fa-mars-double": "\uf227", "fa-venus-mars": "\uf228", "fa-mars-stroke": "\uf229", "fa-mars-stroke-v": "\uf22a", "fa-mars-stroke-h": "\uf22b", "fa-neuter": "\uf22c", "fa-genderless": "\uf22d", "fa-facebook-official": "\uf230", "fa-pinterest-p": "\uf231", "fa-whatsapp": "\uf232", "fa-server": "\uf233", "fa-user-plus": "\uf234", "fa-user-times": "\uf235", "fa-bed": "\uf236", "fa-viacoin": "\uf237", "fa-train": "\uf238", "fa-subway": "\uf239", "fa-medium": "\uf23a", "fa-y-combinator": "\uf23b", "fa-optin-monster": "\uf23c", "fa-opencart": "\uf23d", "fa-expeditedssl": "\uf23e", "fa-battery-full": "\uf240", "fa-battery-three-quarters": "\uf241", "fa-battery-half": "\uf242", "fa-battery-quarter": "\uf243", "fa-battery-empty": "\uf244", "fa-mouse-pointer": "\uf245", "fa-i-cursor": "\uf246", "fa-object-group": "\uf247", "fa-object-ungroup": "\uf248", "fa-sticky-note": "\uf249", "fa-sticky-note-o": "\uf24a", "fa-cc-jcb": "\uf24b", "fa-cc-diners-club": "\uf24c", "fa-clone": "\uf24d", "fa-balance-scale": "\uf24e", "fa-hourglass-o": "\uf250", "fa-hourglass-start": "\uf251", "fa-hourglass-half": "\uf252", "fa-hourglass-end": "\uf253", "fa-hourglass": "\uf254", "fa-hand-rock-o": "\uf255", "fa-hand-paper-o": "\uf256", "fa-hand-scissors-o": "\uf257", "fa-hand-lizard-o": "\uf258", "fa-hand-spock-o": "\uf259", "fa-hand-pointer-o": "\uf25a", "fa-hand-peace-o": "\uf25b", "fa-trademark": "\uf25c", "fa-registered": "\uf25d", "fa-creative-commons": "\uf25e", "fa-gg": "\uf260", "fa-gg-circle": "\uf261", "fa-tripadvisor": "\uf262", "fa-odnoklassniki": "\uf263", "fa-odnoklassniki-square": "\uf264", "fa-get-pocket": "\uf265", "fa-wikipedia-w": "\uf266", "fa-safari": "\uf267", "fa-chrome": "\uf268", "fa-firefox": "\uf269", "fa-opera": "\uf26a", "fa-internet-explorer": "\uf26b", "fa-television": "\uf26c", "fa-contao": "\uf26d", "fa-500px": "\uf26e", "fa-amazon": "\uf270", "fa-calendar-plus-o": "\uf271", "fa-calendar-minus-o": "\uf272", "fa-calendar-times-o": "\uf273", "fa-calendar-check-o": "\uf274", "fa-industry": "\uf275", "fa-map-pin": "\uf276", "fa-map-signs": "\uf277", "fa-map-o": "\uf278", "fa-map": "\uf279", "fa-commenting": "\uf27a", "fa-commenting-o": "\uf27b", "fa-houzz": "\uf27c", "fa-vimeo": "\uf27d", "fa-black-tie": "\uf27e", "fa-fonticons": "\uf280" };
    return faCodeMap[key];
}
function removeHTMLFromString(str, div) {
    div = div ? div : document.createElement("div");
    div.innerHTML = str;
    return div.textContent || div.innerText || "";
}
//  Template   ---
//  https://github.com/Matt-Esch/string-template (MIT)
var nargs = /\{([0-9a-zA-Z_\s\[\]]+)\}/g;
var nargs2 = /\{\{([0-9a-zA-Z_\s\[\]]+)\}\}/g;
function templateFields(tpl) {
    if (!tpl)
        return [];
    var retVal = [];
    var matches = tpl.match(nargs);
    if (matches && matches.length) {
        for (var _i = 0, matches_1 = matches; _i < matches_1.length; _i++) {
            var tplField = matches_1[_i];
            retVal.push(tplField.substring(1, tplField.length - 1));
        }
    }
    return retVal;
}
function template(tpl, _args) {
    if (!tpl)
        return "";
    var args;
    if (arguments.length === 2 && typeof arguments[1] === "object") {
        args = arguments[1];
    }
    else {
        args = new Array(arguments.length - 1);
        for (var i = 1; i < arguments.length; ++i) {
            args[i - 1] = arguments[i];
        }
    }
    if (!args || !args.hasOwnProperty) {
        args = {};
    }
    var _loop_1 = function (key) {
        if (isArray(args[key])) {
            args[key].forEach(function (row, idx) {
                args[key + "[" + idx + "]"] = row;
            });
        }
    };
    //  Array handling
    for (var key in args) {
        _loop_1(key);
    }
    return tpl
        .replace(nargs2, function replaceArg(match, i) {
        var result = args.hasOwnProperty(i) ? args[i] : null;
        if (result === null || result === undefined) {
            return match;
        }
        return removeHTMLFromString(result);
    })
        .replace(nargs, function replaceArg(match, i, index) {
        var result = args.hasOwnProperty(i) ? args[i] : null;
        if (result === null || result === undefined) {
            return "";
        }
        return result;
    });
}
function naturalSort(data, order, idx, sortCaseSensitive) {
    return data.slice(0).sort(function (a, b) {
        return _naturalSort(a, b, order, idx, sortCaseSensitive);
    });
}
function multiSort(data, sortBy) {
    if (sortBy && sortBy.length) {
        data.sort(function (l, r) {
            for (var i = 0; i < sortBy.length; ++i) {
                var lVal = l[sortBy[i].idx];
                var rVal = r[sortBy[i].idx];
                if (lVal !== rVal) {
                    return sortBy[i].reverse ? d3Descending(lVal, rVal) : ascending$1(lVal, rVal);
                }
            }
            return 0;
        });
    }
    return data;
}
var Selection$2 = SelectionBag;
function urlParams() {
    var def = window.location.search.split("?")[1];
    var retVal = {};
    if (def) {
        def.split("&").forEach(function (param) {
            var paramParts = param.split("=");
            switch (paramParts.length) {
                case 1:
                    retVal[decodeURIComponent(paramParts[0])] = undefined;
                    break;
                case 2:
                    retVal[decodeURIComponent(paramParts[0])] = decodeURIComponent(paramParts[1]);
                    break;
                default:
                    throw new Error("Invalid URL Param:  " + param);
            }
        });
    }
    return retVal;
}
function endsWith(str, searchStr, pos) {
    var subjectString = str.toString();
    if (typeof pos !== "number" || !isFinite(pos) || Math.floor(pos) !== pos || pos > subjectString.length) {
        pos = subjectString.length;
    }
    pos -= searchStr.length;
    var lastIndex = subjectString.indexOf(searchStr, pos);
    return lastIndex !== -1 && lastIndex === pos;
}
function d3ArrayAdapter(array) {
    return {
        ownerDocument: {
            createElement: function (_tagName) {
                return {
                    get __data__() { return this.row; },
                    set __data__(_) { this.row = array[this.index] = _; }
                };
            },
            createElementNS: function (_ns, tagName) {
                return this.createElement(tagName);
            }
        },
        querySelectorAll: function (selectors) {
            if (selectors)
                throw new Error("unsupported");
            var context = this;
            return array.map(function (row, idx) {
                return {
                    ownerDocument: context.ownerDocument,
                    parentNode: context,
                    get __data__() { return row; },
                    set __data__(_) { array[idx] = _; }
                };
            });
        },
        appendChild: function (node) {
            node.parentNode = this;
            node.index = array.length;
            array.push(null);
            return node;
        },
        insertBefore: function (node, referenceNode) {
            var idx = array.indexOf(node.__data__);
            var refIdx = array.indexOf(referenceNode.__data__);
            if (idx > refIdx) {
                array.splice(refIdx, 0, array.splice(idx, 1)[0]);
            }
            else if (idx < refIdx - 1) {
                array.splice(refIdx - 1, 0, array.splice(idx, 1)[0]);
            }
            return node;
        },
        removeChild: function (node) {
            array.splice(array.indexOf(node.__data__), 1);
            return node;
        }
    };
}
function downloadBlob(blob, filename) {
    var a = document.createElement("a");
    if (navigator.msSaveBlob) { // IE10+
        a = null;
        return navigator.msSaveBlob(blob, filename);
    }
    else if ("download" in a) { // html 5
        a.href = URL.createObjectURL(blob);
        a.setAttribute("download", filename);
        document.body.appendChild(a);
        setTimeout(function () {
            a.click();
            document.body.removeChild(a);
        }, 10);
        return true;
    }
}
function timestamp() {
    var currentdate = new Date();
    var timeFormat$1 = timeFormat("%Y-%m-%dT%H_%M_%S");
    return timeFormat$1(currentdate);
}
function downloadString(format, blob, id) {
    var filename = id || ("data_" + timestamp()) + "." + format.toLowerCase();
    var mimeType = "";
    switch (format) {
        case "TSV":
            mimeType = "text/tab-seperated-values";
            break;
        case "JSON":
            mimeType = "application/json";
            break;
        case "SVG":
            mimeType = "image/svg+xml";
            break;
        case "CSV":
        case "TEXT":
        default:
            mimeType = "text/csv";
    }
    downloadBlob(new Blob([blob], { type: mimeType }), filename);
}
function widgetPath(classID) {
    return "../" + classID.split("_").join("/");
}
function parseClassID(classID, prefix) {
    if (prefix === void 0) { prefix = ".."; }
    var parts = classID.split(".");
    var classParts = parts[0].split("_");
    return {
        package: "@hpcc-js/" + classParts[0],
        path: prefix + "/" + parts[0].split("_").join("/"),
        widgetID: classParts.length > 1 ? classParts[1] : null,
        memberWidgetID: parts.length > 1 ? parts[1] : null
    };
}
function checksum(s) {
    if (s instanceof Array) {
        s = s.join("") + s.length;
    }
    switch (typeof s) {
        case "string":
            break;
        default:
            s = "" + s;
    }
    var chk = 0x12345678;
    for (var i = 0, l = s.length; i < l; ++i) {
        chk += (s.charCodeAt(i) * (i + 1));
    }
    // tslint:disable-next-line:no-bitwise
    return (chk & 0xffffffff).toString(16);
}
function getTime() {
    return (now$1 && now$1.call(perf)) || (new Date().getTime());
}
function mixin(dest, _sources) {
    dest = dest || {};
    for (var i = 1, l = arguments.length; i < l; i++) {
        _mixin(dest, arguments[i]);
    }
    return dest;
}
function _mixin(dest, source) {
    var s;
    var empty = {};
    for (var key in source) {
        s = source[key];
        if (!(key in dest) || (dest[key] !== s && (!(key in empty) || empty[key] !== s))) {
            dest[key] = s;
        }
    }
    return dest;
}
function exists(prop, scope) {
    if (!prop || !scope) {
        return false;
    }
    var propParts = prop.split(".");
    var testScope = scope;
    for (var i = 0; i < propParts.length; ++i) {
        var item = propParts[i];
        if (testScope[item] === undefined) {
            return false;
        }
        testScope = testScope[item];
    }
    return true;
}
function logStringify(obj) {
    var cache = [];
    return JSON.stringify(obj, function (_key, value) {
        if (typeof value === "object" && value !== null) {
            if (cache.indexOf(value) !== -1) {
                return;
            }
            cache.push(value);
        }
        return value;
    });
}
function debounce(func, threshold, execAsap) {
    if (threshold === void 0) { threshold = 100; }
    if (execAsap === void 0) { execAsap = false; }
    return function debounced() {
        var _dummyArgs = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            _dummyArgs[_i] = arguments[_i];
        }
        var obj = this || {};
        var args = arguments;
        function delayed() {
            if (!execAsap)
                func.apply(obj, args);
            obj.__hpcc_debounce_timeout = null;
        }
        if (obj.__hpcc_debounce_timeout)
            clearTimeout(obj.__hpcc_debounce_timeout);
        else if (execAsap)
            func.apply(obj, args);
        obj.__hpcc_debounce_timeout = setTimeout(delayed, threshold);
    };
}
function parseVersionString(versionString) {
    var _sp = versionString.split(".");
    return {
        major: parseInt(_sp[0].replace("v", "")),
        minor: parseInt(_sp[1]),
        patch: parseInt(_sp[2].split("-")[0])
    };
}

var Utility = /*#__PURE__*/Object.freeze({
    SelectionBase: SelectionBase,
    SelectionBag: SelectionBag,
    SimpleSelection: SimpleSelection,
    SimpleSelectionMixin: SimpleSelectionMixin,
    faCode: faCode,
    removeHTMLFromString: removeHTMLFromString,
    templateFields: templateFields,
    template: template,
    naturalSort: naturalSort,
    multiSort: multiSort,
    Selection: Selection$2,
    urlParams: urlParams,
    endsWith: endsWith,
    d3ArrayAdapter: d3ArrayAdapter,
    downloadBlob: downloadBlob,
    timestamp: timestamp,
    downloadString: downloadString,
    widgetPath: widgetPath,
    parseClassID: parseClassID,
    checksum: checksum,
    getTime: getTime,
    mixin: mixin,
    exists: exists,
    logStringify: logStringify,
    debounce: debounce,
    parseVersionString: parseVersionString
});

var d3Aggr = {
    min: d3Min,
    max: d3Max,
    mean: d3Mean,
    median: d3Median,
    variance: d3Variance,
    deviation: d3Deviation,
    sum: d3Sum
};
var lastFoundFormat = null;
var Field = /** @class */ (function (_super) {
    __extends(Field, _super);
    function Field(id) {
        var _this = _super.call(this) || this;
        _this._children = [];
        PropertyExt.call(_this);
        _this._id = id || _this._id;
        return _this;
    }
    Field.prototype.owner = function (_) {
        if (!arguments.length)
            return this._owner;
        this._owner = _;
        return this;
    };
    Field.prototype.valid = function () {
        return !!this.label();
    };
    Field.prototype.checksum = function () {
        return checksum(this.label() + this.type() + this.mask() + this.format());
    };
    Field.prototype.typeTransformer = function (_) {
        switch (this.type()) {
            case "number":
                return Number(_);
            case "string":
                return String(_);
            case "boolean":
                return typeof (_) === "string" && ["false", "off", "0"].indexOf(_.toLowerCase()) >= 0 ? false : Boolean(_);
            case "time":
            case "date":
                return this.maskTransformer(_);
        }
        return _;
    };
    Field.prototype.maskTransformer = function (_) {
        return this.formatter(this.mask()).parse(String(_));
    };
    Field.prototype.formatTransformer = function (_) {
        return this.formatter(this.format())(_);
    };
    Field.prototype.parse = function (_) {
        if (!_) {
            return _;
        }
        try {
            return this.typeTransformer(_);
        }
        catch (e) {
            console.log("Unable to parse:  " + _);
            return null;
        }
    };
    Field.prototype.transform = function (_) {
        if (!_) {
            return _;
        }
        try {
            return this.formatTransformer(this.typeTransformer(_));
        }
        catch (e) {
            console.log("Unable to transform:  " + _);
            return null;
        }
    };
    Field.prototype.clone = function () {
        var context = this;
        var retVal = new Field(this._id);
        cloneProp(retVal, "label");
        cloneProp(retVal, "type");
        cloneProp(retVal, "mask");
        cloneProp(retVal, "format");
        function cloneProp(dest, key) {
            dest[key + "_default"](context[key + "_default"]());
            if (context[key + "_exists"]()) {
                dest[key](context[key]());
            }
        }
        return retVal;
    };
    Field.prototype.formatter = function (format$1) {
        var retVal;
        if (!format$1) {
            retVal = function (_) {
                return _;
            };
            retVal.parse = function (_) {
                return _;
            };
            return retVal;
        }
        switch (this.type()) {
            case "time":
            case "date":
                return timeFormat(format$1);
        }
        retVal = format(format$1);
        retVal.parse = function (_) {
            return _;
        };
        return retVal;
    };
    Field.prototype.children = function (_, asDefault) {
        if (_ === void 0)
            return this._children;
        this.type("nested");
        var fieldsArr = this._children;
        this._children = _.map(function (field, idx) {
            if (field instanceof Field) {
                fieldsArr[idx] = field;
                return field;
            }
            else if (typeof field === "string") {
                if (asDefault) {
                    return (fieldsArr[idx] || new Field()).label_default(field);
                }
                else {
                    return (fieldsArr[idx] || new Field()).label(field);
                }
            }
            else {
                if (asDefault) {
                    return (fieldsArr[idx] || new Field())
                        .label_default(field.label)
                        .children(field.columns);
                }
                else {
                    return (fieldsArr[idx] || new Field())
                        .label(field.label)
                        .children(field.columns);
                }
            }
        }, this);
        return this;
    };
    return Field;
}(PropertyExt));
Field.prototype._class += " common_Database.Field";
Field.prototype.publish("label", "", "string", "Label", null, { optional: true });
Field.prototype.publish("type", "", "set", "Type", ["", "string", "number", "boolean", "date", "time", "hidden", "nested"], { optional: true });
Field.prototype.publish("mask", "", "string", "Time Mask", null, { disable: function (w) { return w.type() !== "time"; }, optional: true });
Field.prototype.publish("format", "", "string", "Format", null, { optional: true });
//  Grid  ---
var Grid = /** @class */ (function (_super) {
    __extends(Grid, _super);
    function Grid(dataChecksum) {
        var _this = _super.call(this) || this;
        _this._data = [];
        _this._dataChecksums = [];
        dataChecksum = dataChecksum || false;
        _this._dataChecksum = dataChecksum;
        _this._dataVersion = 0;
        _this.clear();
        return _this;
    }
    Grid.prototype.clear = function () {
        this.fields([]);
        this._data = [];
        this._dataChecksums = [];
        ++this._dataVersion;
        return this;
    };
    //  Backward compatability  ---
    Grid.prototype.resetColumns = function () {
        var fields = this.fields();
        this.legacyColumns([]);
        this.legacyColumns(fields.map(function (field) {
            return field.label();
        }));
    };
    Grid.prototype.legacyColumns = function (_, asDefault) {
        if (!arguments.length)
            return this.row(0);
        this.row(0, _, asDefault);
        return this;
    };
    Grid.prototype.legacyData = function (_, _clone) {
        return Grid.prototype.data.apply(this, arguments);
    };
    //  Meta  ---
    Grid.prototype.schema = function () {
    };
    Grid.prototype.field = function (idx) {
        return this.fields()[idx];
    };
    Grid.prototype.fieldByLabel = function (_, ignoreCase) {
        return this.fields().filter(function (field, idx) {
            field.idx = idx;
            return ignoreCase ? field.label().toLowerCase() === _.toLowerCase() : field.label() === _;
        })[0];
    };
    Grid.prototype.data = function (_, clone) {
        if (!arguments.length)
            return this._data;
        this._data = clone ? _.map(function (d) { return d.map(function (d2) { return d2; }); }) : _;
        this._dataCalcChecksum();
        return this;
    };
    Grid.prototype.parsedData = function () {
        var context = this;
        return this._data.map(function (row) {
            return row.map(function (cell, idx) {
                return context.fields()[idx].parse(cell);
            });
        });
    };
    Grid.prototype.formattedData = function () {
        var _this = this;
        return this._data.map(function (row) {
            return _this.fields().map(function (field, idx) {
                return field.transform(row[idx]);
            });
        });
    };
    Grid.prototype.fieldsChecksum = function () {
        return checksum(this.fields().map(function (field) { return field.checksum(); }));
    };
    Grid.prototype.dataChecksum = function () {
        return checksum(this._dataChecksum ? this._dataChecksums : this._dataVersion);
    };
    Grid.prototype.checksum = function () {
        return checksum([this.dataChecksum(), this.fieldsChecksum()]);
    };
    //  Row Access  ---
    Grid.prototype._dataCalcChecksum = function (idx) {
        ++this._dataVersion;
        if (this._dataChecksum) {
            if (arguments.length) {
                this._dataChecksums[idx] = checksum(this._data[idx]);
            }
            else {
                this._dataChecksums = this._data.map(function (row) { return checksum(row); });
            }
        }
        return this;
    };
    Grid.prototype.row = function (row, _, asDefault) {
        if (arguments.length < 2)
            return row === 0 ? this.fields().map(function (d) { return d.label(); }) : this._data[row - 1];
        if (row === 0) {
            var fieldsArr_1 = this.fields();
            this.fields(_.map(function (field, idx) {
                if (typeof field === "string") {
                    if (asDefault) {
                        return (fieldsArr_1[idx] || new Field()).label_default(field);
                    }
                    else {
                        return (fieldsArr_1[idx] || new Field()).label(field);
                    }
                }
                else {
                    if (asDefault) {
                        return (fieldsArr_1[idx] || new Field())
                            .label_default(field.label)
                            .children(field.columns);
                    }
                    else {
                        return (fieldsArr_1[idx] || new Field())
                            .label(field.label)
                            .children(field.columns);
                    }
                }
            }, this));
        }
        else {
            this._data[row - 1] = _;
            this._dataCalcChecksum(row - 1);
        }
        return this;
    };
    Grid.prototype.rows = function (_) {
        if (!arguments.length)
            return [this.row(0)].concat(this._data);
        this.row(0, _[0]);
        this._data = _.filter(function (_row, idx) { return idx > 0; });
        this._dataCalcChecksum();
        return this;
    };
    //  Column Access  ---
    Grid.prototype.column = function (col, _) {
        if (arguments.length < 2)
            return [this.fields()[col].label()].concat(this._data.map(function (row, _idx) { return row[col]; }));
        _.forEach(function (d, idx) {
            if (idx === 0) {
                this.fields()[col] = new Field().label(_[0]);
            }
            else {
                this._data[idx - 1][col] = d;
                this._dataCalcChecksum(idx - 1);
            }
        }, this);
        return this;
    };
    Grid.prototype.columnData = function (col, _) {
        if (arguments.length < 2)
            return this._data.map(function (row, _idx) { return row[col]; });
        _.forEach(function (d, idx) {
            this._data[idx][col] = d;
            this._dataCalcChecksum(idx);
        }, this);
        return this;
    };
    Grid.prototype.columns = function (_) {
        if (!arguments.length)
            return this.fields().map(function (_col, idx) {
                return this.column(idx);
            }, this);
        _.forEach(function (_col, idx) {
            this.column(idx, _[idx]);
        }, this);
        return this;
    };
    //  Cell Access  ---
    Grid.prototype.cell = function (row, col, _) {
        if (arguments.length < 3)
            return this.row(row)[col];
        if (row === 0) {
            this.fields()[col] = new Field().label(_);
        }
        else {
            this._data[row][col] = _;
            this._dataCalcChecksum(row);
        }
        return this;
    };
    //  Grid Access  ---
    Grid.prototype.grid = function (_) {
        return Grid.prototype.rows.apply(this, arguments);
    };
    //  Hipie Helpers  ---
    Grid.prototype.hipieMappings = function (columns, missingDataString) {
        if (!this.fields().length || !this._data.length) {
            return [];
        }
        var mappedColumns = [];
        var hasRollup = false;
        columns.forEach(function (mapping, idx) {
            var mappedColumn = {
                groupby: false,
                func: "",
                params: []
            };
            if (mapping.hasFunction()) {
                mappedColumn.func = mapping.function();
                if (mappedColumn.func === "SCALE") {
                    mappedColumn.groupby = true;
                }
                else {
                    hasRollup = true;
                }
                mapping.params().forEach(function (param) {
                    var field = this.fieldByLabel(param, true);
                    mappedColumn.params.push(field ? field.idx : -1);
                }, this);
            }
            else {
                mappedColumn.groupby = true;
                var field = this.fieldByLabel(mapping.id(), true);
                mappedColumn.params.push(field ? field.idx : -1);
            }
            mappedColumns.push(mappedColumn);
        }, this);
        if (hasRollup) {
            var retVal_1 = [];
            this.rollup(mappedColumns.filter(function (mappedColumn) {
                return mappedColumn.groupby === true;
            }).map(function (d) {
                return d.params[0];
            }), function (leaves) {
                var row = mappedColumns.map(function (mappedColumn) {
                    var param1 = mappedColumn.params[0];
                    var param2 = mappedColumn.params[1];
                    switch (mappedColumn.func) {
                        case "SUM":
                            return d3Sum(leaves, function (d) { return d[param1]; });
                        case "AVE":
                            return d3Mean(leaves, function (d) { return d[param1] / d[param2]; });
                        case "MIN":
                            return d3Min(leaves, function (d) { return d[param1]; });
                        case "MAX":
                            return d3Max(leaves, function (d) { return d[param1]; });
                        case "SCALE":
                            console.log("Unexpected function:  " + mappedColumn.func);
                            //  All leaves should have the same values, use mean just in case they don't?
                            return d3Mean(leaves, function (d) { return d[param1] / +param2; });
                    }
                    //  All leaves should have the same value.
                    return leaves[0][param1];
                });
                retVal_1.push(row);
                return row;
            });
            return retVal_1;
        }
        else {
            return this._data.map(function (row) {
                return mappedColumns.map(function (mappedColumn) {
                    var param1 = mappedColumn.params[0];
                    var param2 = mappedColumn.params[1];
                    switch (mappedColumn.func) {
                        case "SCALE":
                            return row[param1] / +param2;
                        case "SUM":
                        case "AVE":
                        case "MIN":
                        case "MAX":
                            console.log("Unexpected function:  " + mappedColumn.func);
                    }
                    return row[param1];
                });
            });
        }
    };
    Grid.prototype.legacyView = function () {
        return new LegacyView(this);
    };
    Grid.prototype.nestView = function (columnIndicies) {
        return new RollupView(this, columnIndicies);
    };
    Grid.prototype.rollupView = function (columnIndicies, rollupFunc) {
        return new RollupView(this, columnIndicies, rollupFunc);
    };
    Grid.prototype.aggregateView = function (columnIndicies, aggrType, aggrColumn, aggrDeltaColumn) {
        if (aggrDeltaColumn === void 0) { aggrDeltaColumn = ""; }
        var context = this;
        return new RollupView(this, columnIndicies, function (values) {
            switch (aggrType) {
                case null:
                case undefined:
                case "":
                    values.aggregate = values.length;
                    return values;
                default:
                    var columns = context.legacyColumns();
                    var colIdx_1 = columns.indexOf(aggrColumn);
                    var deltaIdx_1 = columns.indexOf(aggrDeltaColumn);
                    values.aggregate = d3Aggr[aggrType](values, function (value) {
                        return (+value[colIdx_1] - (deltaIdx_1 >= 0 ? +value[deltaIdx_1] : 0)) / (deltaIdx_1 >= 0 ? +value[deltaIdx_1] : 1);
                    });
                    return values;
            }
        });
    };
    //  Nesting  ---
    Grid.prototype._nest = function (columnIndicies, _rollup) {
        if (!(columnIndicies instanceof Array)) {
            columnIndicies = [columnIndicies];
        }
        var nest = d3Nest();
        columnIndicies.forEach(function (idx) {
            nest.key(function (d) {
                return d[idx];
            });
        });
        return nest;
    };
    Grid.prototype.nest = function (columnIndicies) {
        return this._nest(columnIndicies)
            .entries(this._data);
    };
    Grid.prototype.rollup = function (columnIndicies, rollup) {
        return this._nest(columnIndicies)
            .rollup(rollup)
            .entries(this._data);
    };
    //  Util  ---
    Grid.prototype.length = function () {
        return this._data.length + 1;
    };
    Grid.prototype.width = function () {
        return this.fields().length;
    };
    Grid.prototype.pivot = function () {
        this.resetColumns();
        this.rows(this.columns());
        return this;
    };
    Grid.prototype.clone = function (deep) {
        return new Grid()
            .fields(this.fields(), deep)
            .data(this.data(), deep);
    };
    Grid.prototype.filter = function (filter) {
        var filterIdx = {};
        this.row(0).forEach(function (col, idx) {
            filterIdx[col] = idx;
        });
        return new Grid()
            .fields(this.fields(), true)
            .data(this.data().filter(function (row) {
            for (var key in filter) {
                if (filter[key] !== row[filterIdx[key]]) {
                    return false;
                }
            }
            return true;
        }));
    };
    Grid.prototype.analyse = function (columns) {
        if (!(columns instanceof Array)) {
            columns = [columns];
        }
        var retVal = [];
        columns.forEach(function (col) {
            var rollup = this.rollup(col, function (leaves) {
                return leaves.length;
            });
            retVal.push(rollup);
            var keys = rollup.map(function (d) { return d.key; });
            this.fields()[col].isBoolean = typeTest(keys, isBoolean);
            this.fields()[col].isNumber = typeTest(keys, isNumber);
            this.fields()[col].isString = !this.fields()[col].isNumber && typeTest(keys, isString);
            this.fields()[col].isUSState = this.fields()[col].isString && typeTest(keys, isUSState);
            this.fields()[col].isDateTime = this.fields()[col].isString && typeTest(keys, isDateTime);
            this.fields()[col].isDateTimeFormat = lastFoundFormat;
            this.fields()[col].isDate = !this.fields()[col].isDateTime && typeTest(keys, isDate);
            this.fields()[col].isDateFormat = lastFoundFormat;
            this.fields()[col].isTime = this.fields()[col].isString && !this.fields()[col].isDateTime && !this.fields()[col].isDate && typeTest(keys, isTime);
            this.fields()[col].isTimeFormat = lastFoundFormat;
        }, this);
        return retVal;
    };
    //  Import/Export  ---
    Grid.prototype.jsonObj = function (_) {
        if (!arguments.length)
            return this._data.map(function (row) {
                var retVal = {};
                this.row(0).forEach(function (col, idx) {
                    retVal[col] = row[idx];
                });
                return retVal;
            }, this);
        this.clear();
        this.data(_.map(function (row) {
            var retVal = [];
            for (var key in row) {
                var colIdx = this.row(0).indexOf(key);
                if (colIdx < 0) {
                    colIdx = this.fields().length;
                    this.fields().push(new Field().label(key));
                }
                retVal[colIdx] = row[key];
            }
            return retVal;
        }, this));
        return this;
    };
    Grid.prototype.json = function (_) {
        if (!arguments.length)
            return JSON.stringify(this.jsonObj(), null, "  ");
        if (typeof (_) === "string") {
            _ = JSON.parse(_);
        }
        this.jsonObj(_);
        return this;
    };
    Grid.prototype.csv = function (_) {
        if (!arguments.length) {
            var temp_1 = document.createElement("div");
            return csvFormatRows(this.grid().map(function (row) {
                return row.map(function (cell) {
                    return removeHTMLFromString(cell, temp_1);
                });
            }));
        }
        this.jsonObj(csvParse(_));
        return this;
    };
    Grid.prototype.tsv = function (_) {
        if (!arguments.length)
            return tsvFormatRows(this.grid());
        this.jsonObj(tsvParse(_));
        return this;
    };
    return Grid;
}(PropertyExt));
Grid.prototype._class += " common_Database.Grid";
Grid.prototype.publish("fields", [], "propertyArray", "Fields");
var fieldsOrig = Grid.prototype.fields;
Grid.prototype.fields = function (_, clone) {
    if (!arguments.length)
        return fieldsOrig.apply(this, arguments);
    return fieldsOrig.call(this, clone ? _.map(function (d) { return d.clone(); }) : _);
};
//  Views  ---
var LegacyView = /** @class */ (function () {
    function LegacyView(grid) {
        this._grid = grid;
    }
    LegacyView.prototype.checksum = function () {
        var value = this._grid.on.apply(this._grid, arguments);
        return value === this._grid ? this : value;
    };
    LegacyView.prototype.fields = function () {
        var value = this._grid.on.apply(this._grid, arguments);
        return value === this._grid ? this : value;
    };
    LegacyView.prototype.grid = function () {
        return this._grid;
    };
    LegacyView.prototype.columns = function (_) {
        if (!arguments.length)
            return this._grid.legacyColumns();
        this._grid.legacyColumns(_);
        return this;
    };
    LegacyView.prototype.rawData = function (_) {
        if (!arguments.length)
            return this._grid.legacyData();
        this._grid.legacyData(_);
        return this;
    };
    LegacyView.prototype.formattedData = function () {
        if (this._formattedDataChecksum !== this._grid.checksum()) {
            this._formattedDataChecksum = this._grid.checksum();
            this._formattedData = this._grid.formattedData();
        }
        return this._formattedData;
    };
    LegacyView.prototype.parsedData = function () {
        if (this._parsedDataChecksum !== this._grid.checksum()) {
            this._parsedDataChecksum = this._grid.checksum();
            this._parsedData = this._grid.parsedData();
        }
        return this._parsedData;
    };
    LegacyView.prototype._whichData = function (opts) {
        if (opts) {
            if (opts.parsed) {
                return this.formattedData();
            }
            else if (opts.formatted) {
                return this.formattedData();
            }
        }
        return this.rawData();
    };
    LegacyView.prototype.data = function (_) {
        return LegacyView.prototype.rawData.apply(this, arguments);
    };
    return LegacyView;
}());
var RollupView = /** @class */ (function (_super) {
    __extends(RollupView, _super);
    function RollupView(grid, columns, rollup) {
        var _this = _super.call(this, grid) || this;
        if (!(columns instanceof Array)) {
            columns = [columns];
        }
        _this._columnIndicies = columns.filter(function (column) { return column; }).map(function (column) {
            switch (typeof column) {
                case "string":
                    return this._grid.fieldByLabel(column).idx;
            }
            return column;
        }, _this);
        rollup = rollup || function (d) { return d; };
        _this._rollup = rollup;
        return _this;
    }
    RollupView.prototype.nest = function () {
        if (this._nestChecksum !== this._grid.checksum()) {
            this._nestChecksum = this._grid.checksum();
            var nest_1 = d3Nest();
            this._columnIndicies.forEach(function (idx) {
                nest_1.key(function (d) {
                    return d[idx];
                });
            });
            this._nest = nest_1
                .rollup(this._rollup);
        }
        return this._nest;
    };
    RollupView.prototype.entries = function (opts) {
        return this.nest().entries(this._whichData(opts));
    };
    RollupView.prototype.map = function (opts) {
        return this.nest().map(this._whichData(opts));
    };
    RollupView.prototype.d3Map = function (opts) {
        return this.nest().map(this._whichData(opts), map$1);
    };
    RollupView.prototype._walkData = function (entries, prevRow) {
        if (prevRow === void 0) { prevRow = []; }
        var retVal = [];
        entries.forEach(function (entry) {
            if (entry instanceof Array) {
                retVal.push(prevRow.concat([entry]));
            }
            else if (entry.values instanceof Array) {
                retVal = retVal.concat(this._walkData(entry.values, prevRow.concat([entry.key])));
            }
            else if (entry.value instanceof Array) {
                retVal = retVal.concat(this._walkData(entry.value, prevRow.concat([entry.key])));
            }
        }, this);
        return retVal;
    };
    RollupView.prototype.data = function (opts) {
        return this._walkData(this.entries(opts));
    };
    return RollupView;
}(LegacyView));
//  --- --- ---
function typeTest(cells, test) {
    if (!(cells instanceof Array)) {
        cells = [cells];
    }
    return cells.filter(function (d) { return d !== ""; }).every(test);
}
function isBoolean(cell) {
    return typeof cell === "boolean";
}
function isNumber(cell) {
    return typeof cell === "number" || !isNaN(cell);
}
function isString(cell) {
    return typeof cell === "string";
}
var dateTimeFormats = [];
var dateFormats = [
    "%Y-%m-%d",
    "%Y%m%d"
];
var timeFormats = [
    "%H:%M:%S.%LZ",
    "%H:%M:%SZ",
    "%H:%M:%S"
];
dateFormats.forEach(function (d) {
    timeFormats.forEach(function (t) {
        dateTimeFormats.push(d + "T" + t);
    });
});
function formatPicker(formats, cell) {
    for (var i = 0; i < formats.length; ++i) {
        var date = timeParse(formats[i])(cell);
        if (date) {
            lastFoundFormat = formats[i];
            return formats[i];
        }
    }
    return null;
}
function isDateTime(cell) {
    return formatPicker(dateTimeFormats, cell);
}
function isDate(cell) {
    return formatPicker(dateFormats, cell);
}
function isTime(cell) {
    return formatPicker(timeFormats, cell);
}
function isUSState(cell) {
    return ["AL", "AK", "AZ", "AR", "CA", "CO", "CT", "DE", "FL", "GA", "HI", "ID", "IL", "IN", "IA", "KS", "KY", "LA", "ME", "MD", "MA", "MI", "MN", "MS", "MO", "MT", "NE", "NV", "NH", "NJ", "NM", "NY", "NC", "ND", "OH", "OK", "OR", "PA", "RI", "SC", "SD", "TN", "TX", "UT", "VT", "VA", "WA", "WV", "WI", "WY", "AS", "DC", "FM", "GU", "MH", "MP", "PW", "PR", "VI"].indexOf(String(cell).toUpperCase()) >= 0;
}

var Database = /*#__PURE__*/Object.freeze({
    Field: Field,
    Grid: Grid,
    LegacyView: LegacyView,
    RollupView: RollupView
});

function styleInject(css, ref) {
  if ( ref === void 0 ) ref = {};
  var insertAt = ref.insertAt;

  if (!css || typeof document === 'undefined') { return; }

  var head = document.head || document.getElementsByTagName('head')[0];
  var style = document.createElement('style');
  style.type = 'text/css';

  if (insertAt === 'top') {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }

  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}

var css = ".common_Widget{font-family:Verdana,Geneva,sans-serif;font-size:12px}#hpcc_js_font_size{display:none}";
styleInject(css);

var g_fontSizeContext;
var g_fontSizeContextCache = {};
var widgetID = 0;
var Widget = /** @class */ (function (_super) {
    __extends(Widget, _super);
    function Widget() {
        var _this = _super.call(this) || this;
        _this._isRootNode = true;
        _this._db = new Grid();
        _this._dataMeta = {};
        _this._appData = new Object({});
        //  Render  ---
        _this._prevNow = 0;
        _this.lazyRender = debounce(function (debouncedCallback) {
            this.render(debouncedCallback);
        }, 100);
        _this._class = Object.getPrototypeOf(_this)._class;
        _this._id = _this._idSeed + widgetID++;
        _this._db = new Grid();
        _this._pos = { x: 0, y: 0 };
        _this._size = { width: 0, height: 0 };
        _this._widgetScale = 1;
        _this._visible = true;
        _this._target = null;
        _this._placeholderElement = null;
        _this._parentWidget = null;
        _this._element = d3Select(null);
        _this._renderCount = 0;
        if (window.__hpcc_debug) {
            if (window.g_all === undefined) {
                window.g_all = {};
            }
            window.g_all[_this._id] = _this;
        }
        if (window.__hpcc_theme) {
            _this.applyTheme(window.__hpcc_theme);
        }
        return _this;
    }
    Widget.prototype.importJSON = function (_) {
        this._db.json(_);
        return this;
    };
    Widget.prototype.export = function (_) {
        if (_ === void 0) { _ = "JSON"; }
        switch (_) {
            case "CSV":
                return this._db.csv();
            case "TSV":
                return this._db.tsv();
            case "JSON":
            default:
                return this._db.json();
        }
    };
    Widget.prototype.leakCheck = function (newNode) {
        var context = this;
        var watchArray = [newNode];
        var destructObserver = new MutationObserver(function (mutations) {
            var leaks = false;
            mutations.forEach(function (mutation) {
                for (var i = 0; i < mutation.removedNodes.length; ++i) {
                    var node = mutation.removedNodes.item(i);
                    if (watchArray.indexOf(node) >= 0 && context._target) {
                        leaks = true;
                        destructObserver.disconnect();
                    }
                }
            });
            if (leaks) {
                console.log("leak:  " + context.id() + " - " + context.classID() + "\t\twidget.target(null); was not called for this widget before it was removed from the page.");
            }
        });
        var pNode = newNode.parentNode;
        while (pNode) {
            destructObserver.observe(pNode, { childList: true });
            watchArray.push(pNode);
            pNode = pNode.parentNode;
        }
    };
    Widget.prototype.renderCount = function () {
        return this._renderCount;
    };
    Widget.prototype.columns = function (_, asDefault) {
        if (!arguments.length)
            return this._db.legacyColumns();
        this._db.legacyColumns(_, asDefault);
        return this;
    };
    Widget.prototype.columnIdx = function (column) {
        return this.columns().indexOf(column);
    };
    Widget.prototype.cellIdxFunc = function (colIdx, defValue) {
        return colIdx < 0 ? function () { return defValue; } : function (row) { return row[colIdx]; };
    };
    Widget.prototype.cellFunc = function (column, defValue) {
        return this.cellIdxFunc(this.columnIdx(column), defValue);
    };
    Widget.prototype.parsedData = function () {
        return this._db.parsedData();
    };
    Widget.prototype.formattedData = function () {
        return this._db.formattedData();
    };
    Widget.prototype.data = function (_) {
        if (!arguments.length)
            return this._db.legacyData();
        this._db.legacyData(_);
        return this;
    };
    Widget.prototype.cloneData = function () {
        return this.data().map(function (row) { return row.slice(0); });
    };
    Widget.prototype.flattenData = function (columns, data) {
        if (columns === void 0) { columns = this.columns(); }
        if (data === void 0) { data = this.data(); }
        var retVal = [];
        data.forEach(function (row, rowIdx) {
            columns.filter(function (_col, idx) { return idx > 0; }).forEach(function (_col, idx) {
                var val = row[idx + 1];
                if (typeof val !== "undefined") {
                    var newItem = {
                        rowIdx: rowIdx,
                        colIdx: idx + 1,
                        label: row[0],
                        value: val
                    };
                    retVal.push(newItem);
                }
            }, this);
        }, this);
        return retVal;
    };
    Widget.prototype.rowToObj = function (row) {
        if (!row)
            return {};
        var retVal = {};
        this.fields().forEach(function (field, idx) {
            retVal[field.label_default() || field.label()] = row[idx];
        });
        if (row.length === this.columns().length + 1) {
            retVal.__lparam = row[this.columns().length];
        }
        return retVal;
    };
    Widget.prototype.pos = function (_) {
        if (!arguments.length)
            return this._pos;
        this._pos = _;
        if (this._overlayElement) {
            this._overlayElement
                .attr("transform", "translate(" + _.x + "," + _.y + ")scale(" + this._widgetScale + ")");
        }
        return this;
    };
    Widget.prototype.x = function (_) {
        if (!arguments.length)
            return this._pos.x;
        this.pos({ x: _, y: this._pos.y });
        return this;
    };
    Widget.prototype.y = function (_) {
        if (!arguments.length)
            return this._pos.y;
        this.pos({ x: this._pos.x, y: _ });
        return this;
    };
    Widget.prototype.size = function (_) {
        if (!arguments.length)
            return this._size;
        this._size = _;
        if (this._overlayElement) {
            this._overlayElement
                .attr("width", _.width)
                .attr("height", _.height);
        }
        return this;
    };
    Widget.prototype.width = function (_) {
        if (!arguments.length)
            return this._size.width;
        this.size({ width: _, height: this._size.height });
        return this;
    };
    Widget.prototype.height = function (_) {
        if (!arguments.length)
            return this._size.height;
        this.size({ width: this._size.width, height: _ });
        return this;
    };
    Widget.prototype.resize = function (size, delta) {
        if (delta === void 0) { delta = { width: 0, height: 0 }; }
        var width;
        var height;
        if (size && size.width && size.height) {
            width = size.width;
            height = size.height;
        }
        else {
            var style = window.getComputedStyle(this._target, null);
            width = parseFloat(style.getPropertyValue("width")) - delta.width;
            height = parseFloat(style.getPropertyValue("height")) - delta.height;
        }
        this.size({
            width: width,
            height: height
        });
        return this;
    };
    Widget.prototype.scale = function (_) {
        if (!arguments.length)
            return this._widgetScale;
        this._widgetScale = _;
        if (this._overlayElement) {
            this._overlayElement
                .attr("transform", "translate(" + _.x + "," + _.y + ")scale(" + this._widgetScale + ")");
        }
        return this;
    };
    Widget.prototype.visible = function (_) {
        if (!arguments.length)
            return this._visible;
        this._visible = _;
        if (this._element) {
            this._element
                .style("visibility", this._visible ? null : "hidden")
                .style("opacity", this._visible ? null : 0);
        }
        return this;
    };
    Widget.prototype.display = function (_) {
        if (!arguments.length)
            return this._display;
        this._display = _;
        if (this._element) {
            this._element.style("display", this._display ? null : "none");
        }
        return this;
    };
    Widget.prototype.dataMeta = function (_) {
        if (!arguments.length)
            return this._dataMeta;
        this._dataMeta = _;
        return this;
    };
    Widget.prototype.appData = function (key, value) {
        if (arguments.length < 2)
            return this._appData[key];
        this._appData[key] = value;
        return this;
    };
    Widget.prototype.calcSnap = function (snapSize) {
        function snap(x, gridSize) {
            function snapDelta(x2, gridSize2) {
                var dx = x2 % gridSize2;
                if (Math.abs(dx) > gridSize2 - Math.abs(dx)) {
                    dx = (gridSize2 - Math.abs(dx)) * (dx < 0 ? 1 : -1);
                }
                return dx;
            }
            return x - snapDelta(x, gridSize);
        }
        var l = snap(this._pos.x - this._size.width / 2, snapSize);
        var t = snap(this._pos.y - this._size.height / 2, snapSize);
        var r = snap(this._pos.x + this._size.width / 2, snapSize);
        var b = snap(this._pos.y + this._size.height / 2, snapSize);
        var w = r - l;
        var h = b - t;
        return [{ x: l + w / 2, y: t + h / 2 }, { width: w, height: h }];
    };
    //  DOM/SVG Node Helpers  ---
    Widget.prototype.toWidget = function (domNode) {
        if (!domNode) {
            return null;
        }
        var element = d3Select(domNode);
        if (element) {
            var widget = element.datum();
            if (widget && widget instanceof Widget) {
                return widget;
            }
        }
        return null;
    };
    Widget.prototype.parentOverlay = function () {
        return null;
    };
    Widget.prototype.locateParentWidget = function (domNode) {
        domNode = domNode || (this._target ? this._target.parentNode : null);
        if (domNode) {
            var widget = this.toWidget(domNode);
            if (widget) {
                return widget;
            }
            else if (domNode.parentNode) {
                return this.locateParentWidget(domNode.parentNode);
            }
        }
        return null;
    };
    Widget.prototype.locateSVGNode = function (domNode) {
        if (!domNode) {
            return null;
        }
        if (domNode.tagName === "svg") {
            return domNode;
        }
        return this.locateSVGNode(domNode.parentNode);
    };
    Widget.prototype.locateOverlayNode = function () {
        var widget = this.locateParentWidget(this._target);
        while (widget) {
            var retVal = widget.parentOverlay();
            if (retVal) {
                return retVal;
            }
            widget = this.locateParentWidget(widget._target.parentNode);
        }
        return null;
    };
    Widget.prototype.locateAncestor = function (classID) {
        return this.locateClosestAncestor([classID]);
    };
    Widget.prototype.locateClosestAncestor = function (classIDArr) {
        var widget = this.locateParentWidget(this._target);
        while (widget) {
            if (classIDArr.indexOf(widget.classID()) !== -1) {
                return widget;
            }
            widget = this.locateParentWidget(widget._target.parentNode);
        }
        return null;
    };
    Widget.prototype.getAbsolutePos = function (domNode, w, h) {
        var root = this.locateSVGNode(domNode);
        if (!root) {
            return null;
        }
        var pos = root.createSVGPoint();
        var ctm = domNode.getCTM();
        pos = pos.matrixTransform(ctm);
        var retVal = {
            x: pos.x,
            y: pos.y
        };
        if (w !== undefined && h !== undefined) {
            var size = root.createSVGPoint();
            size.x = w;
            size.y = h;
            size = size.matrixTransform(ctm);
            retVal.width = size.x - pos.x;
            retVal.height = size.y - pos.y;
        }
        return retVal;
    };
    Widget.prototype.hasOverlay = function () {
        return this._overlayElement;
    };
    Widget.prototype.syncOverlay = function () {
        if (this._size.width && this._size.height) {
            var newPos = this.getAbsolutePos(this._overlayElement.node(), this._size.width, this._size.height);
            if (newPos && (!this._prevPos || newPos.x !== this._prevPos.x || newPos.y !== this._prevPos.y || newPos.width !== this._prevPos.width || newPos.height !== this._prevPos.height)) {
                var xScale = newPos.width / this._size.width;
                var yScale = newPos.height / this._size.height;
                this._placeholderElement
                    .style("left", newPos.x - (newPos.width / xScale) / 2 + "px")
                    .style("top", newPos.y - (newPos.height / yScale) / 2 + "px")
                    .style("width", newPos.width / xScale + "px")
                    .style("height", newPos.height / yScale + "px");
                var transform = "scale(" + xScale + "," + yScale + ")";
                this._placeholderElement
                    .style("transform", transform)
                    .style("-moz-transform", transform)
                    .style("-ms-transform", transform)
                    .style("-webkit-transform", transform)
                    .style("-o-transform", transform);
            }
            this._prevPos = newPos;
        }
    };
    Widget.prototype.getBBox = function (refresh, round) {
        return {
            x: 0,
            y: 0,
            width: 0,
            height: 0
        };
    };
    Widget.prototype.textSize = function (_text, fontName, fontSize, bold) {
        if (fontName === void 0) { fontName = "Verdana"; }
        if (fontSize === void 0) { fontSize = 12; }
        if (bold === void 0) { bold = false; }
        if (!g_fontSizeContext) {
            var fontSizeCalc = d3Select("body > #hpcc_js_font_size");
            if (fontSizeCalc.empty()) {
                fontSizeCalc = d3Select("body").append("canvas")
                    .attr("id", "hpcc_js_font_size");
            }
            g_fontSizeContext = fontSizeCalc.node().getContext("2d");
        }
        var text = _text instanceof Array ? _text : [_text];
        var hash = bold + "::" + fontSize + "::" + fontName + "::" + text.join("::");
        var retVal = g_fontSizeContextCache[hash];
        if (!retVal) {
            g_fontSizeContext.font = "" + (bold ? "bold " : "") + fontSize + "px " + fontName;
            g_fontSizeContextCache[hash] = retVal = {
                width: Math.max.apply(Math, text.map(function (t) { return g_fontSizeContext.measureText(("" + t).trim()).width; })),
                height: fontSize * text.length
            };
        }
        return retVal;
    };
    Widget.prototype.element = function () {
        return this._element;
    };
    Widget.prototype.node = function () {
        return this._element.node();
    };
    Widget.prototype.target = function (_) {
        if (!arguments.length)
            return this._target;
        if (this._target && _) {
            throw new Error("Target can only be assigned once.");
        }
        if (_ === null) {
            this._target = null;
            if (this.renderCount()) {
                this.exit();
            }
        }
        else if (typeof _ === "string") {
            this._target = document.getElementById(_);
        }
        else if (_ instanceof HTMLElement || _ instanceof SVGElement) {
            this._target = _;
        }
        return this;
    };
    Widget.prototype.isDOMHidden = function () {
        // https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetParent
        // Note:  Will return false for visible===hidden (which is ok as it still takes up space on the page)
        return this._isRootNode && this._placeholderElement.node().offsetParent === null;
    };
    Widget.prototype.hasSize = function () {
        return !isNaN(this.width()) && !isNaN(this.height());
    };
    Widget.prototype.publishedWidgets = function () {
        var widgets = [];
        this.publishedProperties(true).forEach(function (meta) {
            if (!meta.ext || meta.ext.render !== false) {
                switch (meta.type) {
                    case "widget":
                        var widget = this[meta.id]();
                        if (widget) {
                            widgets.push(widget);
                        }
                        break;
                    case "widgetArray":
                        widgets = widgets.concat(this[meta.id]());
                        break;
                }
            }
        }, this);
        return widgets;
    };
    Widget.prototype.render = function (callback) {
        if (window.__hpcc_debug) {
            var now = Date.now();
            if (now - this._prevNow < 500) {
                console.log("Double Render:  " + (now - this._prevNow) + " - " + this.id() + " - " + this.classID());
            }
            this._prevNow = now;
        }
        callback = callback || function () { };
        if (!this._placeholderElement || !this.visible() || this.isDOMHidden() || !this.hasSize()) {
            callback(this);
            return this;
        }
        if (this._placeholderElement) {
            if (!this._tag)
                throw new Error("No DOM tag specified");
            var elements = this._placeholderElement.selectAll("#" + this._id).data([this], function (d) { return d._id; });
            elements.enter().append(this._tag)
                .classed(this._class, true)
                .attr("id", this._id)
                // .attr("opacity", 0.50)  //  Uncomment to debug position offsets  ---
                .each(function (context2) {
                context2._element = d3Select(this);
                context2.enter(this, context2._element);
                if (window.__hpcc_debug) {
                    context2.leakCheck(this);
                }
            })
                .merge(elements)
                .each(function (context2) {
                var element = d3Select(this);
                var classed = context2.classed();
                for (var key in classed) {
                    element.classed(key, classed[key]);
                }
                context2.preUpdate(this, context2._element);
                context2.update(this, context2._element);
                context2.postUpdate(this, context2._element);
            });
            elements.exit()
                .each(function (context2) {
                d3Select(this).datum(null);
                context2.exit(this, context2._element);
            })
                .remove();
            this._renderCount++;
        }
        //  ASync Render Contained Widgets  ---
        var widgets = this.publishedWidgets();
        var context = this;
        switch (widgets.length) {
            case 0:
                callback(this);
                break;
            case 1:
                widgets[0].render(function () {
                    callback(context);
                });
                break;
            default:
                var renderCount_1 = widgets.length;
                widgets.forEach(function (widget, _idx) {
                    setTimeout(function () {
                        widget.render(function () {
                            if (--renderCount_1 === 0) {
                                callback(context);
                            }
                        });
                    }, 0);
                });
                break;
        }
        return this;
    };
    Widget.prototype.renderPromise = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.render(function (w) {
                resolve(w);
            });
        });
    };
    Widget.prototype.animationFrameRender = function () {
        var _this = this;
        if (requestAnimationFrame) {
            requestAnimationFrame(function () {
                _this.render();
            });
        }
        else {
            //  Not a real replacement for requestAnimationFrame  ---
            this.renderPromise();
        }
        return this;
    };
    Widget.prototype.enter = function (_domNode, _element) { };
    Widget.prototype.preUpdate = function (_domNode, _element) { };
    Widget.prototype.update = function (_domNode, _element) { };
    Widget.prototype.postUpdate = function (_domNode, _element) { };
    Widget.prototype.exit = function (_domNode, _element) {
        this.publishedWidgets().forEach(function (w) { return w.target(null); });
    };
    return Widget;
}(PropertyExt));
Widget.prototype._class += " common_Widget";
Widget.prototype._idSeed = "_w";
Widget.prototype.publishProxy("fields", "_db", "fields");
Widget.prototype.publish("classed", {}, "object", "HTML Classes", null, { tags: ["Private"] });
var origClassed = Widget.prototype.classed;
Widget.prototype.classed = function (str_obj, _) {
    var _a;
    if (typeof str_obj === "string") {
        if (arguments.length === 1)
            return origClassed.call(this)[str_obj];
        var classed = origClassed.call(this);
        origClassed.call(this, __assign({}, classed, (_a = {}, _a[str_obj] = _, _a)));
        return this;
    }
    return origClassed.apply(this, arguments);
};

var HTMLWidget = /** @class */ (function (_super) {
    __extends(HTMLWidget, _super);
    function HTMLWidget() {
        var _this = _super.call(this) || this;
        _this._drawStartPos = "origin";
        _this._tag = "div";
        _this._boundingBox = null;
        return _this;
    }
    HTMLWidget.prototype.calcFrameWidth = function (element) {
        var retVal = parseFloat(element.style("padding-left")) +
            parseFloat(element.style("padding-right")) +
            parseFloat(element.style("margin-left")) +
            parseFloat(element.style("margin-right")) +
            parseFloat(element.style("border-left-width")) +
            parseFloat(element.style("border-right-width"));
        return retVal;
    };
    HTMLWidget.prototype.calcWidth = function (element) {
        return parseFloat(element.style("width")) - this.calcFrameWidth(element);
    };
    HTMLWidget.prototype.calcFrameHeight = function (element) {
        var retVal = parseFloat(element.style("padding-top")) +
            parseFloat(element.style("padding-bottom")) +
            parseFloat(element.style("margin-top")) +
            parseFloat(element.style("margin-bottom")) +
            parseFloat(element.style("border-top-width")) +
            parseFloat(element.style("border-bottom-width"));
        return retVal;
    };
    HTMLWidget.prototype.calcHeight = function (element) {
        return parseFloat(element.style("height")) + this.calcFrameHeight(element);
    };
    HTMLWidget.prototype.hasHScroll = function (element) {
        element = element || this._element;
        return element.property("scrollWidth") > element.property("clientWidth");
    };
    HTMLWidget.prototype.hasVScroll = function (element) {
        element = element || this._element;
        return element.property("scrollHeight") > element.property("clientHeight");
    };
    HTMLWidget.prototype.clientWidth = function () {
        return this._size.width - this.calcFrameWidth(this._element);
    };
    HTMLWidget.prototype.clientHeight = function () {
        return this._size.height - this.calcFrameHeight(this._element);
    };
    HTMLWidget.prototype.getBBox = function (refresh, round) {
        if (refresh === void 0) { refresh = false; }
        if (round === void 0) { round = false; }
        if (refresh || this._boundingBox === null) {
            var domNode = this._element.node() ? this._element.node().firstElementChild : null; //  Needs to be first child, as element has its width/height forced onto it.
            if (domNode instanceof Element) {
                var rect = domNode.getBoundingClientRect();
                this._boundingBox = {
                    x: rect.left,
                    y: rect.top,
                    width: rect.width,
                    height: rect.height
                };
            }
        }
        if (this._boundingBox === null) {
            return {
                x: 0,
                y: 0,
                width: 0,
                height: 0
            };
        }
        return {
            x: (round ? Math.round(this._boundingBox.x) : this._boundingBox.x) * this._widgetScale,
            y: (round ? Math.round(this._boundingBox.y) : this._boundingBox.y) * this._widgetScale,
            width: (round ? Math.round(this._boundingBox.width) : this._boundingBox.width) * this._widgetScale,
            height: (round ? Math.round(this._boundingBox.height) : this._boundingBox.height) * this._widgetScale
        };
    };
    HTMLWidget.prototype.reposition = function (pos) {
        // const retVal = super.reposition(pos);
        if (this._placeholderElement) {
            this._placeholderElement
                .style("left", pos.x + "px")
                .style("top", pos.y + "px");
        }
        return this;
    };
    HTMLWidget.prototype.resize = function (size) {
        var retVal = _super.prototype.resize.call(this, size);
        if (this._placeholderElement) {
            this._placeholderElement
                .style("width", this._size.width + "px")
                .style("height", this._size.height + "px");
        }
        return retVal;
    };
    HTMLWidget.prototype.target = function (_) {
        var _this = this;
        var retVal = _super.prototype.target.apply(this, arguments);
        if (arguments.length) {
            if (this._target instanceof SVGElement) {
                //  Target is a SVG Node, so create an item in the Overlay and force it "over" the overlay element (cough)  ---
                this._isRootNode = false;
                var overlay = this.locateOverlayNode();
                this._placeholderElement = overlay.append("div")
                    .style("position", "absolute")
                    .style("top", "0px")
                    .style("left", "0px")
                    .style("overflow", "hidden");
                this._overlayElement = d3Select(this._target);
                this._prevPos = null;
                this.observer = new MutationObserver(function (_mutation) {
                    _this.syncOverlay();
                });
                var domNode = this._overlayElement.node();
                while (domNode) {
                    this.observer.observe(domNode, { attributes: true });
                    domNode = domNode.parentNode;
                }
            }
            else if (this._target) { //  HTMLElement
                this._placeholderElement = d3Select(this._target);
                if (!this._size.width && !this._size.height) {
                    var width = parseFloat(this._placeholderElement.style("width"));
                    var height = parseFloat(this._placeholderElement.style("height"));
                    this.size({
                        width: width,
                        height: height
                    });
                }
                this._placeholderElement = d3Select(this._target).append("div");
            }
        }
        return retVal;
    };
    HTMLWidget.prototype.postUpdate = function (domNode, element) {
        _super.prototype.postUpdate.call(this, domNode, element);
        if (this._drawStartPos === "origin") {
            this._element
                .style("position", "relative")
                .style("left", this._pos.x + "px")
                .style("top", this._pos.y + "px");
        }
        else {
            var bbox = this.getBBox(true);
            this._element
                .style("position", "relative")
                .style("float", "left")
                .style("left", this._pos.x + (this._size.width - bbox.width) / 2 + "px")
                .style("top", this._pos.y + (this._size.height - bbox.height) / 2 + "px");
        }
    };
    HTMLWidget.prototype.exit = function (domNode, element) {
        if (this.observer) {
            this.observer.disconnect();
        }
        this._prevPos = null;
        if (this._placeholderElement) {
            this._placeholderElement.remove();
        }
        _super.prototype.exit.call(this, domNode, element);
    };
    return HTMLWidget;
}(Widget));
HTMLWidget.prototype._class += " common_HTMLWidget";

var CanvasWidget = /** @class */ (function (_super) {
    __extends(CanvasWidget, _super);
    function CanvasWidget() {
        var _this = _super.call(this) || this;
        _this._tag = "canvas";
        return _this;
    }
    CanvasWidget.prototype.resize = function (size) {
        var retVal = _super.prototype.resize.call(this, size);
        try {
            this._element.attr("width", this._size.width);
            this._element.attr("height", this._size.height);
            this.resetContext();
        }
        catch (e) {
            console.error(e);
        }
        return retVal;
    };
    CanvasWidget.prototype.resetContext = function () {
        this._ctx = this._element.node().getContext("2d");
    };
    CanvasWidget.prototype.click = function (d, c) {
        console.log(d);
    };
    return CanvasWidget;
}(HTMLWidget));
CanvasWidget.prototype._class += " common_CanvasWidget";

var _version = "1.14.2-dev";
function version() {
    return _version;
}
var ieVersion = (function () {
    var ua = navigator.userAgent;
    var tem;
    var M = ua.match(/(opera|chrome|safari|firefox|msie|trident(?=\/))\/?\s*(\d+)/i) || [];
    if (/trident/i.test(M[1])) {
        tem = /\brv[ :]+(\d+)/g.exec(ua) || [];
        return parseFloat(tem[1]);
    }
    if (/msie/i.test(M[1])) {
        return parseFloat(M[2]);
    }
    return null;
})();
var isIE = ieVersion !== null;
var svgMarkerGlitch = isIE && ieVersion <= 12;
var _scrollBarWidth = null;
function getScrollbarWidth() {
    if (_scrollBarWidth === null) {
        var outer = document.createElement("div");
        outer.style.visibility = "hidden";
        outer.style.width = "100px";
        outer.style.msOverflowStyle = "scrollbar";
        document.body.appendChild(outer);
        var widthNoScroll = outer.offsetWidth;
        outer.style.overflow = "scroll";
        var inner = document.createElement("div");
        inner.style.width = "100%";
        outer.appendChild(inner);
        var widthWithScroll = inner.offsetWidth;
        outer.parentNode.removeChild(outer);
        _scrollBarWidth = widthNoScroll - widthWithScroll;
    }
    return _scrollBarWidth;
}
//  Polyfills  ---
window.MutationObserver = window.MutationObserver || window.WebKitMutationObserver || window.MozMutationObserver || function (callback) {
    //  Just enough for HTMLOverlay and C3  ---
    this.callback = callback;
    this.listeners = [];
    var MutationListener = function (callback2, domNode, type) {
        this.callback = callback2;
        this.domNode = domNode;
        this.type = type;
    };
    MutationListener.prototype = {
        handleEvent: function (evt) {
            var mutation = {
                type: this.type,
                target: this.domNode,
                addedNodes: [],
                removedNodes: [],
                previousSibling: evt.target.previousSibling,
                nextSibling: evt.target.nextSibling,
                attributeName: null,
                attributeNamespace: null,
                oldValue: null
            };
            this.callback([mutation]);
        }
    };
    this.observe = function (domNode, config) {
        var listener = null;
        if (config.attributes) {
            listener = new MutationListener(this.callback, domNode, "attributes");
            this.listeners.push(listener);
            domNode.addEventListener("DOMAttrModified", listener, true);
        }
        if (config.characterData) {
            listener = new MutationListener(this.callback, domNode, "characterData");
            this.listeners.push(listener);
            domNode.addEventListener("DOMCharacterDataModified", listener, true);
        }
        if (config.childList) {
            listener = new MutationListener(this.callback, domNode, "childList");
            this.listeners.push(listener);
            domNode.addEventListener("DOMNodeInserted", listener, true);
            domNode.addEventListener("DOMNodeRemoved", listener, true);
        }
    };
    this.disconnect = function () {
        this.listeners.forEach(function (item) {
            switch (item.type) {
                case "attributes":
                    item.domNode.removeEventListener("DOMAttrModified", item, true);
                    break;
                case "characterData":
                    item.domNode.removeEventListener("DOMCharacterDataModified", item, true);
                    break;
                case "childList":
                    item.domNode.removeEventListener("DOMNodeRemoved", item, true);
                    item.domNode.removeEventListener("DOMNodeInserted", item, true);
                    break;
            }
        });
        this.listeners = [];
    };
};
Math.sign = Math.sign || function (x) {
    x = +x; // convert to a number
    if (x === 0 || isNaN(x)) {
        return x;
    }
    return x > 0 ? 1 : -1;
};

var Platform = /*#__PURE__*/Object.freeze({
    version: version,
    ieVersion: ieVersion,
    isIE: isIE,
    svgMarkerGlitch: svgMarkerGlitch,
    getScrollbarWidth: getScrollbarWidth
});

var Transition$1 = /** @class */ (function () {
    function Transition(widget) {
        this._widget = widget;
        this._duration = 250;
        this._delay = 0;
        this._ease = cubicInOut;
    }
    Transition.prototype.duration = function (_) {
        if (!arguments.length)
            return this._duration;
        this._duration = _;
        return this._widget;
    };
    Transition.prototype.delay = function (_) {
        if (!arguments.length)
            return this._delay;
        this._delay = _;
        return this._widget;
    };
    Transition.prototype.ease = function (_) {
        if (!arguments.length)
            return this._ease;
        this._ease = _;
        return this._widget;
    };
    Transition.prototype.apply = function (selection) {
        if (this._duration || this._delay) {
            return selection.transition()
                .duration(this._duration)
                .delay(this._delay)
                .ease(this._ease);
        }
        return selection;
    };
    return Transition;
}());

var lerp = function (point, that, t) {
    //  From https://github.com/thelonious/js-intersections
    return {
        x: point.x + (that.x - point.x) * t,
        y: point.y + (that.y - point.y) * t
    };
};
var intersectLineLine = function (a1, a2, b1, b2) {
    //  From https://github.com/thelonious/js-intersections
    var result = { type: "Parallel", points: [] };
    var uaT = (b2.x - b1.x) * (a1.y - b1.y) - (b2.y - b1.y) * (a1.x - b1.x);
    var ubT = (a2.x - a1.x) * (a1.y - b1.y) - (a2.y - a1.y) * (a1.x - b1.x);
    var uB = (b2.y - b1.y) * (a2.x - a1.x) - (b2.x - b1.x) * (a2.y - a1.y);
    if (uB !== 0) {
        var ua = uaT / uB;
        var ub = ubT / uB;
        if (0 <= ua && ua <= 1 && 0 <= ub && ub <= 1) {
            result.type = "Intersection";
            result.points.push({
                x: a1.x + ua * (a2.x - a1.x),
                y: a1.y + ua * (a2.y - a1.y)
            });
        }
        else {
            result.type = "No Intersection";
        }
    }
    else {
        if (uaT === 0 || ubT === 0) {
            result.type = "Coincident";
        }
        else {
            result.type = "Parallel";
        }
    }
    return result;
};
var intersectCircleLine = function (c, r, a1, a2) {
    //  From https://github.com/thelonious/js-intersections
    var result = { type: "Intersection", points: [] };
    var a = (a2.x - a1.x) * (a2.x - a1.x) +
        (a2.y - a1.y) * (a2.y - a1.y);
    var b = 2 * ((a2.x - a1.x) * (a1.x - c.x) +
        (a2.y - a1.y) * (a1.y - c.y));
    var cc = c.x * c.x + c.y * c.y + a1.x * a1.x + a1.y * a1.y -
        2 * (c.x * a1.x + c.y * a1.y) - r * r;
    var deter = b * b - 4 * a * cc;
    if (deter < 0) {
        result.type = "Outside";
    }
    else if (deter === 0) {
        result.type = "Tangent";
        // NOTE: should calculate this point
    }
    else {
        var e = Math.sqrt(deter);
        var u1 = (-b + e) / (2 * a);
        var u2 = (-b - e) / (2 * a);
        if ((u1 < 0 || u1 > 1) && (u2 < 0 || u2 > 1)) {
            if ((u1 < 0 && u2 < 0) || (u1 > 1 && u2 > 1)) {
                result.type = "Outside";
            }
            else {
                result.type = "Inside";
            }
        }
        else {
            result.type = "Intersection";
            if (0 <= u1 && u1 <= 1)
                result.points.push(lerp(a1, a2, u1));
            if (0 <= u2 && u2 <= 1)
                result.points.push(lerp(a1, a2, u2));
        }
    }
    return result;
};
var SVGGlowFilter = /** @class */ (function () {
    function SVGGlowFilter(target, id) {
        this.filter = target.append("filter")
            .attr("id", id)
            .attr("width", "130%")
            .attr("height", "130%");
        this.feOffset = this.filter.append("feOffset")
            .attr("result", "offOut")
            .attr("in", "SourceGraphic")
            .attr("dx", "0")
            .attr("dy", "0");
        this.feColorMatrix = this.filter.append("feColorMatrix")
            .attr("result", "matrixOut")
            .attr("in", "offOut")
            .attr("type", "matrix")
            .attr("values", this.rgb2ColorMatrix("red"));
        this.feGaussianBlur = this.filter.append("feGaussianBlur")
            .attr("result", "blurOut")
            .attr("in", "matrixOut")
            .attr("stdDeviation", "3");
        this.feBlend = this.filter.append("feBlend")
            .attr("in", "SourceGraphic")
            .attr("in2", "blurOut")
            .attr("mode", "normal");
    }
    SVGGlowFilter.prototype.rgb2ColorMatrix = function (color) {
        var rgb$1 = rgb(color);
        return [
            rgb$1.r / 255, 0, 0, 0, rgb$1.r ? 1 : 0,
            0, rgb$1.g / 255, 0, 0, rgb$1.g ? 1 : 0,
            0, 0, rgb$1.b / 255, 0, rgb$1.b ? 1 : 0,
            0, 0, 0, 1, 0
        ].join(" ");
    };
    SVGGlowFilter.prototype.update = function (color) {
        this.feColorMatrix.attr("values", this.rgb2ColorMatrix(color));
    };
    return SVGGlowFilter;
}());
var SVGWidget = /** @class */ (function (_super) {
    __extends(SVGWidget, _super);
    function SVGWidget() {
        var _this = _super.call(this) || this;
        _this._enableOverflow = false;
        _this._popMarkersDebounced = debounce(function (element) {
            if (svgMarkerGlitch) {
                this._popMarkers(element);
            }
        }, 250);
        _this._tag = "g";
        _this._boundingBox = null;
        _this.transition = new Transition$1(_this);
        _this._drawStartPos = "center";
        return _this;
    }
    //  Properties  ---
    SVGWidget.prototype.move = function (_, transitionDuration) {
        var retVal = this.pos(_);
        if (arguments.length) {
            (transitionDuration ? this._element.transition().duration(transitionDuration) : this._element)
                .attr("transform", "translate(" + _.x + " " + _.y + ")scale(" + this._widgetScale + ")");
        }
        return retVal;
    };
    SVGWidget.prototype.enableOverflow = function (_) {
        if (!arguments.length)
            return this._enableOverflow;
        this._enableOverflow = _;
        return this;
    };
    SVGWidget.prototype.size = function (_) {
        var retVal = _super.prototype.size.apply(this, arguments);
        if (arguments.length) {
            this._boundingBox = null;
        }
        return retVal;
    };
    SVGWidget.prototype.resize = function (_size) {
        var retVal = _super.prototype.resize.apply(this, arguments);
        if (this._parentRelativeDiv) {
            this._parentRelativeDiv
                .style("width", this._size.width + "px")
                .style("height", this._size.height + "px");
            switch (this._drawStartPos) {
                case "origin":
                    this.pos({
                        x: 0,
                        y: 0
                    });
                    break;
                case "center":
                /* falls through */
                default:
                    this.pos({
                        x: this._size.width / 2,
                        y: this._size.height / 2
                    });
                    break;
            }
        }
        if (!isNaN(this._size.width))
            this._placeholderElement.attr("width", this._size.width);
        if (!isNaN(this._size.height))
            this._placeholderElement.attr("height", this._size.height);
        return retVal;
    };
    //  Glow Highlighting  ---
    SVGWidget.prototype.svgGlowID = function () {
        return "sel" + this.id() + "_glow";
    };
    SVGWidget.prototype.target = function (_) {
        var retVal = _super.prototype.target.apply(this, arguments);
        if (arguments.length) {
            if (this._target instanceof SVGElement) {
                this._isRootNode = false;
                this._placeholderElement = d3Select(this._target);
                this._parentWidget = this._placeholderElement.datum();
                if (!this._parentWidget || this._parentWidget._id === this._id) {
                    this._parentWidget = this.locateParentWidget(this._target.parentNode);
                }
                this._parentOverlay = this.locateOverlayNode();
                var svg = this.locateSVGNode(this._target);
                var svgDefs = d3Select(svg).select("defs");
                this._svgSelectionFilter = new SVGGlowFilter(svgDefs, this.svgGlowID());
            }
            else if (this._target) {
                //  Target is a DOM Node, so create a SVG Element  ---
                this._parentRelativeDiv = d3Select(this._target).append("div")
                    .style("position", "relative");
                this._placeholderElement = this._parentRelativeDiv.append("svg")
                    .style("position", "absolute")
                    .style("top", "0px")
                    .style("left", "0px");
                var svgDefs = this._placeholderElement.append("defs");
                this._svgSelectionFilter = new SVGGlowFilter(svgDefs, this.svgGlowID());
                this._parentOverlay = this._parentRelativeDiv.append("div")
                    .style("position", "absolute")
                    .style("top", "0px")
                    .style("left", "0px");
                if (this._size.width && this._size.height) {
                    this.resize(this._size);
                }
                else {
                    this.resize({ width: 0, height: 0 });
                }
            }
        }
        return retVal;
    };
    SVGWidget.prototype.parentOverlay = function () {
        return this._parentOverlay;
    };
    SVGWidget.prototype.enter = function (domNode, element) {
        _super.prototype.enter.call(this, domNode, element);
    };
    SVGWidget.prototype.update = function (domNode, element) {
        _super.prototype.update.call(this, domNode, element);
        if (this._svgSelectionFilter) {
            this._svgSelectionFilter.update(this.selectionGlowColor());
        }
    };
    SVGWidget.prototype.postUpdate = function (domNode, element) {
        _super.prototype.postUpdate.call(this, domNode, element);
        var transX;
        var transY;
        if (this._drawStartPos === "origin" && this._target instanceof SVGElement) {
            transX = (this._pos.x - this._size.width / 2);
            transY = (this._pos.y - this._size.height / 2);
            this._element.attr("transform", "translate(" + transX + "," + transY + ")scale(" + this._widgetScale + ")");
        }
        else {
            transX = this._pos.x;
            transY = this._pos.y;
            if (this._enableOverflow) {
                //  Individual Widgets will need to size and position themselves corrrectly (and have calculated a BBox) ---
                if ((transX < 0 || transY < 0) && this._boundingBox) {
                    transX = transX < 0 ? 0 : transX;
                    transY = transY < 0 ? 0 : transY;
                    this._parentRelativeDiv.style("overflow", "scroll");
                    this._placeholderElement.attr("width", this._boundingBox.width);
                    this._placeholderElement.attr("height", this._boundingBox.height);
                }
                else {
                    this._parentRelativeDiv.style("overflow", null);
                }
            }
            this._element.attr("transform", "translate(" + transX + "," + transY + ")scale(" + this._widgetScale + ")");
        }
    };
    SVGWidget.prototype.exit = function (domNode, element) {
        if (this._parentRelativeDiv) {
            this._parentOverlay.remove();
            this._placeholderElement.remove();
            this._parentRelativeDiv.remove();
        }
        _super.prototype.exit.call(this, domNode, element);
    };
    SVGWidget.prototype.getOffsetPos = function () {
        var retVal = { x: 0, y: 0 };
        if (this._parentWidget) {
            retVal = this._parentWidget.getOffsetPos();
            retVal.x += this._pos.x;
            retVal.y += this._pos.y;
            return retVal;
        }
        return retVal;
    };
    SVGWidget.prototype.getBBox = function (refresh, round) {
        if (refresh === void 0) { refresh = false; }
        if (round === void 0) { round = false; }
        if (refresh || this._boundingBox === null) {
            var svgNode = this._element.node();
            if (svgNode instanceof SVGElement) {
                this._boundingBox = svgNode.getBBox();
            }
        }
        if (this._boundingBox === null) {
            return {
                x: 0,
                y: 0,
                width: 0,
                height: 0
            };
        }
        return {
            x: (round ? Math.round(this._boundingBox.x) : this._boundingBox.x) * this._widgetScale,
            y: (round ? Math.round(this._boundingBox.y) : this._boundingBox.y) * this._widgetScale,
            width: (round ? Math.round(this._boundingBox.width) : this._boundingBox.width) * this._widgetScale,
            height: (round ? Math.round(this._boundingBox.height) : this._boundingBox.height) * this._widgetScale
        };
    };
    //  Intersections  ---
    SVGWidget.prototype.contains = function (point) {
        return this.containsRect(point);
    };
    SVGWidget.prototype.containsRect = function (point) {
        var size = this.getBBox();
        return point.x >= size.x && point.x <= size.x + size.width && point.y >= size.y && point.y <= size.y + size.height;
    };
    SVGWidget.prototype.containsCircle = function (radius, point) {
        var center = this.getOffsetPos();
        return this.distance(center, point) <= radius;
    };
    SVGWidget.prototype.intersection = function (pointA, pointB) {
        return this.intersectRect(pointA, pointB);
    };
    SVGWidget.prototype.intersectRect = function (pointA, pointB) {
        var center = this.getOffsetPos();
        var size = this.getBBox();
        if (pointA.x === pointB.x && pointA.y === pointB.y) {
            return pointA;
        }
        var TL = { x: center.x - size.width / 2, y: center.y - size.height / 2 };
        var TR = { x: center.x + size.width / 2, y: center.y - size.height / 2 };
        var BR = { x: center.x + size.width / 2, y: center.y + size.height / 2 };
        var BL = { x: center.x - size.width / 2, y: center.y + size.height / 2 };
        var intersection = intersectLineLine(TL, TR, pointA, pointB);
        if (intersection.points.length) {
            return { x: intersection.points[0].x, y: intersection.points[0].y };
        }
        intersection = intersectLineLine(TR, BR, pointA, pointB);
        if (intersection.points.length) {
            return { x: intersection.points[0].x, y: intersection.points[0].y };
        }
        intersection = intersectLineLine(BR, BL, pointA, pointB);
        if (intersection.points.length) {
            return { x: intersection.points[0].x, y: intersection.points[0].y };
        }
        intersection = intersectLineLine(BL, TL, pointA, pointB);
        if (intersection.points.length) {
            return { x: intersection.points[0].x, y: intersection.points[0].y };
        }
        return null;
    };
    SVGWidget.prototype.intersectRectRect = function (rect1, rect2) {
        var x = Math.max(rect1.x, rect2.x);
        var y = Math.max(rect1.y, rect2.y);
        var xLimit = (rect1.x < rect2.x) ? Math.min(rect1.x + rect1.width, rect2.x + rect2.width) : Math.min(rect2.x + rect2.width, rect1.x + rect1.width);
        var yLimit = (rect1.y < rect2.y) ? Math.min(rect1.y + rect1.height, rect2.y + rect2.height) : Math.min(rect2.y + rect2.height, rect1.y + rect1.height);
        return {
            x: x,
            y: y,
            width: xLimit - x,
            height: yLimit - y
        };
    };
    SVGWidget.prototype.intersectCircle = function (radius, pointA, pointB) {
        var center = this.getOffsetPos();
        var intersection = intersectCircleLine(center, radius, pointA, pointB);
        if (intersection.points.length) {
            return { x: intersection.points[0].x, y: intersection.points[0].y };
        }
        return null;
    };
    SVGWidget.prototype.distance = function (pointA, pointB) {
        return Math.sqrt((pointA.x - pointB.x) * (pointA.x - pointB.x) + (pointA.y - pointB.y) * (pointA.y - pointB.y));
    };
    //  Download  ---
    SVGWidget.prototype.serializeSVG = function () {
        var origSvg = this.locateSVGNode(this._element.node());
        var cloneSVG = origSvg.cloneNode(true);
        var origNodes = d3Select(origSvg).selectAll("*").nodes();
        d3Select(cloneSVG).selectAll("*").each(function (d, i) {
            var compStyles = window.getComputedStyle(origNodes[i]);
            for (var i_1 = 0; i_1 < compStyles.length; ++i_1) {
                var styleName = compStyles.item(i_1);
                var styleValue = compStyles.getPropertyValue(styleName);
                var stylePriority = compStyles.getPropertyPriority(styleName);
                this.style.setProperty(styleName, styleValue, stylePriority);
            }
        });
        var serializer = new XMLSerializer();
        return serializer.serializeToString(cloneSVG);
    };
    SVGWidget.prototype.toBlob = function () {
        return new Blob([this.serializeSVG()], { type: "image/svg+xml" });
    };
    SVGWidget.prototype.rasterize = function () {
        var extraWidgets = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            extraWidgets[_i] = arguments[_i];
        }
        var widgets = [this].concat(extraWidgets);
        var sizes = widgets.map(function (widget) { return widget.locateSVGNode(widget.element().node()).getBoundingClientRect(); });
        var width = sizes.reduce(function (prev, curr) { return prev + curr.width; }, 0);
        var height = Math.max.apply(Math, sizes.map(function (s) { return s.height; }));
        var canvas = document.createElement("canvas");
        canvas.width = width;
        canvas.height = height;
        canvas.style.width = width + "px";
        var ctx = canvas.getContext("2d");
        ctx.fillStyle = "white";
        ctx.fillRect(0, 0, width, height);
        ctx.fillStyle = "transparent";
        return new Promise(function (resolve, reject) {
            var xPos = 0;
            Promise.all(widgets.map(function (widget, i) {
                var x = xPos;
                var y = (height - sizes[i].height) / 2;
                xPos += sizes[i].width;
                return new Promise(function (resolve, reject) {
                    var image = new Image();
                    image.onerror = reject;
                    image.onload = function () {
                        ctx.drawImage(image, 0, 0, sizes[i].width, sizes[i].height, x, y, sizes[i].width, sizes[i].height);
                        resolve();
                    };
                    image.src = URL.createObjectURL(widget.toBlob());
                });
            })).then(function () {
                ctx.canvas.toBlob(resolve); // Not supported by Edge browser
            });
        });
    };
    SVGWidget.prototype.downloadSVG = function () {
        downloadString("SVG", this.serializeSVG());
    };
    SVGWidget.prototype.downloadPNG = function (filename) {
        if (filename === void 0) { filename = "image_" + timestamp(); }
        var extraWidgets = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            extraWidgets[_i - 1] = arguments[_i];
        }
        this.rasterize.apply(this, extraWidgets).then(function (blob) { return downloadBlob(blob, filename + ".png"); });
    };
    //  IE Fixers  ---
    SVGWidget.prototype._pushMarkers = function (element) {
        if (svgMarkerGlitch) {
            element = element || this._element;
            element.selectAll("path[marker-start],path[marker-end]")
                .attr("fixme-start", function () { return this.getAttribute("marker-start"); })
                .attr("fixme-end", function () { return this.getAttribute("marker-end"); })
                .attr("marker-start", null)
                .attr("marker-end", null);
        }
    };
    SVGWidget.prototype._popMarkers = function (element) {
        if (svgMarkerGlitch) {
            element = element || this._element;
            element.selectAll("path[fixme-start],path[fixme-end]")
                .attr("marker-start", function () {
                return this.getAttribute("fixme-start");
            })
                .attr("marker-end", function () { return this.getAttribute("fixme-end"); })
                .attr("fixme-start", null)
                .attr("fixme-end", null);
        }
    };
    SVGWidget.prototype._fixIEMarkers = function (element) {
        if (svgMarkerGlitch) {
            this._pushMarkers(element);
            this._popMarkersDebounced(element);
        }
    };
    SVGWidget._class = "common_SVGWidget";
    return SVGWidget;
}(Widget));
SVGWidget.prototype._class += " common_SVGWidget";
SVGWidget.prototype.publish("selectionGlowColor", "red", "html-color", "Selection Glow Color");

var css$1 = ".common_Text{fill:#000;font-size:12px}";
styleInject(css$1);

var Text = /** @class */ (function (_super) {
    __extends(Text, _super);
    function Text() {
        return _super.call(this) || this;
    }
    Text.prototype.getBBox = function (refresh, round) {
        var _this = this;
        var textParts = this.text().split("\n");
        var lineHeight = this.fontSize() || 12;
        var height = lineHeight * textParts.length;
        var widths = textParts.map(function (line) {
            return _this.textSize(line, _this.fontFamily() || "Verdana", lineHeight).width;
        });
        var width = Math.max.apply(Math, widths);
        var retVal = {
            x: -width / 2,
            y: -height / 2 - lineHeight / (this.fontFamily() === "FontAwesome" ? 4 : 6),
            width: width,
            height: height
        };
        switch (this.anchor()) {
            case "start":
                retVal.x = 0;
                break;
            case "end":
                retVal.x = -width;
                break;
        }
        return retVal;
    };
    Text.prototype.enter = function (domNode, element) {
        var _this = this;
        _super.prototype.enter.call(this, domNode, element);
        delete this._prevHash;
        this._textElement = element.append("text")
            .on("click", function () {
            _this.click();
        })
            .on("dblclick", function () {
            _this.dblclick();
        });
    };
    Text.prototype.update = function (domNode, element) {
        var _this = this;
        _super.prototype.update.call(this, domNode, element);
        var hash = this.hashSum([], { width: this.width() });
        if (this._prevHash !== hash) {
            this._prevHash = hash;
            var bbox_1 = this.getBBox();
            this._textElement
                .attr("font-family", this.fontFamily())
                .style("font-size", this.fontSize())
                .style("text-anchor", this.anchor())
                .attr("transform", function (d) { return "rotate(" + _this.rotation() + ") translate(0," + bbox_1.y + ")"; });
            var width_1 = this.width();
            var context_1 = this;
            var textParts = this.text().split("\n");
            var textLine = this._textElement.selectAll("tspan").data(textParts);
            textLine.enter().append("tspan")
                .attr("class", function (_d, i) { return "tspan_" + i; })
                .attr("dy", "1em")
                .attr("x", "0")
                .merge(textLine)
                .style("fill", this.colorFill())
                .text(function (d) {
                if (!width_1)
                    return d;
                var retVal = d;
                var lineHeight = context_1.fontSize() || 12;
                var clipPos = retVal.length - 1;
                while (clipPos > -3 && _this.textSize(retVal, _this.fontFamily() || "Verdana", lineHeight).width > width_1) {
                    retVal = retVal.substr(0, --clipPos) + "...".substr(0, clipPos + 3);
                }
                return retVal;
            });
            textLine.exit()
                .remove();
        }
    };
    Text.prototype.click = function () {
    };
    Text.prototype.dblclick = function () {
    };
    return Text;
}(SVGWidget));
Text.prototype._class += " common_Text";
Text.prototype.publish("text", "", "string", "Display Text", null, { tags: ["Basic"] });
Text.prototype.publish("fontFamily", null, "string", "Font Family", null, { tags: ["Intermediate"], optional: true });
Text.prototype.publish("fontSize", null, "number", "Font Size (pixels)", null, { tags: ["Intermediate"] });
Text.prototype.publish("anchor", "middle", "set", "Anchor Position", ["start", "middle", "end"], { tags: ["Intermediate"] });
Text.prototype.publish("colorFill", null, "html-color", "Fill Color", null, { tags: ["Basic"] });
Text.prototype.publish("rotation", 0, "number", "Degrees of rotation", null, { tags: ["Basic"] });

var css$2 = ".common_FAChar .common_Text{font-size:14px}";
styleInject(css$2);

var FAChar = /** @class */ (function (_super) {
    __extends(FAChar, _super);
    function FAChar() {
        var _this = _super.call(this) || this;
        _this._text = new Text()
            .fontFamily("FontAwesome");
        return _this;
    }
    FAChar.prototype.enter = function (domNode, element) {
        var _this = this;
        _super.prototype.enter.call(this, domNode, element);
        this._text
            .target(domNode);
        element
            .on("click", function () {
            _this.click();
        })
            .on("dblclick", function () {
            _this.dblclick();
        });
    };
    FAChar.prototype.update = function (domNode, element) {
        _super.prototype.update.call(this, domNode, element);
        this._text
            .text(this.char())
            .scale((this.fontSize() || 14) / 14) //  Scale rather than fontSize to prevent Chrome glitch  ---
            .render();
    };
    FAChar.prototype.exit = function (domNode, element) {
        this._text
            .target(null);
        _super.prototype.exit.call(this, domNode, element);
    };
    FAChar.prototype.click = function () {
        console.log("Click:", this);
    };
    FAChar.prototype.dblclick = function () {
        console.log("Double click:", this);
    };
    return FAChar;
}(SVGWidget));
FAChar.prototype._class += " common_FAChar";
FAChar.prototype.publish("char", "", "string", "Font Awesome Item", null, { tags: ["Private"] });
FAChar.prototype.publish("fontSize", null, "number", "Font Size", null, { tags: ["Private"] });
FAChar.prototype.publishProxy("text_colorFill", "_text", "colorFill");

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var colorbrewer = createCommonjsModule(function (module) {
// This product includes color specifications and designs developed by Cynthia Brewer (http://colorbrewer.org/).
// JavaScript specs as packaged in the D3 library (d3js.org). Please see license at http://colorbrewer.org/export/LICENSE.txt
!function() {

var colorbrewer = {YlGn: {
3: ["#f7fcb9","#addd8e","#31a354"],
4: ["#ffffcc","#c2e699","#78c679","#238443"],
5: ["#ffffcc","#c2e699","#78c679","#31a354","#006837"],
6: ["#ffffcc","#d9f0a3","#addd8e","#78c679","#31a354","#006837"],
7: ["#ffffcc","#d9f0a3","#addd8e","#78c679","#41ab5d","#238443","#005a32"],
8: ["#ffffe5","#f7fcb9","#d9f0a3","#addd8e","#78c679","#41ab5d","#238443","#005a32"],
9: ["#ffffe5","#f7fcb9","#d9f0a3","#addd8e","#78c679","#41ab5d","#238443","#006837","#004529"]
},YlGnBu: {
3: ["#edf8b1","#7fcdbb","#2c7fb8"],
4: ["#ffffcc","#a1dab4","#41b6c4","#225ea8"],
5: ["#ffffcc","#a1dab4","#41b6c4","#2c7fb8","#253494"],
6: ["#ffffcc","#c7e9b4","#7fcdbb","#41b6c4","#2c7fb8","#253494"],
7: ["#ffffcc","#c7e9b4","#7fcdbb","#41b6c4","#1d91c0","#225ea8","#0c2c84"],
8: ["#ffffd9","#edf8b1","#c7e9b4","#7fcdbb","#41b6c4","#1d91c0","#225ea8","#0c2c84"],
9: ["#ffffd9","#edf8b1","#c7e9b4","#7fcdbb","#41b6c4","#1d91c0","#225ea8","#253494","#081d58"]
},GnBu: {
3: ["#e0f3db","#a8ddb5","#43a2ca"],
4: ["#f0f9e8","#bae4bc","#7bccc4","#2b8cbe"],
5: ["#f0f9e8","#bae4bc","#7bccc4","#43a2ca","#0868ac"],
6: ["#f0f9e8","#ccebc5","#a8ddb5","#7bccc4","#43a2ca","#0868ac"],
7: ["#f0f9e8","#ccebc5","#a8ddb5","#7bccc4","#4eb3d3","#2b8cbe","#08589e"],
8: ["#f7fcf0","#e0f3db","#ccebc5","#a8ddb5","#7bccc4","#4eb3d3","#2b8cbe","#08589e"],
9: ["#f7fcf0","#e0f3db","#ccebc5","#a8ddb5","#7bccc4","#4eb3d3","#2b8cbe","#0868ac","#084081"]
},BuGn: {
3: ["#e5f5f9","#99d8c9","#2ca25f"],
4: ["#edf8fb","#b2e2e2","#66c2a4","#238b45"],
5: ["#edf8fb","#b2e2e2","#66c2a4","#2ca25f","#006d2c"],
6: ["#edf8fb","#ccece6","#99d8c9","#66c2a4","#2ca25f","#006d2c"],
7: ["#edf8fb","#ccece6","#99d8c9","#66c2a4","#41ae76","#238b45","#005824"],
8: ["#f7fcfd","#e5f5f9","#ccece6","#99d8c9","#66c2a4","#41ae76","#238b45","#005824"],
9: ["#f7fcfd","#e5f5f9","#ccece6","#99d8c9","#66c2a4","#41ae76","#238b45","#006d2c","#00441b"]
},PuBuGn: {
3: ["#ece2f0","#a6bddb","#1c9099"],
4: ["#f6eff7","#bdc9e1","#67a9cf","#02818a"],
5: ["#f6eff7","#bdc9e1","#67a9cf","#1c9099","#016c59"],
6: ["#f6eff7","#d0d1e6","#a6bddb","#67a9cf","#1c9099","#016c59"],
7: ["#f6eff7","#d0d1e6","#a6bddb","#67a9cf","#3690c0","#02818a","#016450"],
8: ["#fff7fb","#ece2f0","#d0d1e6","#a6bddb","#67a9cf","#3690c0","#02818a","#016450"],
9: ["#fff7fb","#ece2f0","#d0d1e6","#a6bddb","#67a9cf","#3690c0","#02818a","#016c59","#014636"]
},PuBu: {
3: ["#ece7f2","#a6bddb","#2b8cbe"],
4: ["#f1eef6","#bdc9e1","#74a9cf","#0570b0"],
5: ["#f1eef6","#bdc9e1","#74a9cf","#2b8cbe","#045a8d"],
6: ["#f1eef6","#d0d1e6","#a6bddb","#74a9cf","#2b8cbe","#045a8d"],
7: ["#f1eef6","#d0d1e6","#a6bddb","#74a9cf","#3690c0","#0570b0","#034e7b"],
8: ["#fff7fb","#ece7f2","#d0d1e6","#a6bddb","#74a9cf","#3690c0","#0570b0","#034e7b"],
9: ["#fff7fb","#ece7f2","#d0d1e6","#a6bddb","#74a9cf","#3690c0","#0570b0","#045a8d","#023858"]
},BuPu: {
3: ["#e0ecf4","#9ebcda","#8856a7"],
4: ["#edf8fb","#b3cde3","#8c96c6","#88419d"],
5: ["#edf8fb","#b3cde3","#8c96c6","#8856a7","#810f7c"],
6: ["#edf8fb","#bfd3e6","#9ebcda","#8c96c6","#8856a7","#810f7c"],
7: ["#edf8fb","#bfd3e6","#9ebcda","#8c96c6","#8c6bb1","#88419d","#6e016b"],
8: ["#f7fcfd","#e0ecf4","#bfd3e6","#9ebcda","#8c96c6","#8c6bb1","#88419d","#6e016b"],
9: ["#f7fcfd","#e0ecf4","#bfd3e6","#9ebcda","#8c96c6","#8c6bb1","#88419d","#810f7c","#4d004b"]
},RdPu: {
3: ["#fde0dd","#fa9fb5","#c51b8a"],
4: ["#feebe2","#fbb4b9","#f768a1","#ae017e"],
5: ["#feebe2","#fbb4b9","#f768a1","#c51b8a","#7a0177"],
6: ["#feebe2","#fcc5c0","#fa9fb5","#f768a1","#c51b8a","#7a0177"],
7: ["#feebe2","#fcc5c0","#fa9fb5","#f768a1","#dd3497","#ae017e","#7a0177"],
8: ["#fff7f3","#fde0dd","#fcc5c0","#fa9fb5","#f768a1","#dd3497","#ae017e","#7a0177"],
9: ["#fff7f3","#fde0dd","#fcc5c0","#fa9fb5","#f768a1","#dd3497","#ae017e","#7a0177","#49006a"]
},PuRd: {
3: ["#e7e1ef","#c994c7","#dd1c77"],
4: ["#f1eef6","#d7b5d8","#df65b0","#ce1256"],
5: ["#f1eef6","#d7b5d8","#df65b0","#dd1c77","#980043"],
6: ["#f1eef6","#d4b9da","#c994c7","#df65b0","#dd1c77","#980043"],
7: ["#f1eef6","#d4b9da","#c994c7","#df65b0","#e7298a","#ce1256","#91003f"],
8: ["#f7f4f9","#e7e1ef","#d4b9da","#c994c7","#df65b0","#e7298a","#ce1256","#91003f"],
9: ["#f7f4f9","#e7e1ef","#d4b9da","#c994c7","#df65b0","#e7298a","#ce1256","#980043","#67001f"]
},OrRd: {
3: ["#fee8c8","#fdbb84","#e34a33"],
4: ["#fef0d9","#fdcc8a","#fc8d59","#d7301f"],
5: ["#fef0d9","#fdcc8a","#fc8d59","#e34a33","#b30000"],
6: ["#fef0d9","#fdd49e","#fdbb84","#fc8d59","#e34a33","#b30000"],
7: ["#fef0d9","#fdd49e","#fdbb84","#fc8d59","#ef6548","#d7301f","#990000"],
8: ["#fff7ec","#fee8c8","#fdd49e","#fdbb84","#fc8d59","#ef6548","#d7301f","#990000"],
9: ["#fff7ec","#fee8c8","#fdd49e","#fdbb84","#fc8d59","#ef6548","#d7301f","#b30000","#7f0000"]
},YlOrRd: {
3: ["#ffeda0","#feb24c","#f03b20"],
4: ["#ffffb2","#fecc5c","#fd8d3c","#e31a1c"],
5: ["#ffffb2","#fecc5c","#fd8d3c","#f03b20","#bd0026"],
6: ["#ffffb2","#fed976","#feb24c","#fd8d3c","#f03b20","#bd0026"],
7: ["#ffffb2","#fed976","#feb24c","#fd8d3c","#fc4e2a","#e31a1c","#b10026"],
8: ["#ffffcc","#ffeda0","#fed976","#feb24c","#fd8d3c","#fc4e2a","#e31a1c","#b10026"],
9: ["#ffffcc","#ffeda0","#fed976","#feb24c","#fd8d3c","#fc4e2a","#e31a1c","#bd0026","#800026"]
},YlOrBr: {
3: ["#fff7bc","#fec44f","#d95f0e"],
4: ["#ffffd4","#fed98e","#fe9929","#cc4c02"],
5: ["#ffffd4","#fed98e","#fe9929","#d95f0e","#993404"],
6: ["#ffffd4","#fee391","#fec44f","#fe9929","#d95f0e","#993404"],
7: ["#ffffd4","#fee391","#fec44f","#fe9929","#ec7014","#cc4c02","#8c2d04"],
8: ["#ffffe5","#fff7bc","#fee391","#fec44f","#fe9929","#ec7014","#cc4c02","#8c2d04"],
9: ["#ffffe5","#fff7bc","#fee391","#fec44f","#fe9929","#ec7014","#cc4c02","#993404","#662506"]
},Purples: {
3: ["#efedf5","#bcbddc","#756bb1"],
4: ["#f2f0f7","#cbc9e2","#9e9ac8","#6a51a3"],
5: ["#f2f0f7","#cbc9e2","#9e9ac8","#756bb1","#54278f"],
6: ["#f2f0f7","#dadaeb","#bcbddc","#9e9ac8","#756bb1","#54278f"],
7: ["#f2f0f7","#dadaeb","#bcbddc","#9e9ac8","#807dba","#6a51a3","#4a1486"],
8: ["#fcfbfd","#efedf5","#dadaeb","#bcbddc","#9e9ac8","#807dba","#6a51a3","#4a1486"],
9: ["#fcfbfd","#efedf5","#dadaeb","#bcbddc","#9e9ac8","#807dba","#6a51a3","#54278f","#3f007d"]
},Blues: {
3: ["#deebf7","#9ecae1","#3182bd"],
4: ["#eff3ff","#bdd7e7","#6baed6","#2171b5"],
5: ["#eff3ff","#bdd7e7","#6baed6","#3182bd","#08519c"],
6: ["#eff3ff","#c6dbef","#9ecae1","#6baed6","#3182bd","#08519c"],
7: ["#eff3ff","#c6dbef","#9ecae1","#6baed6","#4292c6","#2171b5","#084594"],
8: ["#f7fbff","#deebf7","#c6dbef","#9ecae1","#6baed6","#4292c6","#2171b5","#084594"],
9: ["#f7fbff","#deebf7","#c6dbef","#9ecae1","#6baed6","#4292c6","#2171b5","#08519c","#08306b"]
},Greens: {
3: ["#e5f5e0","#a1d99b","#31a354"],
4: ["#edf8e9","#bae4b3","#74c476","#238b45"],
5: ["#edf8e9","#bae4b3","#74c476","#31a354","#006d2c"],
6: ["#edf8e9","#c7e9c0","#a1d99b","#74c476","#31a354","#006d2c"],
7: ["#edf8e9","#c7e9c0","#a1d99b","#74c476","#41ab5d","#238b45","#005a32"],
8: ["#f7fcf5","#e5f5e0","#c7e9c0","#a1d99b","#74c476","#41ab5d","#238b45","#005a32"],
9: ["#f7fcf5","#e5f5e0","#c7e9c0","#a1d99b","#74c476","#41ab5d","#238b45","#006d2c","#00441b"]
},Oranges: {
3: ["#fee6ce","#fdae6b","#e6550d"],
4: ["#feedde","#fdbe85","#fd8d3c","#d94701"],
5: ["#feedde","#fdbe85","#fd8d3c","#e6550d","#a63603"],
6: ["#feedde","#fdd0a2","#fdae6b","#fd8d3c","#e6550d","#a63603"],
7: ["#feedde","#fdd0a2","#fdae6b","#fd8d3c","#f16913","#d94801","#8c2d04"],
8: ["#fff5eb","#fee6ce","#fdd0a2","#fdae6b","#fd8d3c","#f16913","#d94801","#8c2d04"],
9: ["#fff5eb","#fee6ce","#fdd0a2","#fdae6b","#fd8d3c","#f16913","#d94801","#a63603","#7f2704"]
},Reds: {
3: ["#fee0d2","#fc9272","#de2d26"],
4: ["#fee5d9","#fcae91","#fb6a4a","#cb181d"],
5: ["#fee5d9","#fcae91","#fb6a4a","#de2d26","#a50f15"],
6: ["#fee5d9","#fcbba1","#fc9272","#fb6a4a","#de2d26","#a50f15"],
7: ["#fee5d9","#fcbba1","#fc9272","#fb6a4a","#ef3b2c","#cb181d","#99000d"],
8: ["#fff5f0","#fee0d2","#fcbba1","#fc9272","#fb6a4a","#ef3b2c","#cb181d","#99000d"],
9: ["#fff5f0","#fee0d2","#fcbba1","#fc9272","#fb6a4a","#ef3b2c","#cb181d","#a50f15","#67000d"]
},Greys: {
3: ["#f0f0f0","#bdbdbd","#636363"],
4: ["#f7f7f7","#cccccc","#969696","#525252"],
5: ["#f7f7f7","#cccccc","#969696","#636363","#252525"],
6: ["#f7f7f7","#d9d9d9","#bdbdbd","#969696","#636363","#252525"],
7: ["#f7f7f7","#d9d9d9","#bdbdbd","#969696","#737373","#525252","#252525"],
8: ["#ffffff","#f0f0f0","#d9d9d9","#bdbdbd","#969696","#737373","#525252","#252525"],
9: ["#ffffff","#f0f0f0","#d9d9d9","#bdbdbd","#969696","#737373","#525252","#252525","#000000"]
},PuOr: {
3: ["#f1a340","#f7f7f7","#998ec3"],
4: ["#e66101","#fdb863","#b2abd2","#5e3c99"],
5: ["#e66101","#fdb863","#f7f7f7","#b2abd2","#5e3c99"],
6: ["#b35806","#f1a340","#fee0b6","#d8daeb","#998ec3","#542788"],
7: ["#b35806","#f1a340","#fee0b6","#f7f7f7","#d8daeb","#998ec3","#542788"],
8: ["#b35806","#e08214","#fdb863","#fee0b6","#d8daeb","#b2abd2","#8073ac","#542788"],
9: ["#b35806","#e08214","#fdb863","#fee0b6","#f7f7f7","#d8daeb","#b2abd2","#8073ac","#542788"],
10: ["#7f3b08","#b35806","#e08214","#fdb863","#fee0b6","#d8daeb","#b2abd2","#8073ac","#542788","#2d004b"],
11: ["#7f3b08","#b35806","#e08214","#fdb863","#fee0b6","#f7f7f7","#d8daeb","#b2abd2","#8073ac","#542788","#2d004b"]
},BrBG: {
3: ["#d8b365","#f5f5f5","#5ab4ac"],
4: ["#a6611a","#dfc27d","#80cdc1","#018571"],
5: ["#a6611a","#dfc27d","#f5f5f5","#80cdc1","#018571"],
6: ["#8c510a","#d8b365","#f6e8c3","#c7eae5","#5ab4ac","#01665e"],
7: ["#8c510a","#d8b365","#f6e8c3","#f5f5f5","#c7eae5","#5ab4ac","#01665e"],
8: ["#8c510a","#bf812d","#dfc27d","#f6e8c3","#c7eae5","#80cdc1","#35978f","#01665e"],
9: ["#8c510a","#bf812d","#dfc27d","#f6e8c3","#f5f5f5","#c7eae5","#80cdc1","#35978f","#01665e"],
10: ["#543005","#8c510a","#bf812d","#dfc27d","#f6e8c3","#c7eae5","#80cdc1","#35978f","#01665e","#003c30"],
11: ["#543005","#8c510a","#bf812d","#dfc27d","#f6e8c3","#f5f5f5","#c7eae5","#80cdc1","#35978f","#01665e","#003c30"]
},PRGn: {
3: ["#af8dc3","#f7f7f7","#7fbf7b"],
4: ["#7b3294","#c2a5cf","#a6dba0","#008837"],
5: ["#7b3294","#c2a5cf","#f7f7f7","#a6dba0","#008837"],
6: ["#762a83","#af8dc3","#e7d4e8","#d9f0d3","#7fbf7b","#1b7837"],
7: ["#762a83","#af8dc3","#e7d4e8","#f7f7f7","#d9f0d3","#7fbf7b","#1b7837"],
8: ["#762a83","#9970ab","#c2a5cf","#e7d4e8","#d9f0d3","#a6dba0","#5aae61","#1b7837"],
9: ["#762a83","#9970ab","#c2a5cf","#e7d4e8","#f7f7f7","#d9f0d3","#a6dba0","#5aae61","#1b7837"],
10: ["#40004b","#762a83","#9970ab","#c2a5cf","#e7d4e8","#d9f0d3","#a6dba0","#5aae61","#1b7837","#00441b"],
11: ["#40004b","#762a83","#9970ab","#c2a5cf","#e7d4e8","#f7f7f7","#d9f0d3","#a6dba0","#5aae61","#1b7837","#00441b"]
},PiYG: {
3: ["#e9a3c9","#f7f7f7","#a1d76a"],
4: ["#d01c8b","#f1b6da","#b8e186","#4dac26"],
5: ["#d01c8b","#f1b6da","#f7f7f7","#b8e186","#4dac26"],
6: ["#c51b7d","#e9a3c9","#fde0ef","#e6f5d0","#a1d76a","#4d9221"],
7: ["#c51b7d","#e9a3c9","#fde0ef","#f7f7f7","#e6f5d0","#a1d76a","#4d9221"],
8: ["#c51b7d","#de77ae","#f1b6da","#fde0ef","#e6f5d0","#b8e186","#7fbc41","#4d9221"],
9: ["#c51b7d","#de77ae","#f1b6da","#fde0ef","#f7f7f7","#e6f5d0","#b8e186","#7fbc41","#4d9221"],
10: ["#8e0152","#c51b7d","#de77ae","#f1b6da","#fde0ef","#e6f5d0","#b8e186","#7fbc41","#4d9221","#276419"],
11: ["#8e0152","#c51b7d","#de77ae","#f1b6da","#fde0ef","#f7f7f7","#e6f5d0","#b8e186","#7fbc41","#4d9221","#276419"]
},RdBu: {
3: ["#ef8a62","#f7f7f7","#67a9cf"],
4: ["#ca0020","#f4a582","#92c5de","#0571b0"],
5: ["#ca0020","#f4a582","#f7f7f7","#92c5de","#0571b0"],
6: ["#b2182b","#ef8a62","#fddbc7","#d1e5f0","#67a9cf","#2166ac"],
7: ["#b2182b","#ef8a62","#fddbc7","#f7f7f7","#d1e5f0","#67a9cf","#2166ac"],
8: ["#b2182b","#d6604d","#f4a582","#fddbc7","#d1e5f0","#92c5de","#4393c3","#2166ac"],
9: ["#b2182b","#d6604d","#f4a582","#fddbc7","#f7f7f7","#d1e5f0","#92c5de","#4393c3","#2166ac"],
10: ["#67001f","#b2182b","#d6604d","#f4a582","#fddbc7","#d1e5f0","#92c5de","#4393c3","#2166ac","#053061"],
11: ["#67001f","#b2182b","#d6604d","#f4a582","#fddbc7","#f7f7f7","#d1e5f0","#92c5de","#4393c3","#2166ac","#053061"]
},RdGy: {
3: ["#ef8a62","#ffffff","#999999"],
4: ["#ca0020","#f4a582","#bababa","#404040"],
5: ["#ca0020","#f4a582","#ffffff","#bababa","#404040"],
6: ["#b2182b","#ef8a62","#fddbc7","#e0e0e0","#999999","#4d4d4d"],
7: ["#b2182b","#ef8a62","#fddbc7","#ffffff","#e0e0e0","#999999","#4d4d4d"],
8: ["#b2182b","#d6604d","#f4a582","#fddbc7","#e0e0e0","#bababa","#878787","#4d4d4d"],
9: ["#b2182b","#d6604d","#f4a582","#fddbc7","#ffffff","#e0e0e0","#bababa","#878787","#4d4d4d"],
10: ["#67001f","#b2182b","#d6604d","#f4a582","#fddbc7","#e0e0e0","#bababa","#878787","#4d4d4d","#1a1a1a"],
11: ["#67001f","#b2182b","#d6604d","#f4a582","#fddbc7","#ffffff","#e0e0e0","#bababa","#878787","#4d4d4d","#1a1a1a"]
},RdYlBu: {
3: ["#fc8d59","#ffffbf","#91bfdb"],
4: ["#d7191c","#fdae61","#abd9e9","#2c7bb6"],
5: ["#d7191c","#fdae61","#ffffbf","#abd9e9","#2c7bb6"],
6: ["#d73027","#fc8d59","#fee090","#e0f3f8","#91bfdb","#4575b4"],
7: ["#d73027","#fc8d59","#fee090","#ffffbf","#e0f3f8","#91bfdb","#4575b4"],
8: ["#d73027","#f46d43","#fdae61","#fee090","#e0f3f8","#abd9e9","#74add1","#4575b4"],
9: ["#d73027","#f46d43","#fdae61","#fee090","#ffffbf","#e0f3f8","#abd9e9","#74add1","#4575b4"],
10: ["#a50026","#d73027","#f46d43","#fdae61","#fee090","#e0f3f8","#abd9e9","#74add1","#4575b4","#313695"],
11: ["#a50026","#d73027","#f46d43","#fdae61","#fee090","#ffffbf","#e0f3f8","#abd9e9","#74add1","#4575b4","#313695"]
},Spectral: {
3: ["#fc8d59","#ffffbf","#99d594"],
4: ["#d7191c","#fdae61","#abdda4","#2b83ba"],
5: ["#d7191c","#fdae61","#ffffbf","#abdda4","#2b83ba"],
6: ["#d53e4f","#fc8d59","#fee08b","#e6f598","#99d594","#3288bd"],
7: ["#d53e4f","#fc8d59","#fee08b","#ffffbf","#e6f598","#99d594","#3288bd"],
8: ["#d53e4f","#f46d43","#fdae61","#fee08b","#e6f598","#abdda4","#66c2a5","#3288bd"],
9: ["#d53e4f","#f46d43","#fdae61","#fee08b","#ffffbf","#e6f598","#abdda4","#66c2a5","#3288bd"],
10: ["#9e0142","#d53e4f","#f46d43","#fdae61","#fee08b","#e6f598","#abdda4","#66c2a5","#3288bd","#5e4fa2"],
11: ["#9e0142","#d53e4f","#f46d43","#fdae61","#fee08b","#ffffbf","#e6f598","#abdda4","#66c2a5","#3288bd","#5e4fa2"]
},RdYlGn: {
3: ["#fc8d59","#ffffbf","#91cf60"],
4: ["#d7191c","#fdae61","#a6d96a","#1a9641"],
5: ["#d7191c","#fdae61","#ffffbf","#a6d96a","#1a9641"],
6: ["#d73027","#fc8d59","#fee08b","#d9ef8b","#91cf60","#1a9850"],
7: ["#d73027","#fc8d59","#fee08b","#ffffbf","#d9ef8b","#91cf60","#1a9850"],
8: ["#d73027","#f46d43","#fdae61","#fee08b","#d9ef8b","#a6d96a","#66bd63","#1a9850"],
9: ["#d73027","#f46d43","#fdae61","#fee08b","#ffffbf","#d9ef8b","#a6d96a","#66bd63","#1a9850"],
10: ["#a50026","#d73027","#f46d43","#fdae61","#fee08b","#d9ef8b","#a6d96a","#66bd63","#1a9850","#006837"],
11: ["#a50026","#d73027","#f46d43","#fdae61","#fee08b","#ffffbf","#d9ef8b","#a6d96a","#66bd63","#1a9850","#006837"]
},Accent: {
3: ["#7fc97f","#beaed4","#fdc086"],
4: ["#7fc97f","#beaed4","#fdc086","#ffff99"],
5: ["#7fc97f","#beaed4","#fdc086","#ffff99","#386cb0"],
6: ["#7fc97f","#beaed4","#fdc086","#ffff99","#386cb0","#f0027f"],
7: ["#7fc97f","#beaed4","#fdc086","#ffff99","#386cb0","#f0027f","#bf5b17"],
8: ["#7fc97f","#beaed4","#fdc086","#ffff99","#386cb0","#f0027f","#bf5b17","#666666"]
},Dark2: {
3: ["#1b9e77","#d95f02","#7570b3"],
4: ["#1b9e77","#d95f02","#7570b3","#e7298a"],
5: ["#1b9e77","#d95f02","#7570b3","#e7298a","#66a61e"],
6: ["#1b9e77","#d95f02","#7570b3","#e7298a","#66a61e","#e6ab02"],
7: ["#1b9e77","#d95f02","#7570b3","#e7298a","#66a61e","#e6ab02","#a6761d"],
8: ["#1b9e77","#d95f02","#7570b3","#e7298a","#66a61e","#e6ab02","#a6761d","#666666"]
},Paired: {
3: ["#a6cee3","#1f78b4","#b2df8a"],
4: ["#a6cee3","#1f78b4","#b2df8a","#33a02c"],
5: ["#a6cee3","#1f78b4","#b2df8a","#33a02c","#fb9a99"],
6: ["#a6cee3","#1f78b4","#b2df8a","#33a02c","#fb9a99","#e31a1c"],
7: ["#a6cee3","#1f78b4","#b2df8a","#33a02c","#fb9a99","#e31a1c","#fdbf6f"],
8: ["#a6cee3","#1f78b4","#b2df8a","#33a02c","#fb9a99","#e31a1c","#fdbf6f","#ff7f00"],
9: ["#a6cee3","#1f78b4","#b2df8a","#33a02c","#fb9a99","#e31a1c","#fdbf6f","#ff7f00","#cab2d6"],
10: ["#a6cee3","#1f78b4","#b2df8a","#33a02c","#fb9a99","#e31a1c","#fdbf6f","#ff7f00","#cab2d6","#6a3d9a"],
11: ["#a6cee3","#1f78b4","#b2df8a","#33a02c","#fb9a99","#e31a1c","#fdbf6f","#ff7f00","#cab2d6","#6a3d9a","#ffff99"],
12: ["#a6cee3","#1f78b4","#b2df8a","#33a02c","#fb9a99","#e31a1c","#fdbf6f","#ff7f00","#cab2d6","#6a3d9a","#ffff99","#b15928"]
},Pastel1: {
3: ["#fbb4ae","#b3cde3","#ccebc5"],
4: ["#fbb4ae","#b3cde3","#ccebc5","#decbe4"],
5: ["#fbb4ae","#b3cde3","#ccebc5","#decbe4","#fed9a6"],
6: ["#fbb4ae","#b3cde3","#ccebc5","#decbe4","#fed9a6","#ffffcc"],
7: ["#fbb4ae","#b3cde3","#ccebc5","#decbe4","#fed9a6","#ffffcc","#e5d8bd"],
8: ["#fbb4ae","#b3cde3","#ccebc5","#decbe4","#fed9a6","#ffffcc","#e5d8bd","#fddaec"],
9: ["#fbb4ae","#b3cde3","#ccebc5","#decbe4","#fed9a6","#ffffcc","#e5d8bd","#fddaec","#f2f2f2"]
},Pastel2: {
3: ["#b3e2cd","#fdcdac","#cbd5e8"],
4: ["#b3e2cd","#fdcdac","#cbd5e8","#f4cae4"],
5: ["#b3e2cd","#fdcdac","#cbd5e8","#f4cae4","#e6f5c9"],
6: ["#b3e2cd","#fdcdac","#cbd5e8","#f4cae4","#e6f5c9","#fff2ae"],
7: ["#b3e2cd","#fdcdac","#cbd5e8","#f4cae4","#e6f5c9","#fff2ae","#f1e2cc"],
8: ["#b3e2cd","#fdcdac","#cbd5e8","#f4cae4","#e6f5c9","#fff2ae","#f1e2cc","#cccccc"]
},Set1: {
3: ["#e41a1c","#377eb8","#4daf4a"],
4: ["#e41a1c","#377eb8","#4daf4a","#984ea3"],
5: ["#e41a1c","#377eb8","#4daf4a","#984ea3","#ff7f00"],
6: ["#e41a1c","#377eb8","#4daf4a","#984ea3","#ff7f00","#ffff33"],
7: ["#e41a1c","#377eb8","#4daf4a","#984ea3","#ff7f00","#ffff33","#a65628"],
8: ["#e41a1c","#377eb8","#4daf4a","#984ea3","#ff7f00","#ffff33","#a65628","#f781bf"],
9: ["#e41a1c","#377eb8","#4daf4a","#984ea3","#ff7f00","#ffff33","#a65628","#f781bf","#999999"]
},Set2: {
3: ["#66c2a5","#fc8d62","#8da0cb"],
4: ["#66c2a5","#fc8d62","#8da0cb","#e78ac3"],
5: ["#66c2a5","#fc8d62","#8da0cb","#e78ac3","#a6d854"],
6: ["#66c2a5","#fc8d62","#8da0cb","#e78ac3","#a6d854","#ffd92f"],
7: ["#66c2a5","#fc8d62","#8da0cb","#e78ac3","#a6d854","#ffd92f","#e5c494"],
8: ["#66c2a5","#fc8d62","#8da0cb","#e78ac3","#a6d854","#ffd92f","#e5c494","#b3b3b3"]
},Set3: {
3: ["#8dd3c7","#ffffb3","#bebada"],
4: ["#8dd3c7","#ffffb3","#bebada","#fb8072"],
5: ["#8dd3c7","#ffffb3","#bebada","#fb8072","#80b1d3"],
6: ["#8dd3c7","#ffffb3","#bebada","#fb8072","#80b1d3","#fdb462"],
7: ["#8dd3c7","#ffffb3","#bebada","#fb8072","#80b1d3","#fdb462","#b3de69"],
8: ["#8dd3c7","#ffffb3","#bebada","#fb8072","#80b1d3","#fdb462","#b3de69","#fccde5"],
9: ["#8dd3c7","#ffffb3","#bebada","#fb8072","#80b1d3","#fdb462","#b3de69","#fccde5","#d9d9d9"],
10: ["#8dd3c7","#ffffb3","#bebada","#fb8072","#80b1d3","#fdb462","#b3de69","#fccde5","#d9d9d9","#bc80bd"],
11: ["#8dd3c7","#ffffb3","#bebada","#fb8072","#80b1d3","#fdb462","#b3de69","#fccde5","#d9d9d9","#bc80bd","#ccebc5"],
12: ["#8dd3c7","#ffffb3","#bebada","#fb8072","#80b1d3","#fdb462","#b3de69","#fccde5","#d9d9d9","#bc80bd","#ccebc5","#ffed6f"]
}};

if ( module.exports) {
    module.exports = colorbrewer;
} else {
    this.colorbrewer = colorbrewer;
}

}();
});

var colorbrewer$1 = colorbrewer;

var _colorbrewer = /*#__PURE__*/Object.freeze({
    'default': colorbrewer$1,
    __moduleExports: colorbrewer$1
});

var array$2 = Array.prototype;

var map$2 = array$2.map;
var slice$1 = array$2.slice;

var implicit = {name: "implicit"};

function ordinal(range) {
  var index = map$1(),
      domain = [],
      unknown = implicit;

  range = range == null ? [] : slice$1.call(range);

  function scale(d) {
    var key = d + "", i = index.get(key);
    if (!i) {
      if (unknown !== implicit) return unknown;
      index.set(key, i = domain.push(d));
    }
    return range[(i - 1) % range.length];
  }

  scale.domain = function(_) {
    if (!arguments.length) return domain.slice();
    domain = [], index = map$1();
    var i = -1, n = _.length, d, key;
    while (++i < n) if (!index.has(key = (d = _[i]) + "")) index.set(key, domain.push(d));
    return scale;
  };

  scale.range = function(_) {
    return arguments.length ? (range = slice$1.call(_), scale) : range.slice();
  };

  scale.unknown = function(_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  scale.copy = function() {
    return ordinal()
        .domain(domain)
        .range(range)
        .unknown(unknown);
  };

  return scale;
}

function band() {
  var scale = ordinal().unknown(undefined),
      domain = scale.domain,
      ordinalRange = scale.range,
      range = [0, 1],
      step,
      bandwidth,
      round = false,
      paddingInner = 0,
      paddingOuter = 0,
      align = 0.5;

  delete scale.unknown;

  function rescale() {
    var n = domain().length,
        reverse = range[1] < range[0],
        start = range[reverse - 0],
        stop = range[1 - reverse];
    step = (stop - start) / Math.max(1, n - paddingInner + paddingOuter * 2);
    if (round) step = Math.floor(step);
    start += (stop - start - step * (n - paddingInner)) * align;
    bandwidth = step * (1 - paddingInner);
    if (round) start = Math.round(start), bandwidth = Math.round(bandwidth);
    var values = sequence(n).map(function(i) { return start + step * i; });
    return ordinalRange(reverse ? values.reverse() : values);
  }

  scale.domain = function(_) {
    return arguments.length ? (domain(_), rescale()) : domain();
  };

  scale.range = function(_) {
    return arguments.length ? (range = [+_[0], +_[1]], rescale()) : range.slice();
  };

  scale.rangeRound = function(_) {
    return range = [+_[0], +_[1]], round = true, rescale();
  };

  scale.bandwidth = function() {
    return bandwidth;
  };

  scale.step = function() {
    return step;
  };

  scale.round = function(_) {
    return arguments.length ? (round = !!_, rescale()) : round;
  };

  scale.padding = function(_) {
    return arguments.length ? (paddingInner = paddingOuter = Math.max(0, Math.min(1, _)), rescale()) : paddingInner;
  };

  scale.paddingInner = function(_) {
    return arguments.length ? (paddingInner = Math.max(0, Math.min(1, _)), rescale()) : paddingInner;
  };

  scale.paddingOuter = function(_) {
    return arguments.length ? (paddingOuter = Math.max(0, Math.min(1, _)), rescale()) : paddingOuter;
  };

  scale.align = function(_) {
    return arguments.length ? (align = Math.max(0, Math.min(1, _)), rescale()) : align;
  };

  scale.copy = function() {
    return band()
        .domain(domain())
        .range(range)
        .round(round)
        .paddingInner(paddingInner)
        .paddingOuter(paddingOuter)
        .align(align);
  };

  return rescale();
}

function pointish(scale) {
  var copy = scale.copy;

  scale.padding = scale.paddingOuter;
  delete scale.paddingInner;
  delete scale.paddingOuter;

  scale.copy = function() {
    return pointish(copy());
  };

  return scale;
}

function point$1() {
  return pointish(band().paddingInner(1));
}

function constant$3(x) {
  return function() {
    return x;
  };
}

function number$1(x) {
  return +x;
}

var unit = [0, 1];

function deinterpolateLinear(a, b) {
  return (b -= (a = +a))
      ? function(x) { return (x - a) / b; }
      : constant$3(b);
}

function deinterpolateClamp(deinterpolate) {
  return function(a, b) {
    var d = deinterpolate(a = +a, b = +b);
    return function(x) { return x <= a ? 0 : x >= b ? 1 : d(x); };
  };
}

function reinterpolateClamp(reinterpolate) {
  return function(a, b) {
    var r = reinterpolate(a = +a, b = +b);
    return function(t) { return t <= 0 ? a : t >= 1 ? b : r(t); };
  };
}

function bimap(domain, range, deinterpolate, reinterpolate) {
  var d0 = domain[0], d1 = domain[1], r0 = range[0], r1 = range[1];
  if (d1 < d0) d0 = deinterpolate(d1, d0), r0 = reinterpolate(r1, r0);
  else d0 = deinterpolate(d0, d1), r0 = reinterpolate(r0, r1);
  return function(x) { return r0(d0(x)); };
}

function polymap(domain, range, deinterpolate, reinterpolate) {
  var j = Math.min(domain.length, range.length) - 1,
      d = new Array(j),
      r = new Array(j),
      i = -1;

  // Reverse descending domains.
  if (domain[j] < domain[0]) {
    domain = domain.slice().reverse();
    range = range.slice().reverse();
  }

  while (++i < j) {
    d[i] = deinterpolate(domain[i], domain[i + 1]);
    r[i] = reinterpolate(range[i], range[i + 1]);
  }

  return function(x) {
    var i = bisectRight(domain, x, 1, j) - 1;
    return r[i](d[i](x));
  };
}

function copy(source, target) {
  return target
      .domain(source.domain())
      .range(source.range())
      .interpolate(source.interpolate())
      .clamp(source.clamp());
}

// deinterpolate(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].
// reinterpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding domain value x in [a,b].
function continuous(deinterpolate, reinterpolate) {
  var domain = unit,
      range = unit,
      interpolate$1 = interpolate,
      clamp = false,
      piecewise,
      output,
      input;

  function rescale() {
    piecewise = Math.min(domain.length, range.length) > 2 ? polymap : bimap;
    output = input = null;
    return scale;
  }

  function scale(x) {
    return (output || (output = piecewise(domain, range, clamp ? deinterpolateClamp(deinterpolate) : deinterpolate, interpolate$1)))(+x);
  }

  scale.invert = function(y) {
    return (input || (input = piecewise(range, domain, deinterpolateLinear, clamp ? reinterpolateClamp(reinterpolate) : reinterpolate)))(+y);
  };

  scale.domain = function(_) {
    return arguments.length ? (domain = map$2.call(_, number$1), rescale()) : domain.slice();
  };

  scale.range = function(_) {
    return arguments.length ? (range = slice$1.call(_), rescale()) : range.slice();
  };

  scale.rangeRound = function(_) {
    return range = slice$1.call(_), interpolate$1 = interpolateRound, rescale();
  };

  scale.clamp = function(_) {
    return arguments.length ? (clamp = !!_, rescale()) : clamp;
  };

  scale.interpolate = function(_) {
    return arguments.length ? (interpolate$1 = _, rescale()) : interpolate$1;
  };

  return rescale();
}

function tickFormat(domain, count, specifier) {
  var start = domain[0],
      stop = domain[domain.length - 1],
      step = tickStep(start, stop, count == null ? 10 : count),
      precision;
  specifier = formatSpecifier(specifier == null ? ",f" : specifier);
  switch (specifier.type) {
    case "s": {
      var value = Math.max(Math.abs(start), Math.abs(stop));
      if (specifier.precision == null && !isNaN(precision = precisionPrefix(step, value))) specifier.precision = precision;
      return formatPrefix(specifier, value);
    }
    case "":
    case "e":
    case "g":
    case "p":
    case "r": {
      if (specifier.precision == null && !isNaN(precision = precisionRound(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === "e");
      break;
    }
    case "f":
    case "%": {
      if (specifier.precision == null && !isNaN(precision = precisionFixed(step))) specifier.precision = precision - (specifier.type === "%") * 2;
      break;
    }
  }
  return format(specifier);
}

function linearish(scale) {
  var domain = scale.domain;

  scale.ticks = function(count) {
    var d = domain();
    return ticks(d[0], d[d.length - 1], count == null ? 10 : count);
  };

  scale.tickFormat = function(count, specifier) {
    return tickFormat(domain(), count, specifier);
  };

  scale.nice = function(count) {
    if (count == null) count = 10;

    var d = domain(),
        i0 = 0,
        i1 = d.length - 1,
        start = d[i0],
        stop = d[i1],
        step;

    if (stop < start) {
      step = start, start = stop, stop = step;
      step = i0, i0 = i1, i1 = step;
    }

    step = tickIncrement(start, stop, count);

    if (step > 0) {
      start = Math.floor(start / step) * step;
      stop = Math.ceil(stop / step) * step;
      step = tickIncrement(start, stop, count);
    } else if (step < 0) {
      start = Math.ceil(start * step) / step;
      stop = Math.floor(stop * step) / step;
      step = tickIncrement(start, stop, count);
    }

    if (step > 0) {
      d[i0] = Math.floor(start / step) * step;
      d[i1] = Math.ceil(stop / step) * step;
      domain(d);
    } else if (step < 0) {
      d[i0] = Math.ceil(start * step) / step;
      d[i1] = Math.floor(stop * step) / step;
      domain(d);
    }

    return scale;
  };

  return scale;
}

function linear$2() {
  var scale = continuous(deinterpolateLinear, reinterpolate);

  scale.copy = function() {
    return copy(scale, linear$2());
  };

  return linearish(scale);
}

function identity$3() {
  var domain = [0, 1];

  function scale(x) {
    return +x;
  }

  scale.invert = scale;

  scale.domain = scale.range = function(_) {
    return arguments.length ? (domain = map$2.call(_, number$1), scale) : domain.slice();
  };

  scale.copy = function() {
    return identity$3().domain(domain);
  };

  return linearish(scale);
}

function nice(domain, interval) {
  domain = domain.slice();

  var i0 = 0,
      i1 = domain.length - 1,
      x0 = domain[i0],
      x1 = domain[i1],
      t;

  if (x1 < x0) {
    t = i0, i0 = i1, i1 = t;
    t = x0, x0 = x1, x1 = t;
  }

  domain[i0] = interval.floor(x0);
  domain[i1] = interval.ceil(x1);
  return domain;
}

function deinterpolate(a, b) {
  return (b = Math.log(b / a))
      ? function(x) { return Math.log(x / a) / b; }
      : constant$3(b);
}

function reinterpolate$1(a, b) {
  return a < 0
      ? function(t) { return -Math.pow(-b, t) * Math.pow(-a, 1 - t); }
      : function(t) { return Math.pow(b, t) * Math.pow(a, 1 - t); };
}

function pow10(x) {
  return isFinite(x) ? +("1e" + x) : x < 0 ? 0 : x;
}

function powp(base) {
  return base === 10 ? pow10
      : base === Math.E ? Math.exp
      : function(x) { return Math.pow(base, x); };
}

function logp(base) {
  return base === Math.E ? Math.log
      : base === 10 && Math.log10
      || base === 2 && Math.log2
      || (base = Math.log(base), function(x) { return Math.log(x) / base; });
}

function reflect(f) {
  return function(x) {
    return -f(-x);
  };
}

function log() {
  var scale = continuous(deinterpolate, reinterpolate$1).domain([1, 10]),
      domain = scale.domain,
      base = 10,
      logs = logp(10),
      pows = powp(10);

  function rescale() {
    logs = logp(base), pows = powp(base);
    if (domain()[0] < 0) logs = reflect(logs), pows = reflect(pows);
    return scale;
  }

  scale.base = function(_) {
    return arguments.length ? (base = +_, rescale()) : base;
  };

  scale.domain = function(_) {
    return arguments.length ? (domain(_), rescale()) : domain();
  };

  scale.ticks = function(count) {
    var d = domain(),
        u = d[0],
        v = d[d.length - 1],
        r;

    if (r = v < u) i = u, u = v, v = i;

    var i = logs(u),
        j = logs(v),
        p,
        k,
        t,
        n = count == null ? 10 : +count,
        z = [];

    if (!(base % 1) && j - i < n) {
      i = Math.round(i) - 1, j = Math.round(j) + 1;
      if (u > 0) for (; i < j; ++i) {
        for (k = 1, p = pows(i); k < base; ++k) {
          t = p * k;
          if (t < u) continue;
          if (t > v) break;
          z.push(t);
        }
      } else for (; i < j; ++i) {
        for (k = base - 1, p = pows(i); k >= 1; --k) {
          t = p * k;
          if (t < u) continue;
          if (t > v) break;
          z.push(t);
        }
      }
    } else {
      z = ticks(i, j, Math.min(j - i, n)).map(pows);
    }

    return r ? z.reverse() : z;
  };

  scale.tickFormat = function(count, specifier) {
    if (specifier == null) specifier = base === 10 ? ".0e" : ",";
    if (typeof specifier !== "function") specifier = format(specifier);
    if (count === Infinity) return specifier;
    if (count == null) count = 10;
    var k = Math.max(1, base * count / scale.ticks().length); // TODO fast estimate?
    return function(d) {
      var i = d / pows(Math.round(logs(d)));
      if (i * base < base - 0.5) i *= base;
      return i <= k ? specifier(d) : "";
    };
  };

  scale.nice = function() {
    return domain(nice(domain(), {
      floor: function(x) { return pows(Math.floor(logs(x))); },
      ceil: function(x) { return pows(Math.ceil(logs(x))); }
    }));
  };

  scale.copy = function() {
    return copy(scale, log().base(base));
  };

  return scale;
}

function raise$1(x, exponent) {
  return x < 0 ? -Math.pow(-x, exponent) : Math.pow(x, exponent);
}

function pow() {
  var exponent = 1,
      scale = continuous(deinterpolate, reinterpolate),
      domain = scale.domain;

  function deinterpolate(a, b) {
    return (b = raise$1(b, exponent) - (a = raise$1(a, exponent)))
        ? function(x) { return (raise$1(x, exponent) - a) / b; }
        : constant$3(b);
  }

  function reinterpolate(a, b) {
    b = raise$1(b, exponent) - (a = raise$1(a, exponent));
    return function(t) { return raise$1(a + b * t, 1 / exponent); };
  }

  scale.exponent = function(_) {
    return arguments.length ? (exponent = +_, domain(domain())) : exponent;
  };

  scale.copy = function() {
    return copy(scale, pow().exponent(exponent));
  };

  return linearish(scale);
}

function sqrt() {
  return pow().exponent(0.5);
}

function quantile() {
  var domain = [],
      range = [],
      thresholds = [];

  function rescale() {
    var i = 0, n = Math.max(1, range.length);
    thresholds = new Array(n - 1);
    while (++i < n) thresholds[i - 1] = threshold(domain, i / n);
    return scale;
  }

  function scale(x) {
    if (!isNaN(x = +x)) return range[bisectRight(thresholds, x)];
  }

  scale.invertExtent = function(y) {
    var i = range.indexOf(y);
    return i < 0 ? [NaN, NaN] : [
      i > 0 ? thresholds[i - 1] : domain[0],
      i < thresholds.length ? thresholds[i] : domain[domain.length - 1]
    ];
  };

  scale.domain = function(_) {
    if (!arguments.length) return domain.slice();
    domain = [];
    for (var i = 0, n = _.length, d; i < n; ++i) if (d = _[i], d != null && !isNaN(d = +d)) domain.push(d);
    domain.sort(ascending$1);
    return rescale();
  };

  scale.range = function(_) {
    return arguments.length ? (range = slice$1.call(_), rescale()) : range.slice();
  };

  scale.quantiles = function() {
    return thresholds.slice();
  };

  scale.copy = function() {
    return quantile()
        .domain(domain)
        .range(range);
  };

  return scale;
}

function quantize$1() {
  var x0 = 0,
      x1 = 1,
      n = 1,
      domain = [0.5],
      range = [0, 1];

  function scale(x) {
    if (x <= x) return range[bisectRight(domain, x, 0, n)];
  }

  function rescale() {
    var i = -1;
    domain = new Array(n);
    while (++i < n) domain[i] = ((i + 1) * x1 - (i - n) * x0) / (n + 1);
    return scale;
  }

  scale.domain = function(_) {
    return arguments.length ? (x0 = +_[0], x1 = +_[1], rescale()) : [x0, x1];
  };

  scale.range = function(_) {
    return arguments.length ? (n = (range = slice$1.call(_)).length - 1, rescale()) : range.slice();
  };

  scale.invertExtent = function(y) {
    var i = range.indexOf(y);
    return i < 0 ? [NaN, NaN]
        : i < 1 ? [x0, domain[0]]
        : i >= n ? [domain[n - 1], x1]
        : [domain[i - 1], domain[i]];
  };

  scale.copy = function() {
    return quantize$1()
        .domain([x0, x1])
        .range(range);
  };

  return linearish(scale);
}

function threshold$1() {
  var domain = [0.5],
      range = [0, 1],
      n = 1;

  function scale(x) {
    if (x <= x) return range[bisectRight(domain, x, 0, n)];
  }

  scale.domain = function(_) {
    return arguments.length ? (domain = slice$1.call(_), n = Math.min(domain.length, range.length - 1), scale) : domain.slice();
  };

  scale.range = function(_) {
    return arguments.length ? (range = slice$1.call(_), n = Math.min(domain.length, range.length - 1), scale) : range.slice();
  };

  scale.invertExtent = function(y) {
    var i = range.indexOf(y);
    return [domain[i - 1], domain[i]];
  };

  scale.copy = function() {
    return threshold$1()
        .domain(domain)
        .range(range);
  };

  return scale;
}

var durationSecond$1 = 1000,
    durationMinute$1 = durationSecond$1 * 60,
    durationHour$1 = durationMinute$1 * 60,
    durationDay$1 = durationHour$1 * 24,
    durationWeek$1 = durationDay$1 * 7,
    durationMonth = durationDay$1 * 30,
    durationYear = durationDay$1 * 365;

function date$1(t) {
  return new Date(t);
}

function number$2(t) {
  return t instanceof Date ? +t : +new Date(+t);
}

function calendar(year, month, week, day, hour, minute, second, millisecond, format) {
  var scale = continuous(deinterpolateLinear, reinterpolate),
      invert = scale.invert,
      domain = scale.domain;

  var formatMillisecond = format(".%L"),
      formatSecond = format(":%S"),
      formatMinute = format("%I:%M"),
      formatHour = format("%I %p"),
      formatDay = format("%a %d"),
      formatWeek = format("%b %d"),
      formatMonth = format("%B"),
      formatYear = format("%Y");

  var tickIntervals = [
    [second,  1,      durationSecond$1],
    [second,  5,  5 * durationSecond$1],
    [second, 15, 15 * durationSecond$1],
    [second, 30, 30 * durationSecond$1],
    [minute,  1,      durationMinute$1],
    [minute,  5,  5 * durationMinute$1],
    [minute, 15, 15 * durationMinute$1],
    [minute, 30, 30 * durationMinute$1],
    [  hour,  1,      durationHour$1  ],
    [  hour,  3,  3 * durationHour$1  ],
    [  hour,  6,  6 * durationHour$1  ],
    [  hour, 12, 12 * durationHour$1  ],
    [   day,  1,      durationDay$1   ],
    [   day,  2,  2 * durationDay$1   ],
    [  week,  1,      durationWeek$1  ],
    [ month,  1,      durationMonth ],
    [ month,  3,  3 * durationMonth ],
    [  year,  1,      durationYear  ]
  ];

  function tickFormat(date) {
    return (second(date) < date ? formatMillisecond
        : minute(date) < date ? formatSecond
        : hour(date) < date ? formatMinute
        : day(date) < date ? formatHour
        : month(date) < date ? (week(date) < date ? formatDay : formatWeek)
        : year(date) < date ? formatMonth
        : formatYear)(date);
  }

  function tickInterval(interval, start, stop, step) {
    if (interval == null) interval = 10;

    // If a desired tick count is specified, pick a reasonable tick interval
    // based on the extent of the domain and a rough estimate of tick size.
    // Otherwise, assume interval is already a time interval and use it.
    if (typeof interval === "number") {
      var target = Math.abs(stop - start) / interval,
          i = bisector(function(i) { return i[2]; }).right(tickIntervals, target);
      if (i === tickIntervals.length) {
        step = tickStep(start / durationYear, stop / durationYear, interval);
        interval = year;
      } else if (i) {
        i = tickIntervals[target / tickIntervals[i - 1][2] < tickIntervals[i][2] / target ? i - 1 : i];
        step = i[1];
        interval = i[0];
      } else {
        step = Math.max(tickStep(start, stop, interval), 1);
        interval = millisecond;
      }
    }

    return step == null ? interval : interval.every(step);
  }

  scale.invert = function(y) {
    return new Date(invert(y));
  };

  scale.domain = function(_) {
    return arguments.length ? domain(map$2.call(_, number$2)) : domain().map(date$1);
  };

  scale.ticks = function(interval, step) {
    var d = domain(),
        t0 = d[0],
        t1 = d[d.length - 1],
        r = t1 < t0,
        t;
    if (r) t = t0, t0 = t1, t1 = t;
    t = tickInterval(interval, t0, t1, step);
    t = t ? t.range(t0, t1 + 1) : []; // inclusive stop
    return r ? t.reverse() : t;
  };

  scale.tickFormat = function(count, specifier) {
    return specifier == null ? tickFormat : format(specifier);
  };

  scale.nice = function(interval, step) {
    var d = domain();
    return (interval = tickInterval(interval, d[0], d[d.length - 1], step))
        ? domain(nice(d, interval))
        : scale;
  };

  scale.copy = function() {
    return copy(scale, calendar(year, month, week, day, hour, minute, second, millisecond, format));
  };

  return scale;
}

function time() {
  return calendar(year, month, sunday, day, hour, minute, second, millisecond, timeFormat).domain([new Date(2000, 0, 1), new Date(2000, 0, 2)]);
}

function utcTime() {
  return calendar(utcYear, utcMonth, utcSunday, utcDay, utcHour, utcMinute, second, millisecond, utcFormat).domain([Date.UTC(2000, 0, 1), Date.UTC(2000, 0, 2)]);
}

function colors(s) {
  return s.match(/.{6}/g).map(function(x) {
    return "#" + x;
  });
}

var d3SchemeCategory10 = colors("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf");

var d3SchemeCategory20b = colors("393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6");

var d3SchemeCategory20c = colors("3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9");

var d3SchemeCategory20 = colors("1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5");

var cubehelix$3 = cubehelixLong(cubehelix(300, 0.5, 0.0), cubehelix(-240, 0.5, 1.0));

var warm = cubehelixLong(cubehelix(-100, 0.75, 0.35), cubehelix(80, 1.50, 0.8));

var cool = cubehelixLong(cubehelix(260, 0.75, 0.35), cubehelix(80, 1.50, 0.8));

var rainbow = cubehelix();

function rainbow$1(t) {
  if (t < 0 || t > 1) t -= Math.floor(t);
  var ts = Math.abs(t - 0.5);
  rainbow.h = 360 * t - 100;
  rainbow.s = 1.5 - 1.5 * ts;
  rainbow.l = 0.8 - 0.9 * ts;
  return rainbow + "";
}

function ramp(range) {
  var n = range.length;
  return function(t) {
    return range[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];
  };
}

var d3InterpolateViridis = ramp(colors("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725"));

var magma = ramp(colors("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf"));

var inferno = ramp(colors("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4"));

var plasma = ramp(colors("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));

function sequential(interpolator) {
  var x0 = 0,
      x1 = 1,
      clamp = false;

  function scale(x) {
    var t = (x - x0) / (x1 - x0);
    return interpolator(clamp ? Math.max(0, Math.min(1, t)) : t);
  }

  scale.domain = function(_) {
    return arguments.length ? (x0 = +_[0], x1 = +_[1], scale) : [x0, x1];
  };

  scale.clamp = function(_) {
    return arguments.length ? (clamp = !!_, scale) : clamp;
  };

  scale.interpolator = function(_) {
    return arguments.length ? (interpolator = _, scale) : interpolator;
  };

  scale.copy = function() {
    return sequential(interpolator).domain([x0, x1]).clamp(clamp);
  };

  return linearish(scale);
}

var d3Schemes = {
    category10: d3SchemeCategory10,
    category20: d3SchemeCategory20,
    category20b: d3SchemeCategory20b,
    category20c: d3SchemeCategory20c
};
var m_colorbrewer = colorbrewer$1 || _colorbrewer;
var m_d3 = {
    Viridis: d3InterpolateViridis,
    Magma: magma,
    Inferno: inferno,
    Plasma: plasma
};
var d3Ordinal = [
    "category10", "category20", "category20b", "category20c"
];
var brewerOrdinal = [
    "Accent", "Dark2", "Paired", "Pastel1", "Pastel2", "Set1", "Set2", "Set3"
];
var hpccOrdinal = [
    "hpcc10", "hpcc20"
];
// These color schemes are from www.flatuicolors.com
var flatuiSchemes = {
    FlatUI_default: ["rgb(26, 188, 156)", "rgb(46, 204, 113)", "rgb(52, 152, 219)", "rgb(155, 89, 182)", "rgb(52, 73, 94)", "rgb(22, 160, 133)", "rgb(39, 174, 96)", "rgb(41, 128, 185)", "rgb(142, 68, 173)", "rgb(44, 62, 80)", "rgb(241, 196, 15)", "rgb(230, 126, 34)", "rgb(231, 76, 60)", "rgb(236, 240, 241)", "rgb(149, 165, 166)", "rgb(243, 156, 18)", "rgb(211, 84, 0)", "rgb(192, 57, 43)", "rgb(189, 195, 199)", "rgb(127, 140, 141)"],
    FlatUI_American: ["rgb(85, 239, 196)", "rgb(129, 236, 236)", "rgb(116, 185, 255)", "rgb(162, 155, 254)", "rgb(223, 230, 233)", "rgb(0, 184, 148)", "rgb(0, 206, 201)", "rgb(9, 132, 227)", "rgb(108, 92, 231)", "rgb(178, 190, 195)", "rgb(255, 234, 167)", "rgb(250, 177, 160)", "rgb(255, 118, 117)", "rgb(253, 121, 168)", "rgb(99, 110, 114)", "rgb(253, 203, 110)", "rgb(225, 112, 85)", "rgb(214, 48, 49)", "rgb(232, 67, 147)", "rgb(45, 52, 54)"],
    FlatUI_Aussie: ["rgb(246, 229, 141)", "rgb(255, 190, 118)", "rgb(255, 121, 121)", "rgb(186, 220, 88)", "rgb(223, 249, 251)", "rgb(249, 202, 36)", "rgb(240, 147, 43)", "rgb(235, 77, 75)", "rgb(106, 176, 76)", "rgb(199, 236, 238)", "rgb(126, 214, 223)", "rgb(224, 86, 253)", "rgb(104, 109, 224)", "rgb(48, 51, 107)", "rgb(149, 175, 192)", "rgb(34, 166, 179)", "rgb(190, 46, 221)", "rgb(72, 52, 212)", "rgb(19, 15, 64)", "rgb(83, 92, 104)"],
    FlatUI_British: ["rgb(0, 168, 255)", "rgb(156, 136, 255)", "rgb(251, 197, 49)", "rgb(76, 209, 55)", "rgb(72, 126, 176)", "rgb(0, 151, 230)", "rgb(140, 122, 230)", "rgb(225, 177, 44)", "rgb(68, 189, 50)", "rgb(64, 115, 158)", "rgb(232, 65, 24)", "rgb(245, 246, 250)", "rgb(127, 143, 166)", "rgb(39, 60, 117)", "rgb(53, 59, 72)", "rgb(194, 54, 22)", "rgb(220, 221, 225)", "rgb(113, 128, 147)", "rgb(25, 42, 86)", "rgb(47, 54, 64)"],
    FlatUI_Canadian: ["rgb(255, 159, 243)", "rgb(254, 202, 87)", "rgb(255, 107, 107)", "rgb(72, 219, 251)", "rgb(29, 209, 161)", "rgb(243, 104, 224)", "rgb(255, 159, 67)", "rgb(238, 82, 83)", "rgb(10, 189, 227)", "rgb(16, 172, 132)", "rgb(0, 210, 211)", "rgb(84, 160, 255)", "rgb(95, 39, 205)", "rgb(200, 214, 229)", "rgb(87, 101, 116)", "rgb(1, 163, 164)", "rgb(46, 134, 222)", "rgb(52, 31, 151)", "rgb(131, 149, 167)", "rgb(34, 47, 62)"],
    FlatUI_Chinese: ["rgb(236, 204, 104)", "rgb(255, 127, 80)", "rgb(255, 107, 129)", "rgb(164, 176, 190)", "rgb(87, 96, 111)", "rgb(255, 165, 2)", "rgb(255, 99, 72)", "rgb(255, 71, 87)", "rgb(116, 125, 140)", "rgb(47, 53, 66)", "rgb(123, 237, 159)", "rgb(112, 161, 255)", "rgb(83, 82, 237)", "rgb(255, 255, 255)", "rgb(223, 228, 234)", "rgb(46, 213, 115)", "rgb(30, 144, 255)", "rgb(55, 66, 250)", "rgb(241, 242, 246)", "rgb(206, 214, 224)"],
    FlatUI_Dutch: ["rgb(255, 195, 18)", "rgb(196, 229, 56)", "rgb(18, 203, 196)", "rgb(253, 167, 223)", "rgb(237, 76, 103)", "rgb(247, 159, 31)", "rgb(163, 203, 56)", "rgb(18, 137, 167)", "rgb(217, 128, 250)", "rgb(181, 52, 113)", "rgb(238, 90, 36)", "rgb(0, 148, 50)", "rgb(6, 82, 221)", "rgb(153, 128, 250)", "rgb(131, 52, 113)", "rgb(234, 32, 39)", "rgb(0, 98, 102)", "rgb(27, 20, 100)", "rgb(87, 88, 187)", "rgb(111, 30, 81)"],
    FlatUI_French: ["rgb(250, 211, 144)", "rgb(248, 194, 145)", "rgb(106, 137, 204)", "rgb(130, 204, 221)", "rgb(184, 233, 148)", "rgb(246, 185, 59)", "rgb(229, 80, 57)", "rgb(74, 105, 189)", "rgb(96, 163, 188)", "rgb(120, 224, 143)", "rgb(250, 152, 58)", "rgb(235, 47, 6)", "rgb(30, 55, 153)", "rgb(60, 99, 130)", "rgb(56, 173, 169)", "rgb(229, 142, 38)", "rgb(183, 21, 64)", "rgb(12, 36, 97)", "rgb(10, 61, 98)", "rgb(7, 153, 146)"],
    FlatUI_German: ["rgb(252, 92, 101)", "rgb(253, 150, 68)", "rgb(254, 211, 48)", "rgb(38, 222, 129)", "rgb(43, 203, 186)", "rgb(235, 59, 90)", "rgb(250, 130, 49)", "rgb(247, 183, 49)", "rgb(32, 191, 107)", "rgb(15, 185, 177)", "rgb(69, 170, 242)", "rgb(75, 123, 236)", "rgb(165, 94, 234)", "rgb(209, 216, 224)", "rgb(119, 140, 163)", "rgb(45, 152, 218)", "rgb(56, 103, 214)", "rgb(136, 84, 208)", "rgb(165, 177, 194)", "rgb(75, 101, 132)"],
    FlatUI_Indian: ["rgb(254, 164, 127)", "rgb(37, 204, 247)", "rgb(234, 181, 67)", "rgb(85, 230, 193)", "rgb(202, 211, 200)", "rgb(249, 127, 81)", "rgb(27, 156, 252)", "rgb(248, 239, 186)", "rgb(88, 177, 159)", "rgb(44, 58, 71)", "rgb(179, 55, 113)", "rgb(59, 59, 152)", "rgb(253, 114, 114)", "rgb(154, 236, 219)", "rgb(214, 162, 232)", "rgb(109, 33, 79)", "rgb(24, 44, 97)", "rgb(252, 66, 123)", "rgb(189, 197, 129)", "rgb(130, 88, 159)"],
    FlatUI_Russian: ["rgb(243, 166, 131)", "rgb(247, 215, 148)", "rgb(119, 139, 235)", "rgb(231, 127, 103)", "rgb(207, 106, 135)", "rgb(241, 144, 102)", "rgb(245, 205, 121)", "rgb(84, 109, 229)", "rgb(225, 95, 65)", "rgb(196, 69, 105)", "rgb(120, 111, 166)", "rgb(248, 165, 194)", "rgb(99, 205, 218)", "rgb(234, 134, 133)", "rgb(89, 98, 117)", "rgb(87, 75, 144)", "rgb(247, 143, 179)", "rgb(61, 193, 211)", "rgb(230, 103, 103)", "rgb(48, 57, 82)"],
    FlatUI_Spanish: ["rgb(64, 64, 122)", "rgb(112, 111, 211)", "rgb(247, 241, 227)", "rgb(52, 172, 224)", "rgb(51, 217, 178)", "rgb(44, 44, 84)", "rgb(71, 71, 135)", "rgb(170, 166, 157)", "rgb(34, 112, 147)", "rgb(33, 140, 116)", "rgb(255, 82, 82)", "rgb(255, 121, 63)", "rgb(209, 204, 192)", "rgb(255, 177, 66)", "rgb(255, 218, 121)", "rgb(179, 57, 57)", "rgb(205, 97, 51)", "rgb(132, 129, 122)", "rgb(204, 142, 53)", "rgb(204, 174, 98)"],
    FlatUI_Swedish: ["rgb(239, 87, 119)", "rgb(87, 95, 207)", "rgb(75, 207, 250)", "rgb(52, 231, 228)", "rgb(11, 232, 129)", "rgb(245, 59, 87)", "rgb(60, 64, 198)", "rgb(15, 188, 249)", "rgb(0, 216, 214)", "rgb(5, 196, 107)", "rgb(255, 192, 72)", "rgb(255, 221, 89)", "rgb(255, 94, 87)", "rgb(210, 218, 226)", "rgb(72, 84, 96)", "rgb(255, 168, 1)", "rgb(255, 211, 42)", "rgb(255, 63, 52)", "rgb(128, 142, 155)", "rgb(30, 39, 46)"],
    FlatUI_Turkish: ["rgb(205, 132, 241)", "rgb(255, 204, 204)", "rgb(255, 77, 77)", "rgb(255, 175, 64)", "rgb(255, 250, 101)", "rgb(197, 108, 240)", "rgb(255, 184, 184)", "rgb(255, 56, 56)", "rgb(255, 159, 26)", "rgb(255, 242, 0)", "rgb(50, 255, 126)", "rgb(126, 255, 245)", "rgb(24, 220, 255)", "rgb(125, 95, 255)", "rgb(75, 75, 75)", "rgb(58, 227, 116)", "rgb(103, 230, 220)", "rgb(23, 192, 235)", "rgb(113, 88, 226)", "rgb(61, 61, 61)"]
};
var flatuiOrdinal = Object.keys(flatuiSchemes);
var ordinalCache = {};
function fetchOrdinalItem(id, colors) {
    if (!id)
        return palette_ordinal();
    var retVal = ordinalCache[id];
    if (!retVal) {
        retVal = palette_ordinal(id, colors);
        ordinalCache[id] = retVal;
    }
    return retVal;
}
function palette_ordinal(id, colors) {
    if (!id)
        return ["default"].concat(d3Ordinal.concat(brewerOrdinal).concat(hpccOrdinal).concat(flatuiOrdinal));
    var scale = null;
    if (colors) {
        scale = ordinal().range(colors);
    }
    else {
        if (d3Ordinal.indexOf(id) >= 0) {
            scale = ordinal(d3Schemes[id]);
        }
        else if (flatuiOrdinal.indexOf(id) >= 0) {
            scale = ordinal().range(flatuiSchemes[id]);
        }
        else if (hpccOrdinal.indexOf(id) >= 0) {
            var newColors = [];
            switch (id) {
                case "hpcc10":
                    var defColors = palette_ordinal("default").colors();
                    newColors = defColors.filter(function (_item, idx) {
                        if (idx % 2) {
                            return true;
                        }
                        return false;
                    });
                    break;
                case "hpcc20":
                    newColors = palette_ordinal("category10").colors().concat(palette_ordinal("hpcc10").colors());
                    break;
            }
            scale = ordinal().range(newColors);
        }
        else if (brewerOrdinal.indexOf(id) > 0) {
            var largestPalette = 12;
            while (largestPalette > 0) {
                if (m_colorbrewer[id][largestPalette]) {
                    scale = ordinal().range(m_colorbrewer[id][largestPalette]);
                    break;
                }
                --largestPalette;
            }
        }
        if (!scale) {
            //  Default to Category20  ---
            scale = ordinal(d3SchemeCategory20);
        }
        colors = scale.range();
    }
    var ordinal$1 = function (_) {
        return scale(_);
    };
    ordinal$1.type = function () {
        return "ordinal";
    };
    ordinal$1.id = function (_) {
        if (!arguments.length)
            return id;
        id = _;
        return ordinal$1;
    };
    ordinal$1.colors = function (_) {
        if (!arguments.length)
            return colors;
        colors = _;
        return ordinal$1;
    };
    ordinal$1.clone = function (newID) {
        ordinalCache[newID] = palette_ordinal(newID, this.colors());
        return ordinalCache[newID];
    };
    ordinal$1.cloneNotExists = function (newID) {
        if (ordinalCache[newID]) {
            return ordinalCache[newID];
        }
        return this.clone(newID);
    };
    ordinal$1.switch = function (_id, _colors) {
        if (id === _id) {
            return this;
        }
        return arguments.length ? fetchOrdinalItem(_id, _colors) : fetchOrdinalItem();
    };
    return ordinal$1;
}
var rainbowCache = {};
function fetchRainbowItem(id, colors, steps) {
    if (!id)
        return palette_rainbow();
    var retVal = rainbowCache[id];
    if (!retVal) {
        retVal = palette_rainbow(id, colors, steps);
        rainbowCache[id] = retVal;
    }
    return retVal;
}
function palette_rainbow(id, _colors, _steps) {
    if (!arguments.length) {
        var retVal = ["default"];
        for (var key in m_colorbrewer) {
            if (brewerOrdinal.indexOf(key) === -1) {
                retVal.push(key);
            }
        }
        return retVal;
    }
    var scale = null;
    var colors = _colors;
    var _custom = function (colors, steps) {
        steps = steps || 32;
        var subPaletteSize = Math.ceil(steps / (colors.length - 1));
        var range = [];
        var prevColor = null;
        colors.forEach(function (color) {
            if (prevColor) {
                var scale_1 = linear$2()
                    .domain([0, subPaletteSize])
                    .range([prevColor, color])
                    .interpolate(lab$1);
                for (var i = 0; i < subPaletteSize; ++i) {
                    range.push(scale_1(i));
                }
            }
            prevColor = color;
        });
        scale = quantize$1().domain([0, 100]).range(range);
        return scale;
    };
    if (_colors) {
        scale = _custom(_colors, _steps);
    }
    else {
        if (m_colorbrewer[id]) {
            var largestPalette = 12;
            while (largestPalette > 0) {
                if (m_colorbrewer[id][largestPalette]) {
                    scale = _custom(m_colorbrewer[id][largestPalette]);
                    break;
                }
                --largestPalette;
            }
        }
        if (m_d3[id]) {
            scale = sequential(m_d3[id]).domain([0, 100]);
        }
        if (!scale) {
            scale = _custom(m_colorbrewer.RdYlGn[11]);
        }
        colors = scale.range ? scale.range() : scale;
    }
    var rainbow = function (x, low, high) {
        if (low === high) {
            return scale.domain([low - 1, high + 1])(x);
        }
        return scale.domain([low, high])(x);
    };
    rainbow.type = function () {
        return "rainbow";
    };
    rainbow.id = function (_) {
        if (!arguments.length)
            return id;
        id = _;
        return rainbow;
    };
    rainbow.colors = function (_) {
        if (!arguments.length)
            return colors;
        colors = _;
        return rainbow;
    };
    rainbow.clone = function (newID) {
        rainbowCache[newID] = palette_rainbow(newID, this.colors());
        return rainbowCache[newID];
    };
    rainbow.cloneNotExists = function (newID) {
        if (rainbowCache[newID]) {
            return rainbowCache[newID];
        }
        return this.clone(newID);
    };
    rainbow.switch = function (_id, _colors) {
        if (id === _id) {
            return this;
        }
        return arguments.length ? fetchRainbowItem(_id, _colors) : fetchRainbowItem();
    };
    return rainbow;
}
function test(ordinalDivID, brewerDivID, customDivID, customArr, steps) {
    d3Select(ordinalDivID)
        .selectAll(".palette")
        .data(palette_ordinal(), function (d) { return d; })
        .enter().append("span")
        .attr("class", "palette")
        .attr("title", function (d) { return d; })
        .on("click", function (d) {
        console.log(d3Values(d.value).map(JSON.stringify).join("\n"));
    })
        .selectAll(".swatch").data(function (d) { return palette_ordinal(d).colors(); })
        .enter().append("span")
        .attr("class", "swatch")
        .style("background-color", function (d) { return d; });
    d3Select(brewerDivID)
        .selectAll(".palette")
        .data(palette_rainbow(), function (d) { return d; })
        .enter().append("span")
        .attr("class", "palette")
        .attr("title", function (d) { return d; })
        .on("click", function (d) {
        console.log(d3Values(d.value).map(JSON.stringify).join("\n"));
    })
        .selectAll(".swatch2").data(function (d) { return palette_rainbow(d).colors(); })
        .enter().append("span")
        .attr("class", "swatch2")
        .style("height", (256 / 32) + "px")
        .style("background-color", function (d) { return d; });
    var palette = { id: customArr.join("_") + steps, scale: palette_rainbow("custom", customArr, steps) };
    d3Select(customDivID)
        .selectAll(".palette")
        .data([palette], function (d) { return d.id; })
        .enter().append("span")
        .attr("class", "palette")
        .attr("title", function () { return "aaa"; /*d.from + "->" + d.to;*/ })
        .on("click", function (d) {
        console.log(d3Values(d.id).map(JSON.stringify).join("\n"));
    })
        .selectAll(".swatch2").data(function () {
        var retVal = [];
        for (var i = 0; i <= 255; ++i) {
            retVal.push(palette.scale(i, 0, 255));
        }
        return retVal;
    })
        .enter().append("span")
        .attr("class", "swatch2")
        .style("background-color", function (d) { return d; });
}
m_colorbrewer.RdWhGr = {
    3: ["red", "white", "green"]
};
var ordinal$1 = fetchOrdinalItem;
var rainbow$2 = fetchRainbowItem;
function textColor(backgroundColor) {
    var rgb$1 = rgb(backgroundColor);
    return ((rgb$1.r * 0.299 + rgb$1.g * 0.587 + rgb$1.b * 0.114) > 149) ? "black" : "white";
}

var Palette = /*#__PURE__*/Object.freeze({
    fetchOrdinalItem: fetchOrdinalItem,
    fetchRainbowItem: fetchRainbowItem,
    test: test,
    ordinal: ordinal$1,
    rainbow: rainbow$2,
    textColor: textColor
});

var css$3 = ".common_Shape{fill:#1f77b4;stroke:#1f77b4}";
styleInject(css$3);

var Shape = /** @class */ (function (_super) {
    __extends(Shape, _super);
    function Shape() {
        return _super.call(this) || this;
    }
    Shape.prototype.contains = function (point) {
        switch (this.shape()) {
            case "circle":
                return this.containsCircle(this.radius(), point);
        }
        return SVGWidget.prototype.intersection.apply(this, arguments);
    };
    Shape.prototype.intersection = function (pointA, pointB) {
        switch (this.shape()) {
            case "circle":
                return this.intersectCircle(this.radius(), pointA, pointB);
        }
        return SVGWidget.prototype.intersection.apply(this, arguments);
    };
    Shape.prototype.enter = function (domNode, element) {
        _super.prototype.enter.call(this, domNode, element);
        delete this._prevHash;
    };
    Shape.prototype.update = function (_domNode, element) {
        var _this = this;
        var shape = element.selectAll("rect,circle,ellipse,path").data([this.shape()], function (d) { return d; });
        var hash = this.hashSum();
        if (this._prevHash !== hash) {
            this._prevHash = hash;
            var context_1 = this;
            shape.enter().append(this.getShapeElementTag(this.shape()))
                .attr("class", "common_Shape")
                .each(function () {
                var element2 = d3Select(this);
                context_1._tooltipElement = element2.append("title");
            })
                .on("click", function () {
                _this.click();
            })
                .on("dblclick", function () {
                _this.dblclick();
            })
                .merge(shape)
                .style("fill", this.colorFill())
                .style("stroke", this.colorStroke())
                .each(function () {
                var element2 = d3Select(this);
                context_1._tooltipElement.text(context_1.tooltip());
                switch (context_1.shape()) {
                    case "circle":
                        var radius = context_1.radius();
                        element2
                            .attr("r", radius);
                        break;
                    case "square":
                        var width = Math.max(context_1.width(), context_1.height());
                        element2
                            .attr("x", -width / 2)
                            .attr("y", -width / 2)
                            .attr("rx", context_1.cornerRadius())
                            .attr("ry", context_1.cornerRadius())
                            .attr("width", width)
                            .attr("height", width);
                        break;
                    case "rect":
                        element2
                            .attr("x", -context_1.width() / 2)
                            .attr("y", -context_1.height() / 2)
                            .attr("rx", context_1.cornerRadius())
                            .attr("ry", context_1.cornerRadius())
                            .attr("width", context_1.width())
                            .attr("height", context_1.height());
                        break;
                    case "ellipse":
                        element2
                            .attr("rx", context_1.width() / 2)
                            .attr("ry", context_1.height() / 2);
                        break;
                    case "pin":
                        element2
                            .attr("d", context_1.pinPath());
                        break;
                }
            });
            shape.exit().remove();
        }
    };
    Shape.prototype.getShapeElementTag = function (_shape) {
        switch (_shape) {
            case "square":
                return "rect";
            case "pin":
                return "path";
        }
        return _shape;
    };
    Shape.prototype.pinPath = function () {
        var radius = this.cornerRadius();
        var arrow_h = this.arrowHeight();
        var arrow_w = this.arrowWidth();
        var width = this.width();
        var height = this.height() - arrow_h;
        var x = 0 - width / 2;
        var y = 0 - height;
        var arrow_b = (width - radius * 2 - arrow_w) / 2;
        return "M" + x + "," + y +
            "a" + -radius + "," + -radius + " 0 0 1 " + radius + "," + -radius +
            "h" + (width + -radius * 2) +
            "a" + radius + "," + radius + " 0 0 1 " + radius + "," + radius +
            "v" + (height + -radius * 2) +
            "a" + radius + "," + radius + " 0 0 1 " + -radius + "," + radius +
            "h" + -arrow_b +
            "l" + -arrow_w / 2 + "," + arrow_h +
            "l" + -arrow_w / 2 + "," + -arrow_h +
            "h" + -arrow_b +
            "a" + -radius + "," + -radius + " 0 0 1 " + -radius + "," + -radius +
            "z";
    };
    Shape.prototype.click = function () {
    };
    Shape.prototype.dblclick = function () {
    };
    return Shape;
}(SVGWidget));
Shape.prototype._class += " common_Shape";
Shape.prototype.publish("shape", "circle", "set", "Shape Type", ["circle", "square", "rect", "ellipse", "pin"], { tags: ["Private"] });
Shape.prototype.publish("width", 24, "number", "Width", null, { tags: ["Private"] });
Shape.prototype.publish("height", 24, "number", "Height", null, { tags: ["Private"] });
Shape.prototype.publish("colorStroke", null, "html-color", "Stroke Color", null, { optional: true });
Shape.prototype.publish("colorFill", null, "html-color", "Fill Color", null, { optional: true });
Shape.prototype.publish("radius", null, "number", "Radius", null, { tags: ["Private"] });
Shape.prototype.publish("cornerRadius", 3, "number", "cornerRadius");
Shape.prototype.publish("arrowHeight", 5, "number", "arrowHeight");
Shape.prototype.publish("arrowWidth", 10, "number", "arrowWidth");
Shape.prototype.publish("tooltip", "", "string", "Tooltip", null, { tags: ["Private"] });
var _origRadius = Shape.prototype.radius;
Shape.prototype.radius = function (_) {
    var retVal = _origRadius.apply(this, arguments);
    if (arguments.length) {
        this.width(_);
        this.height(_);
        return retVal;
    }
    return Math.max(this.width(), this.height()) / 2;
};

var css$4 = ".common_Icon .common_FAChar .common_Text{fill:#fff}.common_Icon .common_FAChar .common_Text,.common_Icon .common_FAChar .common_Text g,.common_Icon .common_FAChar .common_Text text,.common_Icon .common_FAChar .common_Text tspan{pointer-events:none}";
styleInject(css$4);

var Icon = /** @class */ (function (_super) {
    __extends(Icon, _super);
    function Icon() {
        var _this = _super.call(this) || this;
        _this._shapeWidget = new Shape();
        _this._faChar = new FAChar();
        return _this;
    }
    Icon.prototype.getBBox = function (refresh, round) {
        var diameter = this.diameter();
        return {
            x: -diameter / 2,
            y: -diameter / 2,
            width: diameter,
            height: diameter
        };
    };
    Icon.prototype.contains = function (point) {
        return this._shapeWidget.contains(point);
    };
    Icon.prototype.intersection = function (pointA, pointB) {
        return this._shapeWidget.intersection(pointA, pointB);
    };
    Icon.prototype.enter = function (domNode, element) {
        _super.prototype.enter.call(this, domNode, element);
        delete this._prevHash;
        this._defs = element.append("defs");
        this._defs.append("clipPath")
            .attr("id", "clip_" + this.id() + "_circle")
            .append("circle")
            .attr("x", 0)
            .attr("y", 0);
        this._defs.append("clipPath")
            .attr("id", "clip_" + this.id() + "_square")
            .append("rect");
        this._root = element.append("g");
        this._shapeWidget
            .target(this._root.node());
        this._faChar
            .target(element.node());
        this._tooltipElement = element.append("title");
        var context = this;
        element
            .on("click", function (el) {
            context.click(el);
        })
            .on("dblclick", function (el) {
            context.dblclick(el);
        });
    };
    Icon.prototype.click = function (_domNode) {
        console.log("Clicked the icon");
    };
    Icon.prototype.dblclick = function (_domNode) {
        console.log("Double clicked the icon");
    };
    Icon.prototype.update = function (domNode, element) {
        _super.prototype.update.call(this, domNode, element);
        var hash = this.hashSum();
        if (this._prevHash !== hash) {
            this._prevHash = hash;
            var diameter = this.diameter();
            var radius = diameter / 2;
            this._defs.select("circle")
                .attr("r", radius);
            this._defs.select("rect")
                .attr("x", -radius)
                .attr("y", -radius)
                .attr("width", diameter)
                .attr("height", diameter);
            this._faChar
                .fontSize(diameter * (100 - this.paddingPercent()) / 100)
                .render();
            this._shapeWidget
                .shape(this.shape())
                .width(diameter)
                .height(diameter)
                .render();
            var image = this._root.selectAll("image").data(this.imageUrl() ? [this.imageUrl()] : [], function (d) { return d; });
            image.enter()
                .append("image")
                .attr("xlink:href", this.imageUrl())
                .merge(image)
                .attr("clip-path", "url(#clip_" + this.id() + "_" + this.shape() + ")")
                .attr("x", -radius)
                .attr("y", -radius)
                .attr("width", diameter)
                .attr("height", diameter);
            if (this.shape_colorFill_exists() && !this.image_colorFill_exists()) {
                this.image_colorFill(textColor(this.shape_colorFill()));
            }
            image.exit()
                .remove();
            this._tooltipElement.text(this.tooltip());
        }
    };
    Icon.prototype.exit = function (domNode, element) {
        _super.prototype.exit.call(this, domNode, element);
        this._shapeWidget
            .target(null);
        this._faChar
            .target(null);
    };
    return Icon;
}(SVGWidget));
Icon.prototype._class += " common_Icon";
Icon.prototype.publish("shape", "circle", "set", "Shape Type", ["circle", "square"], { tags: ["Private"] });
Icon.prototype.publishProxy("faChar", "_faChar", "char");
Icon.prototype.publish("imageUrl", null, "string", "Image URL", null, { optional: true });
Icon.prototype.publishProxy("image_colorFill", "_faChar", "text_colorFill");
Icon.prototype.publish("tooltip", "", "string", "Tooltip", null, { tags: ["Private"] });
Icon.prototype.publish("diameter", 24, "number", "Diameter", null, { tags: ["Private"] });
Icon.prototype.publish("paddingPercent", 45, "number", "Padding Percent", null, { tags: ["Private"] });
Icon.prototype.publishProxy("shape_colorFill", "_shapeWidget", "colorFill");
Icon.prototype.publishProxy("shape_colorStroke", "_shapeWidget", "colorStroke");

var Entity = /** @class */ (function (_super) {
    __extends(Entity, _super);
    function Entity() {
        var _this = _super.call(this) || this;
        _this._annotationLocal = local();
        _this._background_widget = new Shape();
        _this._icon_widget = new Icon();
        _this._title_widget = new Text();
        _this._desc_widget = new Text();
        _this._annotation_widgets = {};
        return _this;
    }
    Entity.prototype.getAnnotationsBBox = function () {
        var retVal;
        for (var key in this._annotation_widgets) {
            var bbox = this._annotation_widgets[key].bbox;
            if (!retVal) {
                retVal = bbox;
            }
            else {
                retVal.x = Math.min(retVal.x, bbox.x);
                retVal.y = Math.min(retVal.y, bbox.y);
                retVal.width = Math.max(retVal.width, bbox.width);
                retVal.height = Math.max(retVal.height, bbox.height);
            }
        }
        return retVal || { x: 0, y: 0, width: 0, height: 0 };
    };
    Entity.prototype.enter = function (domNode, element) {
        var _this = this;
        _super.prototype.enter.call(this, domNode, element);
        element
            .on("mouseover", function () {
            element.classed("hovering", true);
            _this.render();
        })
            .on("mouseout", function () {
            element.classed("hovering", false);
            _this.render();
        });
        this._element_background = element.append("g").attr("class", "entity_shape");
        this._element_icon = element.append("g").attr("class", "entity_icon");
        this._element_title = element.append("g").attr("class", "entity_title");
        this._element_desc = element.append("g").attr("class", "entity_desc");
        this._element_anno = element.append("g").attr("class", "entity_anno");
        this._background_widget
            .target(this._element_background.node());
        this._icon_widget
            .shape_colorFill("none")
            .shape_colorStroke("none")
            .target(this._element_icon.node());
        this._title_widget
            .target(this._element_title.node());
        this._desc_widget
            .target(this._element_desc.node());
    };
    Entity.prototype.update = function (domNode, element) {
        _super.prototype.update.call(this, domNode, element);
        this._desc_widget
            .fontSize(this.descriptionFontSize());
        var context = this;
        this._annotation_widgets = {};
        var annoXPos = 0;
        var annotations = this._element_anno.selectAll(".annotation").data(this.annotationIcons().slice().reverse());
        annotations.enter().append("g")
            .attr("class", "annotation")
            .each(function (d, idx) {
            var anno = new Icon()
                .diameter(context.annotationDiameter())
                .paddingPercent(context.annotationPaddingPercent())
                .target(this)
                .shape("square");
            context._annotationLocal.set(this, anno);
        })
            .merge(annotations)
            .each(function (d, idx) {
            var anno = context._annotationLocal.get(this);
            if (typeof d.faChar !== "undefined")
                anno.faChar(d.faChar);
            if (typeof d.shape !== "undefined")
                anno.shape(d.shape);
            if (typeof d.image_colorFill !== "undefined")
                anno.image_colorFill(d.image_colorFill);
            if (typeof d.shape_colorFill !== "undefined")
                anno.shape_colorFill(d.shape_colorFill);
            if (typeof d.shape_colorStroke !== "undefined")
                anno.shape_colorStroke(d.shape_colorStroke);
            var annoDiam = anno.diameter();
            anno
                .x(annoXPos - annoDiam)
                .y(annoDiam / 2)
                .render();
            annoXPos -= annoDiam + context.annotationSpacing();
            context._annotation_widgets[idx] = {
                widget: anno,
                bbox: anno.getBBox(true)
            };
        });
        annotations.exit()
            .each(function (d, idx) {
            var anno = context._annotationLocal.get(this);
            anno.target(null);
        })
            .remove();
    };
    Entity.prototype.exit = function (domNode, element) {
        this._desc_widget.target(null);
        this._title_widget.target(null);
        this._icon_widget.target(null);
        this._background_widget.target(null);
        _super.prototype.exit.call(this, domNode, element);
    };
    Entity.prototype.moveAnnotations = function (x_offset, y_offset) {
        this._element_anno.attr("transform", "translate(" + x_offset + ", " + y_offset + ")");
    };
    Entity.prototype.render = function (callback) {
        var _this = this;
        return _super.prototype.render.call(this, function (w) {
            _this._background_widget.render();
            _this._icon_widget.render();
            _this._title_widget.render();
            _this._desc_widget.render();
            if (callback) {
                callback(w);
            }
        });
    };
    return Entity;
}(SVGWidget));
Entity.prototype._class += " common_Entity";
Entity.prototype.publish("padding", 8, "number", "padding");
Entity.prototype.publish("annotationPaddingPercent", 38, "number", "annotationPaddingPercent");
Entity.prototype.publish("annotationDiameter", 14, "number", "Annotation Diameter");
Entity.prototype.publish("annotationIcons", [], "array", "annotationIcons"); // TODO: is this really used?
Entity.prototype.publish("annotationSpacing", 3, "number", "annotationSpacing");
Entity.prototype.publishProxy("icon", "_icon_widget", "faChar");
Entity.prototype.publishProxy("iconColor", "_icon_widget", "image_colorFill");
Entity.prototype.publishProxy("iconDiameter", "_icon_widget", "diameter");
Entity.prototype.publishProxy("iconPaddingPercent", "_icon_widget", "paddingPercent");
Entity.prototype.publishProxy("title", "_title_widget", "text");
Entity.prototype.publishProxy("titleColor", "_title_widget", "colorFill");
Entity.prototype.publishProxy("titleFontFamily", "_title_widget", "fontFamily");
Entity.prototype.publishProxy("titleFontSize", "_title_widget", "fontSize");
Entity.prototype.publishProxy("description", "_desc_widget", "text");
Entity.prototype.publishProxy("descriptionColor", "_desc_widget", "colorFill");
Entity.prototype.publishProxy("descriptionFontFamily", "_desc_widget", "fontFamily");
Entity.prototype.publishProxy("descriptionFontSize", "_desc_widget", "fontSize");
Entity.prototype.publishProxy("backgroundShape", "_background_widget", "shape");
Entity.prototype.publishProxy("backgroundColorFill", "_background_widget", "colorFill");
Entity.prototype.publishProxy("backgroundColorStroke", "_background_widget", "colorStroke");
Entity.prototype.publishProxy("cornerRadius", "_background_widget");
Entity.prototype.publishProxy("arrowHeight", "_background_widget");
Entity.prototype.publishProxy("arrowWidth", "_background_widget");

var EntityCard = /** @class */ (function (_super) {
    __extends(EntityCard, _super);
    function EntityCard() {
        return _super.call(this) || this;
    }
    EntityCard.prototype.enter = function (domNode, element) {
        _super.prototype.enter.call(this, domNode, element);
    };
    EntityCard.prototype.update = function () {
        _super.prototype.update.apply(this, arguments);
        this._icon_widget.render();
        this._title_widget.render();
        this._desc_widget.render();
        var icon_bbox = this._icon_widget.getBBox(true);
        var title_bbox = this._title_widget.getBBox(true);
        var desc_bbox = this._desc_widget.getBBox(true);
        var anno_w = 0;
        var anno_h = 0;
        var anno_gap = this.annotationSpacing();
        for (var _i = 0, _a = Object.keys(this._annotation_widgets); _i < _a.length; _i++) {
            var i = _a[_i];
            anno_w += this._annotation_widgets[i].bbox.width + anno_gap;
            anno_h = anno_h > this._annotation_widgets[i].bbox.height ? anno_h : this._annotation_widgets[i].bbox.height;
        }
        var _background_h = this.fixedHeight() !== null ? this.fixedHeight() : Math.max(title_bbox.height + desc_bbox.height + (this.padding() * 3), anno_h + icon_bbox.height + (this.padding() * 3));
        var _background_w = this.fixedWidth() !== null ? this.fixedWidth() : Math.max(title_bbox.width + icon_bbox.width + (this.padding() * 3), anno_w + desc_bbox.width + (this.padding() * 3));
        this._background_widget
            .height(_background_h)
            .width(_background_w);
        this._title_widget.move({
            x: -(_background_w / 2) + (title_bbox.width / 2) + this.padding(),
            y: -(_background_h / 2) + (title_bbox.height / 2) + this.padding()
        });
        this._icon_widget.move({
            x: (_background_w / 2) - (icon_bbox.width / 2) - this.padding(),
            y: -(_background_h / 2) + (icon_bbox.height / 2) + this.padding()
        });
        this._desc_widget.move({
            x: -(_background_w / 2) + (desc_bbox.width / 2) + this.padding(),
            y: (_background_h / 2) - (desc_bbox.height / 2) - this.padding()
        });
        this.moveAnnotations((_background_w / 2), (_background_h / 2) - anno_h - this.padding());
    };
    return EntityCard;
}(Entity));
EntityCard.prototype._class += " common_EntityCard";
EntityCard.prototype.publish("fixedWidth", null, "number", "fixedWidth");
EntityCard.prototype.publish("fixedHeight", null, "number", "fixedHeight");

var EntityPin = /** @class */ (function (_super) {
    __extends(EntityPin, _super);
    function EntityPin() {
        return _super.call(this) || this;
    }
    EntityPin.prototype.enter = function (domNode, element) {
        _super.prototype.enter.call(this, domNode, element);
    };
    EntityPin.prototype.update = function (domNode, element) {
        _super.prototype.update.apply(this, arguments);
        var is_hovering = element.classed("hovering");
        this._icon_widget.render();
        this._desc_widget.render();
        this._title_widget.render();
        var title_bbox = !this.titleOnlyShowOnHover() || is_hovering ? this._title_widget.getBBox(true) : { height: 0, width: 0 };
        var icon_bbox = !this.iconOnlyShowOnHover() || is_hovering ? this._icon_widget.getBBox(true) : { height: 0, width: 0 };
        var desc_bbox = !this.descriptionOnlyShowOnHover() || is_hovering ? this._desc_widget.getBBox(true) : { height: 0, width: 0 };
        var _anno_h = !this.annotationOnlyShowOnHover() || is_hovering ? this.annotationIcons().length > 0 ? this.annotationDiameter() + this.padding() : 0 : 0;
        var background_bbox = this.calcBackgroundBBox(is_hovering, title_bbox, icon_bbox, desc_bbox, _anno_h);
        this._title_widget.display(!this.titleOnlyShowOnHover() || is_hovering);
        this._icon_widget.display(!this.iconOnlyShowOnHover() || is_hovering);
        this._desc_widget.display(!this.descriptionOnlyShowOnHover() || is_hovering);
        this._background_widget
            .height(background_bbox.height)
            .width(background_bbox.width);
        var icon_y = -background_bbox.height + icon_bbox.height + (this.padding() / 2);
        var title_y = icon_y + (icon_bbox.height / 2) + (title_bbox.height / 2) + this.padding();
        var desc_y = title_y + (title_bbox.height / 2) + (desc_bbox.height / 2) + this.padding();
        var anno_y = desc_y + (desc_bbox.height / 2) + this.padding();
        this._title_widget.move({
            x: 0,
            y: title_y
        });
        this._desc_widget.move({
            x: 0,
            y: desc_y
        });
        this._icon_widget.move({
            x: 0,
            y: icon_y
        });
        this.moveAnnotations(background_bbox.width / 2, anno_y);
    };
    EntityPin.prototype.calcHeight = function () {
        var is_hovering = true;
        this._icon_widget.render();
        this._desc_widget.render();
        this._title_widget.render();
        var title_bbox = !this.titleOnlyShowOnHover() || is_hovering ? this._title_widget.getBBox(true) : { height: 0, width: 0 };
        var icon_bbox = !this.iconOnlyShowOnHover() || is_hovering ? this._icon_widget.getBBox(true) : { height: 0, width: 0 };
        var desc_bbox = !this.descriptionOnlyShowOnHover() || is_hovering ? this._desc_widget.getBBox(true) : { height: 0, width: 0 };
        var _anno_h = !this.annotationOnlyShowOnHover() || is_hovering ? this.annotationIcons().length > 0 ? this.annotationDiameter() + this.padding() : 0 : 0;
        var background_bbox = this.calcBackgroundBBox(is_hovering, title_bbox, icon_bbox, desc_bbox, _anno_h);
        return background_bbox.height;
    };
    EntityPin.prototype.calcBackgroundBBox = function (is_hovering, title_bbox, icon_bbox, desc_bbox, _anno_h) {
        var content_width = Math.max(title_bbox.width, icon_bbox.width, desc_bbox.width);
        var background_bbox = {
            width: content_width + (this.padding() * 2),
            height: icon_bbox.height + title_bbox.height + _anno_h + this.arrowHeight() + desc_bbox.height + (this.padding() * 5)
        };
        var remove_padding = 0;
        if (this.titleOnlyShowOnHover() && !is_hovering) {
            remove_padding += this.padding();
        }
        if (this.iconOnlyShowOnHover() && !is_hovering) {
            remove_padding += this.padding();
        }
        if (this.descriptionOnlyShowOnHover() && !is_hovering) {
            remove_padding += this.padding();
        }
        if (this.annotationIcons().length === 0 || this.annotationOnlyShowOnHover() && !is_hovering) {
            remove_padding += this.padding();
        }
        background_bbox.height -= remove_padding;
        return background_bbox;
    };
    return EntityPin;
}(Entity));
EntityPin.prototype._class += " common_EntityPin";
EntityPin.prototype.publish("titleOnlyShowOnHover", false, "boolean", "titleOnlyShowOnHover");
EntityPin.prototype.publish("iconOnlyShowOnHover", false, "boolean", "iconOnlyShowOnHover");
EntityPin.prototype.publish("descriptionOnlyShowOnHover", false, "boolean", "descriptionOnlyShowOnHover");
EntityPin.prototype.publish("annotationOnlyShowOnHover", false, "boolean", "annotationOnlyShowOnHover");

var css$5 = ".common_EntityRectList .entityRectItem{margin:6px;border-radius:8px;border:2px solid \"black\"}.common_EntityRectList .entityRectItem rect{stroke-width:4px;shape-rendering:geometricPrecision}.common_EntityRect .entity_shape>g>rect{shape-rendering:geometricPrecision}";
styleInject(css$5);

var EntityRect = /** @class */ (function (_super) {
    __extends(EntityRect, _super);
    function EntityRect() {
        return _super.call(this) || this;
    }
    EntityRect.prototype.enter = function (domNode, element) {
        _super.prototype.enter.call(this, domNode, element);
    };
    EntityRect.prototype.update = function (domNode, element) {
        this._desc_widget.text("");
        _super.prototype.update.call(this, domNode, element);
    };
    EntityRect.prototype.render = function (callback) {
        var _this = this;
        return _super.prototype.render.call(this, function (w) {
            var icon_bbox = w.icon() === "" ? { width: 0, height: 0 } : _this._icon_widget.getBBox(true);
            var title_bbox = _this._title_widget.getBBox(true);
            var annotations_bbox = _this.getAnnotationsBBox();
            var width = _this.fixedWidth();
            if (!width) {
                width = icon_bbox.width + title_bbox.width + annotations_bbox.width + _this.padding() * 4;
            }
            var height = _this.fixedHeight();
            if (!height) {
                height = Math.max(icon_bbox.height, title_bbox.height, annotations_bbox.height) + _this.padding() * 2;
            }
            _this._background_widget
                .width(width)
                .height(height)
                .render();
            _this._icon_widget.move({
                x: -(width / 2) + (icon_bbox.width),
                y: 0
            });
            _this.moveAnnotations(width / 2, -annotations_bbox.height / 2);
            var iconWidth = icon_bbox.width > 0 ? icon_bbox.width + _this.padding() : 0;
            var titleX = -(width / 2) + iconWidth + _this.padding();
            var annoWidth = _this.padding() / 2 + annotations_bbox.width + _this.padding();
            var titleW = width - iconWidth - annoWidth;
            _this._title_widget
                .move({
                x: titleX,
                y: 0
            })
                .anchor("start")
                .width(titleW)
                .render();
            if (callback) {
                callback(w);
            }
        });
    };
    return EntityRect;
}(Entity));
EntityRect.prototype._class += " common_EntityRect";
EntityRect.prototype.publish("fixedWidth", null, "number", "fixedWidth");
EntityRect.prototype.publish("fixedHeight", null, "number", "fixedHeight");
var EntityRectList = /** @class */ (function (_super) {
    __extends(EntityRectList, _super);
    function EntityRectList() {
        var _this = _super.call(this) || this;
        _this._enityRectLocal = local();
        SimpleSelectionMixin.call(_this, true);
        return _this;
    }
    EntityRectList.prototype.entityRectData = function () {
        var _this = this;
        var columns = this.columns();
        var idxColumns = [
            "backgroundColor",
            "borderColor",
            "icon",
            "iconColor",
            "title",
            "titleColor",
            "description",
            "descriptionColor"
        ];
        var idxs = idxColumns.map(function (idxColumn) { return columns.indexOf(_this[idxColumn + "Column"]()); });
        return this.data().map(function (row) {
            var retVal = {
                origRow: row
            };
            for (var i = 0; i < idxColumns.length; ++i) {
                retVal[idxColumns[i]] = idxs[i] >= 0 ? row[idxs[i]] : typeof _this["" + idxColumns[i]] === "function" ? _this["" + idxColumns[i]]() : "";
            }
            return retVal;
        }, this);
    };
    EntityRectList.prototype.enter = function (domNode, element) {
        _super.prototype.enter.call(this, domNode, element);
        d3Select(domNode.parentNode)
            .style("overflow-x", "hidden")
            .style("overflow-y", "scroll");
        this._selection.widgetElement(element);
    };
    EntityRectList.prototype.update = function (domNode, element) {
        _super.prototype.update.call(this, domNode, element);
        var context = this;
        var margin = { left: 8, top: 8, right: 8, bottom: 8 };
        var width = this.width() - margin.left - margin.right - 20; //  -20 for VScroll (could do better)
        var height = this.fixedHeight() - margin.top - margin.bottom;
        var svg = element.selectAll("svg").data(this.entityRectData());
        svg.enter().append("svg")
            .attr("class", "entityRectItem")
            .call(this._selection.enter.bind(this._selection))
            .on("click", function (d) {
            context.click(context.rowToObj(d.origRow), context.titleColumn(), context._selection.selected(this));
        })
            .on("dblclick", function (d) {
            context.dblclick(context.rowToObj(d.origRow), context.titleColumn(), context._selection.selected(this));
        })
            .each(function () {
            var entityRect = new EntityRect()
                .target(this);
            context._enityRectLocal.set(this, entityRect);
        })
            .merge(svg)
            .style("border-color", function (d) { return d.borderColor; })
            .each(function (d) {
            context._enityRectLocal.get(this)
                .pos({ x: width / 2, y: height / 2 })
                .resize({ width: width, height: height })
                .fixedWidth(width)
                .fixedHeight(height)
                .backgroundShape("rect")
                .backgroundColorFill(d.backgroundColor)
                .backgroundColorStroke("none")
                .icon(d.icon)
                .iconColor(d.iconColor)
                .iconDiameter(height / 2.6666)
                .iconPaddingPercent(0)
                .title(d.title)
                .titleFontSize(height / 2.6666)
                .titleColor(d.titleColor)
                .description(d.description)
                .descriptionColor(d.descriptionColor)
                .render();
        });
        svg.exit().remove();
    };
    EntityRectList.prototype.exit = function (domNode, element) {
        _super.prototype.exit.call(this, domNode, element);
    };
    //  Events ---
    EntityRectList.prototype.click = function (row, column, selected) {
        console.log("Click:  " + JSON.stringify(row) + ", " + column + "," + selected);
    };
    EntityRectList.prototype.dblclick = function (row, column, selected) {
        console.log("Double click:  " + JSON.stringify(row) + ", " + column + "," + selected);
    };
    EntityRectList.__inputs = [{
            id: "borderColor",
            type: "string"
        }, {
            id: "icon",
            type: "string"
        }, {
            id: "iconColor",
            type: "string"
        }, {
            id: "title",
            type: "string"
        }];
    __decorate([
        publish(64, "number", "fixedHeight"),
        __metadata("design:type", Function)
    ], EntityRectList.prototype, "fixedHeight", void 0);
    __decorate([
        publish("#f8f8f8", "string", "Default Background Color", null, { inputType: "html-color" }),
        __metadata("design:type", Function)
    ], EntityRectList.prototype, "backgroundColor", void 0);
    __decorate([
        publish(null, "set", "Background Color Column", function () { return this.columns(); }, { optional: true }),
        __metadata("design:type", Function)
    ], EntityRectList.prototype, "backgroundColorColumn", void 0);
    __decorate([
        publish("black", "string", "Default Border Color", null, { inputType: "html-color" }),
        __metadata("design:type", Function)
    ], EntityRectList.prototype, "borderColor", void 0);
    __decorate([
        publish(null, "set", "Border Color Column", function () { return this.columns(); }, { optional: true }),
        __metadata("design:type", Function)
    ], EntityRectList.prototype, "borderColorColumn", void 0);
    __decorate([
        publish("", "string", "Icon"),
        __metadata("design:type", Function)
    ], EntityRectList.prototype, "icon", void 0);
    __decorate([
        publish(null, "set", "Icon Column", function () { return this.columns(); }, { optional: true }),
        __metadata("design:type", Function)
    ], EntityRectList.prototype, "iconColumn", void 0);
    __decorate([
        publish("red", "string", "Default Icon Color", null, { inputType: "html-color" }),
        __metadata("design:type", Function)
    ], EntityRectList.prototype, "iconColor", void 0);
    __decorate([
        publish(null, "set", "Icon Color Column ", function () { return this.columns(); }, { optional: true }),
        __metadata("design:type", Function)
    ], EntityRectList.prototype, "iconColorColumn", void 0);
    __decorate([
        publish(null, "set", "Title Column", function () { return this.columns(); }, { optional: true }),
        __metadata("design:type", Function)
    ], EntityRectList.prototype, "titleColumn", void 0);
    __decorate([
        publish("black", "string", "Default Title Color", null, { inputType: "html-color" }),
        __metadata("design:type", Function)
    ], EntityRectList.prototype, "titleColor", void 0);
    __decorate([
        publish(null, "set", "Title Color Column ", function () { return this.columns(); }, { optional: true }),
        __metadata("design:type", Function)
    ], EntityRectList.prototype, "titleColorColumn", void 0);
    __decorate([
        publish(null, "set", "Description Column", function () { return this.columns(); }, { optional: true }),
        __metadata("design:type", Function)
    ], EntityRectList.prototype, "descriptionColumn", void 0);
    __decorate([
        publish("black", "string", "Default Description Color", null, { inputType: "html-color" }),
        __metadata("design:type", Function)
    ], EntityRectList.prototype, "descriptionColor", void 0);
    __decorate([
        publish(null, "set", "Description Color Column ", function () { return this.columns(); }, { optional: true }),
        __metadata("design:type", Function)
    ], EntityRectList.prototype, "descriptionColorColumn", void 0);
    return EntityRectList;
}(HTMLWidget));
EntityRectList.prototype._class += " common_EntityRectList";

var css$6 = ".common_TextBox .common_Shape{fill:#dcf1ff;stroke:#1f77b4}";
styleInject(css$6);

var TextBox = /** @class */ (function (_super) {
    __extends(TextBox, _super);
    function TextBox() {
        var _this = _super.call(this) || this;
        _this._shape = new Shape()
            .shape("rect")
            .on("click", function () {
            _this.click();
        })
            .on("dblclick", function () {
            _this.dblclick();
        });
        _this._text = new Text()
            .on("click", function () {
            _this.click();
        })
            .on("dblclick", function () {
            _this.dblclick();
        });
        return _this;
    }
    TextBox.prototype.padding = function (_) {
        this.paddingLeft(_);
        this.paddingRight(_);
        this.paddingTop(_);
        this.paddingBottom(_);
        return this;
    };
    TextBox.prototype.getTextX = function (width) {
        switch (this.anchor()) {
            case "start":
                return -width / 2;
            case "end":
                return width / 2;
        }
        return 0;
    };
    TextBox.prototype.getBBox = function (refresh, round) {
        var textBBox = this._text.getBBox(true);
        var width = this.fixedSize() ? this.fixedSize().width : textBBox.width + this.paddingLeft() + this.paddingRight();
        var height = this.fixedSize() ? this.fixedSize().height : textBBox.height + this.paddingTop() + this.paddingBottom();
        return {
            x: -width - 2,
            y: -height - 2,
            width: width,
            height: height
        };
    };
    TextBox.prototype.enter = function (domNode, element) {
        _super.prototype.enter.call(this, domNode, element);
        delete this._prevHash;
        this._shape
            .target(domNode)
            .tooltip(this.tooltip());
        this._text
            .target(domNode);
    };
    TextBox.prototype.update = function (domNode, element) {
        _super.prototype.update.call(this, domNode, element);
        var hash = this.hashSum();
        if (this._prevHash !== hash) {
            this._prevHash = hash;
            var textBBox = this._text.getBBox(true);
            var size = {
                width: this.fixedSize() ? this.fixedSize().width : textBBox.width + this.paddingLeft() + this.paddingRight(),
                height: this.fixedSize() ? this.fixedSize().height : textBBox.height + this.paddingTop() + this.paddingBottom()
            };
            this._shape
                .width(size.width)
                .height(size.height)
                .render();
            this._text
                .x(this.getTextX(textBBox.width))
                .colorFill_default(this._shape.colorFill_exists() ? textColor(this._shape.colorFill()) : undefined)
                .render();
            if (this.fixedSize()) {
                switch (this.anchor()) {
                    case "start":
                        this._text
                            .x(-this.fixedSize().width / 2 + textBBox.width / 2 + (this.paddingLeft() + this.paddingRight()) / 2)
                            .render();
                        break;
                    case "end":
                        this._text
                            .x(this.fixedSize().width / 2 - textBBox.width / 2 - (this.paddingLeft() + this.paddingRight()) / 2)
                            .render();
                        break;
                }
            }
            this._text.visible(textBBox.width <= size.width && textBBox.height <= size.height);
        }
    };
    TextBox.prototype.exit = function (domNode, element) {
        this._shape
            .target(null);
        this._text
            .target(null);
        _super.prototype.exit.call(this, domNode, element);
    };
    TextBox.prototype.click = function () {
    };
    TextBox.prototype.dblclick = function () {
    };
    return TextBox;
}(SVGWidget));
TextBox.prototype._class += " common_TextBox";
TextBox.prototype.publishProxy("text", "_text");
TextBox.prototype.publishProxy("fontSize", "_text", "fontSize");
TextBox.prototype.publishProxy("shape_colorStroke", "_shape", "colorStroke");
TextBox.prototype.publishProxy("shape_colorFill", "_shape", "colorFill");
TextBox.prototype.publishProxy("text_colorFill", "_text", "colorFill");
TextBox.prototype.publish("paddingLeft", 4, "number", "Left padding (in pixels)", null, { tags: ["Private"] });
TextBox.prototype.publish("paddingRight", 4, "number", "Right padding (in pixels)", null, { tags: ["Private"] });
TextBox.prototype.publish("paddingTop", 4, "number", "Top padding (in pixels)", null, { tags: ["Private"] });
TextBox.prototype.publish("paddingBottom", 4, "number", "Bottom padding (in pixels)", null, { tags: ["Private"] });
TextBox.prototype.publishProxy("anchor", "_text");
TextBox.prototype.publish("fixedSize", null);
TextBox.prototype.publish("tooltip", "", "string", "Tooltip", null, { tags: ["Private"] });

var EntityVertex = /** @class */ (function (_super) {
    __extends(EntityVertex, _super);
    function EntityVertex() {
        var _this = _super.call(this) || this;
        _this._textbox_widget = new TextBox();
        return _this;
    }
    EntityVertex.prototype.enter = function (domNode, element) {
        this._element_textbox = element.append("g").attr("class", "entity_textbox");
        _super.prototype.enter.call(this, domNode, element);
        this._textbox_widget.target(this._element_textbox.node());
    };
    EntityVertex.prototype.update = function () {
        _super.prototype.update.apply(this, arguments);
        this._textbox_widget
            .text(this._title_widget.text());
        this._icon_widget
            .shape_colorFill(this.iconColorFill())
            .shape_colorStroke(this.iconColorStroke());
        this._background_widget
            .colorFill("none")
            .colorStroke("none");
        this._icon_widget.render();
        this._textbox_widget.render();
        var icon_bbox = this._icon_widget.getBBox(true);
        var text_bbox = this._textbox_widget.getBBox(true);
        var _icon_x = 0;
        var _icon_y = -(text_bbox.height / 2) - (icon_bbox.height / 3);
        switch (this.iconAnchor()) {
            case "start":
                _icon_x = -(text_bbox.width / 2) + (icon_bbox.width / 3);
                break;
            case "end":
                _icon_x = (text_bbox.width / 2) - (icon_bbox.width / 3);
                break;
            case "left":
                _icon_x = -(text_bbox.width / 2) - (icon_bbox.width / 2);
                _icon_y = 0;
                break;
        }
        this._icon_widget.move({
            x: _icon_x,
            y: _icon_y
        });
        this.moveAnnotations(text_bbox.width / 2, text_bbox.height / 2);
    };
    EntityVertex.prototype.exit = function (domNode, element) {
        this._textbox_widget.target(null);
        _super.prototype.exit.call(this, domNode, element);
    };
    return EntityVertex;
}(Entity));
EntityVertex.prototype._class += " common_EntityVertex";
EntityVertex.prototype.publish("iconAnchor", "start", "set", "Horizontal anchor position of icon", ["", "start", "middle", "end", "left"]);
EntityVertex.prototype.publish("iconColorFill", null, "html-color", "iconColorFill");
EntityVertex.prototype.publish("iconColorStroke", null, "html-color", "iconColorStroke");
EntityVertex.prototype.publishProxy("textboxColorStroke", "_textbox_widget", "shape_colorStroke");
EntityVertex.prototype.publishProxy("textboxColorFill", "_textbox_widget", "shape_colorFill");
EntityVertex.prototype.publishProxy("textboxFontColor", "_textbox_widget", "text_colorFill");

var Image$1 = /** @class */ (function (_super) {
    __extends(Image, _super);
    function Image() {
        return _super.call(this) || this;
    }
    Image.prototype.enter = function (domNode, element) {
        _super.prototype.enter.call(this, domNode, element);
    };
    Image.prototype.update = function (domNode, element) {
        _super.prototype.update.call(this, domNode, element);
        var context = this;
        var img = element.selectAll("img").data(this.source() ? [this.source()] : [], function (d) { return d; });
        img.enter()
            .append("img")
            .attr("src", this.source())
            .style("opacity", 0)
            .on("load", function () {
            context._imgElement = d3Select(this);
            context.styleImageElement();
            context._imgElement.style("opacity", 1);
        });
        this.styleImageElement();
        img.exit()
            .remove();
    };
    Image.prototype.styleImageElement = function () {
        if (!this._imgElement)
            return;
        switch (this.sizing()) {
            case "actual":
                this._imgElement.style("width", "auto");
                this._imgElement.style("height", "auto");
                break;
            case "fit":
                if (this.lockAspectRatio()) {
                    this._imgElement.style("width", "auto");
                    this._imgElement.style("height", "auto");
                    var bbox = this._imgElement.node().getBoundingClientRect();
                    var xScale = bbox.width / this.width();
                    var yScale = bbox.height / this.height();
                    if (xScale > yScale) {
                        this._imgElement.style("width", this.width() + "px");
                        this._imgElement.style("height", (bbox.height / xScale) + "px");
                    }
                    else {
                        this._imgElement.style("width", (bbox.width / yScale) + "px");
                        this._imgElement.style("height", this.height() + "px");
                    }
                }
                else {
                    this._imgElement.style("width", this.width() + "px");
                    this._imgElement.style("height", this.height() + "px");
                }
                break;
            case "custom":
                this._imgElement.style("width", this.customWidth());
                this._imgElement.style("height", this.customHeight());
                break;
        }
        switch (this.alignment()) {
            case "origin":
                break;
            case "center":
                var bbox = this._imgElement.node().getBoundingClientRect();
                this._imgElement.style("margin-left", (this.width() - bbox.width) / 2 + "px");
                this._imgElement.style("margin-top", (this.height() - bbox.height) / 2 + "px");
                break;
        }
    };
    Image.prototype.exit = function (domNode, element) {
        _super.prototype.exit.call(this, domNode, element);
    };
    return Image;
}(HTMLWidget));
Image$1.prototype._class += " common_Image";
Image$1.prototype.publish("source", null, "string", "Image Source", null, { tags: ["Basic"] });
Image$1.prototype.publish("sizing", "actual", "set", "Controls sizing mode", ["actual", "fit", "custom"], { tags: ["Basic"] });
Image$1.prototype.publish("customWidth", "50%", "string", "Applies this width to IMG element if 'sizing' is set to 'custom' (user should set 'px' or 'em' etc.)", null, { tags: ["Basic"], disable: function (w) { return w.sizing() !== "custom"; } });
Image$1.prototype.publish("customHeight", "20%", "string", "Applies this height to IMG element if 'sizing' is set to 'custom' (user should set 'px' or 'em' etc.)", null, { tags: ["Basic"], disable: function (w) { return w.sizing() !== "custom"; } });
Image$1.prototype.publish("lockAspectRatio", true, "boolean", "Locks the aspect ratio when scaling/stretching", null, { tags: ["Basic"], disable: function (w) { return w.sizing() !== "fit"; } });
Image$1.prototype.publish("alignment", "center", "set", "Image Alignment", ["center", "origin"], { tags: ["Basic"] });

var css$7 = ".common_List .common_TextBox .common_Shape{fill:#dcf1ff;stroke:#dcf1ff}.common_List .common_TextBox .common_Text{pointer-events:none}.common_List .common_TextBox .common_Shape:hover{fill:#fff;stroke:#fff}";
styleInject(css$7);

var List = /** @class */ (function (_super) {
    __extends(List, _super);
    function List() {
        var _this = _super.call(this) || this;
        _this._listWidgets = {};
        return _this;
    }
    List.prototype.update = function (domNode, element) {
        _super.prototype.update.call(this, domNode, element);
        var context = this;
        var line = element.selectAll(".line").data(this.data(), function (d) { return d; });
        var lineEnter = line.enter().append("g")
            .attr("class", "line")
            .each(function (d) {
            var newTextBox = new TextBox()
                .target(this)
                .paddingTop(0)
                .paddingBottom(0)
                .paddingLeft(8)
                .paddingRight(8)
                .text(d)
                .render();
            newTextBox.element()
                .on("click", function (d2) {
                context.click(d2.text());
            })
                .on("dblclick", function (d2) {
                context.dblclick(d2.text());
            });
            context._listWidgets[d] = newTextBox;
        });
        var listHeight = 0;
        var listWidth = 0;
        for (var key in this._listWidgets) {
            if (!this._listWidgets.hasOwnProperty(key))
                continue;
            var bbox = this._listWidgets[key].getBBox();
            listHeight += bbox.height;
            if (listWidth < bbox.width)
                listWidth = bbox.width;
        }
        var yPos = -listHeight / 2; // + lineHeight / 2;
        lineEnter.merge(line).each(function (d) {
            var widget = context._listWidgets[d];
            var bbox = widget.getBBox();
            widget
                .pos({ x: 0, y: yPos + bbox.height / 2 })
                .anchor(context.anchor())
                .fixedSize({ width: listWidth, height: bbox.height })
                .render();
            yPos += bbox.height;
        });
        line.exit()
            .remove()
            .each(function (d) {
            context._listWidgets[d].target(null);
            delete context._listWidgets[d];
        });
    };
    List.prototype.exit = function (domNode, element) {
        for (var key in this._listWidgets) {
            if (this._listWidgets.hasOwnProperty(key)) {
                this._listWidgets[key].target(null);
            }
        }
        _super.prototype.exit.call(this, domNode, element);
    };
    //  Events  ---
    List.prototype.click = function (d) {
        console.log("Click:  " + d);
    };
    List.prototype.dblclick = function (d) {
        console.log("Double click:  " + d);
    };
    return List;
}(SVGWidget));
List.prototype._class += " common_List";
List.prototype.publish("anchor", "start", "set", "Anchor Position", ["", "start", "middle", "end"], { tags: ["Private"] });

var css$8 = ".common_Menu .common_FAChar{fill:#fff;cursor:pointer}.common_Menu.disabled .common_FAChar{visibility:hidden;cursor:inherit}.common_Menu .common_List .common_TextBox .common_Shape{fill:#1f77b4;stroke:#1f77b4}.common_Menu .common_List .common_TextBox .common_Text{fill:#fff}.common_Menu .common_List .common_TextBox .common_Shape:hover{fill:#ff7f0e;stroke:#ff7f0e}";
styleInject(css$8);

var Menu = /** @class */ (function (_super) {
    __extends(Menu, _super);
    function Menu() {
        var _this = _super.call(this) || this;
        _this._icon = new Icon().shape("square").diameter(14).paddingPercent(0);
        _this._list = new List();
        var context = _this;
        _this._list.click = function (d) {
            event.stopPropagation();
            context.hideMenu();
            context.click(d);
        };
        _this._open = false;
        return _this;
    }
    Menu.prototype.toggleMenu = function () {
        if (!this._open) {
            this.showMenu();
        }
        else {
            this.hideMenu();
        }
    };
    Menu.prototype.showMenu = function () {
        this.preShowMenu();
        this._open = true;
        this._list
            .data(this.data())
            .render();
        var bbox = this._icon.getBBox(true);
        var menuBBox = this._list.getBBox(true);
        var pos = {
            x: bbox.width / 2 - menuBBox.width / 2,
            y: bbox.height / 2 + menuBBox.height / 2
        };
        this._list
            .move(pos);
        var context = this;
        d3Select("body")
            .on("click." + this._id, function () {
            console.log("click:  body - " + context._id);
            if (context._open) {
                context.hideMenu();
            }
        });
    };
    Menu.prototype.hideMenu = function () {
        d3Select("body")
            .on("click." + this._id, null);
        this._open = false;
        this._list
            .data([])
            .render();
        this.postHideMenu();
    };
    Menu.prototype.enter = function (domNode, element) {
        _super.prototype.enter.call(this, domNode, element);
        this._icon
            .target(domNode)
            .render();
        this._list
            .target(domNode)
            .render();
        var context = this;
        this._icon.element()
            .on("click", function () {
            event.stopPropagation();
            context.toggleMenu();
        });
    };
    Menu.prototype.update = function (domNode, element) {
        _super.prototype.update.call(this, domNode, element);
        element
            .classed("disabled", this.data().length === 0);
        this._icon
            .faChar(this.faChar())
            .paddingPercent(this.paddingPercent())
            .render();
    };
    Menu.prototype.exit = function (domNode, element) {
        this._icon
            .target(null);
        this._list
            .target(null);
        _super.prototype.exit.call(this, domNode, element);
    };
    //  Events  ---
    Menu.prototype.click = function (d) {
        console.log("Click:  " + d);
    };
    Menu.prototype.preShowMenu = function () {
        console.log("preShowMenu");
    };
    Menu.prototype.postHideMenu = function () {
        console.log("postHideMenu");
    };
    return Menu;
}(SVGWidget));
Menu.prototype._class += " common_Menu";
Menu.prototype.publishProxy("faChar", "_icon", null, "\uf0c9");
Menu.prototype.publishProxy("paddingPercent", "_icon", null, 10);

var ProgressBar = /** @class */ (function (_super) {
    __extends(ProgressBar, _super);
    function ProgressBar() {
        var _this = _super.call(this) || this;
        _this._running = false;
        return _this;
    }
    ProgressBar.prototype.calcCSS = function (halflife, perc) {
        var bar_size = this.size();
        var bar_color = this.color();
        var blur_opacity = this.blurOpacity();
        var blur_opacity_hex = blur_opacity * 255 >= 16 ? Math.floor(blur_opacity * 255).toString(16).slice(-2) : "00";
        var blur_color = this.blurColor() || bar_color;
        var blur_size = this.blurSize();
        var blur_fx = this.blurBar() ? "background: radial-gradient(ellipse at 50% 50%, " + blur_color + blur_opacity_hex + ", " + blur_color + "00, #00000000 " + blur_size + "px);" : "";
        return "\n            #" + this._elementID + "::before{\n                content:\" \";display:block;position:absolute;\n                height:" + bar_size + "px;width:" + perc + "%;\n                left:0;top:0;\n                background-color: " + bar_color + ";\n                transition: width " + (halflife / 1000) + "s;\n            }\n            #" + this._elementID + "::after{\n                content:\" \";display:block;position:absolute;\n                height:" + blur_size + "px;width:" + blur_size * 2 + "px;\n                left:calc(" + perc + "% - " + blur_size + "px);\n                top:" + -((blur_size / 2) - (bar_size / 2)) + "px;\n                background-color: " + bar_color + ";\n                transition: left " + (halflife / 1000) + "s;\n                transform: rotate(1deg) translate(-" + blur_size / 2.5 + "px,0px) scale(1.5,0.5);\n                " + blur_fx + "\n            }\n        ";
    };
    ProgressBar.prototype.start = function () {
        this._running = true;
        this.updateProgress(this.halfLife(), 10);
    };
    ProgressBar.prototype.finish = function () {
        this.updateProgress(100, 100);
    };
    ProgressBar.prototype.enter = function (domNode, element) {
        this._elementID = element.attr("id");
        if (!this._elementID)
            throw new Error("Target element requires an id attribute.");
        this._style = element.insert("style");
    };
    ProgressBar.prototype.exit = function (_domNode, _element) {
        this._running = false;
        if (this._style)
            this._style.remove();
        delete this._style;
    };
    ProgressBar.prototype.updateProgress = function (halflife, perc) {
        var _this = this;
        if (!this._running)
            return;
        if (this._style) {
            this._style.html(this.calcCSS(halflife, perc));
        }
        var percLimit = 95;
        halflife *= this.decay();
        perc = perc ? perc : 10;
        if (perc < percLimit) {
            setTimeout(function () {
                var _remaining = 100 - perc;
                _this.updateProgress(halflife, perc + (_remaining / 2));
            }, perc === 10 ? 100 : halflife);
        }
        else if (perc === 100) {
            setTimeout(function () {
                _this._running = false;
                if (_this._style) {
                    _this._style.html("");
                }
            }, halflife);
        }
    };
    __decorate([
        publish(5000, "number", "Half Life"),
        __metadata("design:type", Function)
    ], ProgressBar.prototype, "halfLife", void 0);
    __decorate([
        publish(1.2, "number", "Decay"),
        __metadata("design:type", Function)
    ], ProgressBar.prototype, "decay", void 0);
    __decorate([
        publish(2, "number", "Size"),
        __metadata("design:type", Function)
    ], ProgressBar.prototype, "size", void 0);
    __decorate([
        publish("#2ed573", "string", "Color"),
        __metadata("design:type", Function)
    ], ProgressBar.prototype, "color", void 0);
    __decorate([
        publish(true, "boolean", "Bar Blur"),
        __metadata("design:type", Function)
    ], ProgressBar.prototype, "blurBar", void 0);
    __decorate([
        publish(50, "number", "Blur Size"),
        __metadata("design:type", Function)
    ], ProgressBar.prototype, "blurSize", void 0);
    __decorate([
        publish("#7bed9f", "string", "Blur Color (hex)", null, { optional: true }),
        __metadata("design:type", Function)
    ], ProgressBar.prototype, "blurColor", void 0);
    __decorate([
        publish(0.35, "number", "Blur Opacity"),
        __metadata("design:type", Function)
    ], ProgressBar.prototype, "blurOpacity", void 0);
    return ProgressBar;
}(PropertyExt));
ProgressBar.prototype._class += " common_ProgressBar";

function nopropagation() {
  event.stopImmediatePropagation();
}

function noevent() {
  event.preventDefault();
  event.stopImmediatePropagation();
}

function dragDisable(view) {
  var root = view.document.documentElement,
      selection = d3Select(view).on("dragstart.drag", noevent, true);
  if ("onselectstart" in root) {
    selection.on("selectstart.drag", noevent, true);
  } else {
    root.__noselect = root.style.MozUserSelect;
    root.style.MozUserSelect = "none";
  }
}

function yesdrag(view, noclick) {
  var root = view.document.documentElement,
      selection = d3Select(view).on("dragstart.drag", null);
  if (noclick) {
    selection.on("click.drag", noevent, true);
    setTimeout(function() { selection.on("click.drag", null); }, 0);
  }
  if ("onselectstart" in root) {
    selection.on("selectstart.drag", null);
  } else {
    root.style.MozUserSelect = root.__noselect;
    delete root.__noselect;
  }
}

function constant$4(x) {
  return function() {
    return x;
  };
}

function DragEvent(target, type, subject, id, active, x, y, dx, dy, dispatch) {
  this.target = target;
  this.type = type;
  this.subject = subject;
  this.identifier = id;
  this.active = active;
  this.x = x;
  this.y = y;
  this.dx = dx;
  this.dy = dy;
  this._ = dispatch;
}

DragEvent.prototype.on = function() {
  var value = this._.on.apply(this._, arguments);
  return value === this._ ? this : value;
};

// Ignore right-click, since that should open the context menu.
function defaultFilter() {
  return !event.button;
}

function defaultContainer() {
  return this.parentNode;
}

function defaultSubject(d) {
  return d == null ? {x: event.x, y: event.y} : d;
}

function defaultTouchable() {
  return "ontouchstart" in this;
}

function d3Drag() {
  var filter = defaultFilter,
      container = defaultContainer,
      subject = defaultSubject,
      touchable = defaultTouchable,
      gestures = {},
      listeners = dispatch("start", "drag", "end"),
      active = 0,
      mousedownx,
      mousedowny,
      mousemoving,
      touchending,
      clickDistance2 = 0;

  function drag(selection) {
    selection
        .on("mousedown.drag", mousedowned)
      .filter(touchable)
        .on("touchstart.drag", touchstarted)
        .on("touchmove.drag", touchmoved)
        .on("touchend.drag touchcancel.drag", touchended)
        .style("touch-action", "none")
        .style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
  }

  function mousedowned() {
    if (touchending || !filter.apply(this, arguments)) return;
    var gesture = beforestart("mouse", container.apply(this, arguments), mouse, this, arguments);
    if (!gesture) return;
    d3Select(event.view).on("mousemove.drag", mousemoved, true).on("mouseup.drag", mouseupped, true);
    dragDisable(event.view);
    nopropagation();
    mousemoving = false;
    mousedownx = event.clientX;
    mousedowny = event.clientY;
    gesture("start");
  }

  function mousemoved() {
    noevent();
    if (!mousemoving) {
      var dx = event.clientX - mousedownx, dy = event.clientY - mousedowny;
      mousemoving = dx * dx + dy * dy > clickDistance2;
    }
    gestures.mouse("drag");
  }

  function mouseupped() {
    d3Select(event.view).on("mousemove.drag mouseup.drag", null);
    yesdrag(event.view, mousemoving);
    noevent();
    gestures.mouse("end");
  }

  function touchstarted() {
    if (!filter.apply(this, arguments)) return;
    var touches = event.changedTouches,
        c = container.apply(this, arguments),
        n = touches.length, i, gesture;

    for (i = 0; i < n; ++i) {
      if (gesture = beforestart(touches[i].identifier, c, touch, this, arguments)) {
        nopropagation();
        gesture("start");
      }
    }
  }

  function touchmoved() {
    var touches = event.changedTouches,
        n = touches.length, i, gesture;

    for (i = 0; i < n; ++i) {
      if (gesture = gestures[touches[i].identifier]) {
        noevent();
        gesture("drag");
      }
    }
  }

  function touchended() {
    var touches = event.changedTouches,
        n = touches.length, i, gesture;

    if (touchending) clearTimeout(touchending);
    touchending = setTimeout(function() { touchending = null; }, 500); // Ghost clicks are delayed!
    for (i = 0; i < n; ++i) {
      if (gesture = gestures[touches[i].identifier]) {
        nopropagation();
        gesture("end");
      }
    }
  }

  function beforestart(id, container, point, that, args) {
    var p = point(container, id), s, dx, dy,
        sublisteners = listeners.copy();

    if (!customEvent(new DragEvent(drag, "beforestart", s, id, active, p[0], p[1], 0, 0, sublisteners), function() {
      if ((event.subject = s = subject.apply(that, args)) == null) return false;
      dx = s.x - p[0] || 0;
      dy = s.y - p[1] || 0;
      return true;
    })) return;

    return function gesture(type) {
      var p0 = p, n;
      switch (type) {
        case "start": gestures[id] = gesture, n = active++; break;
        case "end": delete gestures[id], --active; // nobreak
        case "drag": p = point(container, id), n = active; break;
      }
      customEvent(new DragEvent(drag, type, s, id, n, p[0] + dx, p[1] + dy, p[0] - p0[0], p[1] - p0[1], sublisteners), sublisteners.apply, sublisteners, [type, that, args]);
    };
  }

  drag.filter = function(_) {
    return arguments.length ? (filter = typeof _ === "function" ? _ : constant$4(!!_), drag) : filter;
  };

  drag.container = function(_) {
    return arguments.length ? (container = typeof _ === "function" ? _ : constant$4(_), drag) : container;
  };

  drag.subject = function(_) {
    return arguments.length ? (subject = typeof _ === "function" ? _ : constant$4(_), drag) : subject;
  };

  drag.touchable = function(_) {
    return arguments.length ? (touchable = typeof _ === "function" ? _ : constant$4(!!_), drag) : touchable;
  };

  drag.on = function() {
    var value = listeners.on.apply(listeners, arguments);
    return value === listeners ? drag : value;
  };

  drag.clickDistance = function(_) {
    return arguments.length ? (clickDistance2 = (_ = +_) * _, drag) : Math.sqrt(clickDistance2);
  };

  return drag;
}

var css$9 = ".common_Surface .container .common_Shape{fill:#f9fcff;stroke:#1f77b4;stroke-width:1px}.common_Surface .title{cursor:move}.common_Surface .title .common_Shape{fill:#1f77b4;stroke:#1f77b4;stroke-width:1px}.common_Surface .title text{fill:#fff;stroke:none}.svg-button-container{position:fixed}.svg-button-container .surface-button{position:relative;background:transparent;border:none;opacity:.8;color:#fff}.svg-button-container .surface-button:hover{opacity:1}.svg-button-container .surface-button:active{opacity:.5}";
styleInject(css$9);

var Surface = /** @class */ (function (_super) {
    __extends(Surface, _super);
    function Surface() {
        var _this = _super.call(this) || this;
        _this._iconWidget = new Icon()
            .faChar("\uf07b")
            .paddingPercent(50);
        _this._containerWidget = new Shape()
            .class("container")
            .shape("rect");
        _this._titleRectWidget = new Shape()
            .class("title")
            .shape("rect");
        _this._textWidget = new Text()
            .class("title");
        _this._menuWidget = new Menu()
            .paddingPercent(0);
        var context = _this;
        _this._menuWidget.preShowMenu = function () {
            if (context.content() && context.content().hasOverlay()) {
                context.content().visible(false);
            }
        };
        _this._menuWidget.postHideMenu = function () {
            if (context.content() && context.content().hasOverlay()) {
                context.content().visible(true);
            }
        };
        _this._surfaceButtons = [];
        return _this;
    }
    Surface.prototype.enter = function (_domNode, _element) {
        _super.prototype.enter.call(this, _domNode, _element);
        var element = _element.append("g").attr("class", "frame");
        var domNode = element.node();
        this._clipRect = element.append("defs").append("clipPath")
            .attr("id", this.id() + "_clip")
            .append("rect")
            .attr("x", 0)
            .attr("y", 0)
            .attr("width", this._size.width)
            .attr("height", this._size.height);
        this._titleRectWidget
            .target(domNode)
            .render()
            .display(this.showTitle() && this.showIcon());
        this._iconWidget
            .target(domNode)
            .render();
        this._menuWidget
            .target(_domNode);
        this._textWidget
            .target(domNode);
        this._containerWidget
            .target(domNode);
        this.buttonContainer = d3Select(this._target).append("div").attr("class", "svg-button-container");
    };
    Surface.prototype.update = function (domNode, element) {
        _super.prototype.update.call(this, domNode, element);
        var context = this;
        var width = this.width() - 1;
        var height = this.height() - 1;
        this._iconWidget
            .display(this.showTitle() && this.showIcon())
            .shape(this.icon_shape())
            .render();
        this._menuWidget
            .render();
        this._textWidget
            .text(this.title())
            .display(this.showTitle())
            .render();
        var surfaceButtons = this.buttonContainer.selectAll(".surface-button").data(this.buttonAnnotations());
        surfaceButtons.enter().append("button").attr("class", "surface-button")
            .each(function (button, idx) {
            var el = context._surfaceButtons[idx] = d3Select(this)
                .attr("class", "surface-button " + (button.class ? button.class : ""))
                .attr("id", button.id)
                .style("padding", button.padding)
                .style("width", button.width)
                .style("height", button.height)
                .style("cursor", "pointer")
                .on("click", function (d) { context.click(d); });
            if (button.font === "FontAwesome") {
                el
                    .append("i")
                    .attr("class", "fa")
                    .text(function () { return button.label; });
            }
            else {
                el
                    .text(function () { return button.label; });
            }
        });
        surfaceButtons.exit()
            .each(function (_d, idx) {
            var element2 = d3Select(this);
            delete context._surfaceButtons[idx];
            element2.remove();
        });
        var buttonClientHeight = this.showTitle() ? Math.max.apply(null, this._surfaceButtons.map(function (d) { return d.node().offsetHeight; })) : 0;
        var iconClientSize = this.showTitle() && this.showIcon() ? this._iconWidget.getBBox(true) : { width: 0, height: 0 };
        var textClientSize = this._textWidget.getBBox(true);
        var menuClientSize = this._menuWidget.getBBox(true);
        var _titleRegionHeight = Math.max(iconClientSize.height, textClientSize.height, menuClientSize.height, buttonClientHeight);
        var titleRegionHeight = this.showTitle() ? _titleRegionHeight : 0;
        var yTitle = (-height + _titleRegionHeight) / 2;
        var titleTextHeight = this.showTitle() ? Math.max(textClientSize.height, menuClientSize.height, buttonClientHeight) : 0;
        var titleTextWidth = this.showTitle() ? textClientSize.width + menuClientSize.width : 0;
        if (titleTextWidth > width) {
            width = titleTextWidth;
        }
        var topMargin = titleRegionHeight <= titleTextHeight ? 0 : (titleRegionHeight - titleTextHeight) / 2;
        var leftMargin = topMargin;
        this._titleRectWidget
            .pos({ x: leftMargin, y: yTitle })
            .width(width - leftMargin * 2)
            .height(titleTextHeight)
            .display(this.showTitle())
            .render();
        this._iconWidget
            .move({ x: -width / 2 + iconClientSize.width / 2, y: yTitle });
        this._menuWidget
            .move({ x: width / 2 - menuClientSize.width / 2 - this.menuPadding(), y: yTitle });
        this._textWidget
            .move({ x: (iconClientSize.width / 2 - menuClientSize.width / 2) / 2, y: yTitle });
        var xPos = context._titleRectWidget.node().getBoundingClientRect().left + (context._size.width - leftMargin * 2) - context.buttonGutter() - this.buttonContainer.node().offsetWidth;
        var yPos = context._titleRectWidget.node().getBoundingClientRect().top + ((titleTextHeight - this.buttonContainer.node().offsetHeight) / 2);
        if (!isNaN(xPos)) {
            this.buttonContainer.style("left", xPos + "px");
        }
        if (!isNaN(yPos)) {
            this.buttonContainer.style("top", yPos + "px");
        }
        if (this.showTitle()) {
            this._containerWidget
                .pos({ x: leftMargin / 2, y: titleRegionHeight / 2 - topMargin / 2 })
                .width(width - leftMargin)
                .height(height - titleRegionHeight + topMargin)
                .render();
        }
        else {
            this._containerWidget
                .pos({ x: 0, y: 0 })
                .width(width)
                .height(height)
                .render();
        }
        if (this.showContent()) {
            var xOffset_1 = leftMargin;
            var yOffset_1 = titleRegionHeight - topMargin;
            var content = element.selectAll(".content").data(this.content() ? [this.content()] : [], function (d) { return d._id; });
            content.enter().append("g")
                .attr("class", "content")
                .attr("clip-path", "url(#" + this.id() + "_clip)")
                .each(function (d) {
                d.target(this);
            })
                .merge(content)
                .attr("transform", "translate(" + (leftMargin / 2) + ", " + (titleRegionHeight / 2 - topMargin / 2) + ")")
                .each(function (d) {
                var padding = {
                    left: 0,
                    top: 0,
                    right: 1,
                    bottom: 1
                };
                d
                    .resize({
                    width: width - xOffset_1 - (padding.left + padding.right),
                    height: height - yOffset_1 - (padding.top + padding.bottom)
                });
            });
            if (this.content()) {
                this._clipRect
                    .attr("x", -(width - xOffset_1) / 2)
                    .attr("y", -(height - yOffset_1) / 2)
                    .attr("width", width - xOffset_1)
                    .attr("height", height - yOffset_1);
            }
            content.exit().transition()
                .each(function (d) { d.target(null); })
                .remove();
        }
        if (this._menuWidget.element() && this._menuWidget.element().node() && this._menuWidget.element().node().parentNode) {
            this._menuWidget.element().node().parentNode.appendChild(this._menuWidget.element().node()); // Make sure menu is on top (Z-Order POV)
        }
    };
    Surface.prototype.exit = function (domNode, element) {
        this._titleRectWidget
            .target(null);
        this._iconWidget
            .target(null);
        this._menuWidget
            .target(null);
        this._textWidget
            .target(null);
        this._containerWidget
            .target(null);
        if (this.content()) {
            this.content().target(null);
        }
        _super.prototype.exit.call(this, domNode, element);
    };
    Surface.prototype.intersection = function (pointA, pointB) {
        var hits = [];
        var i1 = this._iconWidget.intersection(pointA, pointB, this._pos);
        if (i1) {
            hits.push({ i: i1, d: this.distance(i1, pointB) });
        }
        var i2 = this._titleRectWidget.intersection(pointA, pointB);
        if (i2) {
            hits.push({ i: i2, d: this.distance(i2, pointB) });
        }
        var i3 = this._containerWidget.intersection(pointA, pointB);
        if (i3) {
            hits.push({ i: i3, d: this.distance(i3, pointB) });
        }
        var nearest = null;
        hits.forEach(function (item) {
            if (nearest === null || nearest.d > item.d) {
                nearest = item;
            }
        });
        return nearest && nearest.i ? nearest.i : null;
    };
    Surface.prototype.click = function (d) {
        console.log("Clicked: " + d.id);
    };
    return Surface;
}(SVGWidget));
Surface.prototype._class += " common_Surface";
Surface.prototype.publish("showTitle", true, "boolean", "Show Title", null, { tags: ["Basic"] });
Surface.prototype.publish("title", "", "string", "Title", null, { tags: ["Basic"] });
Surface.prototype.publishProxy("titleFontSize", "_textWidget", "fontSize");
Surface.prototype.publish("showIcon", true, "boolean", "Show Title", null, { tags: ["Advanced"] });
Surface.prototype.publishProxy("icon_faChar", "_iconWidget", "faChar");
Surface.prototype.publishProxy("icon_shape", "_iconWidget", "shape");
Surface.prototype.publish("content", null, "widget", "Content", null, { tags: ["Private"] });
Surface.prototype.publish("buttonAnnotations", [], "array", "Button Array", null, { tags: ["Intermediate"] });
Surface.prototype.publish("buttonGutter", 25, "number", "Space Between Menu and Buttons", null, { tags: ["Intermediate"] });
Surface.prototype.publish("showContent", true, "boolean", "Show Content", null, { tags: ["Intermediate"] });
Surface.prototype.publish("menu", [], "array", "Menu List Data", null, { tags: ["Intermediate"] });
Surface.prototype.publish("menuPadding", 2, "number", "Menu Padding", null, { tags: ["Advanced"] });
Surface.prototype._origMenuParam = Surface.prototype.menu;
Surface.prototype.menu = function (_) {
    Surface.prototype._origMenuParam.apply(this, arguments);
    if (arguments.length) {
        this._menuWidget.data(_);
        return this;
    }
    return this._menuWidget.data();
};
Surface.prototype._origShowContent = Surface.prototype.showContent;
Surface.prototype.showContent = function (_) {
    var retVal = Surface.prototype._origShowContent.apply(this, arguments);
    if (arguments.length) {
        if (this.content()) {
            this.content().visible(this.showContent());
        }
    }
    return retVal;
};

var css$a = ".resizeN{cursor:ns-resize;opacity:0}.resizeNE{cursor:ne-resize;opacity:0}.resizeE{cursor:ew-resize;opacity:0}.resizeSE{cursor:se-resize;opacity:0}.resizeS{cursor:ns-resize;opacity:0}.resizeSW{cursor:sw-resize;opacity:0}.resizeW{cursor:ew-resize;opacity:0}.resizeNW{cursor:nw-resize;opacity:0}";
styleInject(css$a);

var ResizeSurface = /** @class */ (function (_super) {
    __extends(ResizeSurface, _super);
    function ResizeSurface() {
        var _this = _super.call(this) || this;
        _this.handleWidth = 8;
        _this.handles = [{ loc: "NW" }, { loc: "N" }, { loc: "NE" }, { loc: "E" }, { loc: "SE" }, { loc: "S" }, { loc: "SW" }, { loc: "W" }];
        var context = _this;
        _this.dispatch = dispatch("sizestart", "size", "sizeend");
        _this.drag = d3Drag()
            .subject(function (d) { return d; });
        _this.drag
            .on("start", function (d) {
            context.dispatch.call("sizestart", context, d.loc);
            if (context.allowResize()) {
                event.sourceEvent.stopPropagation();
                context._dragHandlePos = { x: d.x, y: d.y };
                context._dragStartPos = context.pos();
                context._dragStartSize = context.size();
                context._prevPosSize = {
                    x: context._dragStartPos.x,
                    y: context._dragStartPos.y,
                    width: context._dragStartSize.width,
                    height: context._dragStartSize.height
                };
                context._textPosSize = context._textWidget.getBBox(true);
                context._iconPosSize = context._iconWidget.getBBox(true);
                context.showContent(false);
            }
        })
            .on("drag", function (d) {
            if (context.allowResize()) {
                event.sourceEvent.stopPropagation();
                var _dx = event.x - context._dragHandlePos.x;
                var _dy = event.y - context._dragHandlePos.y;
                var delta = { x: 0, y: 0, w: 0, h: 0 };
                switch (d.loc) {
                    case "NW":
                        delta.x = _dx / 2;
                        delta.w = -_dx;
                    /* falls through */
                    case "N":
                        delta.y = _dy / 2;
                        delta.h = -_dy;
                        break;
                    case "NE":
                        delta.y = _dy / 2;
                        delta.h = -_dy;
                    /* falls through */
                    case "E":
                        delta.x = _dx / 2;
                        delta.w = _dx;
                        break;
                    case "SE":
                        delta.x = _dx / 2;
                        delta.w = _dx;
                    /* falls through */
                    case "S":
                        delta.y = _dy / 2;
                        delta.h = _dy;
                        break;
                    case "SW":
                        delta.y = _dy / 2;
                        delta.h = _dy;
                    /* falls through */
                    case "W":
                        delta.x = _dx / 2;
                        delta.w = -_dx;
                        break;
                }
                var posSize = {
                    x: context._dragStartPos.x + delta.x,
                    y: context._dragStartPos.y + delta.y,
                    width: context._dragStartSize.width + delta.w,
                    height: context._dragStartSize.height + delta.h
                };
                if (posSize.width < context._iconPosSize.width * 2 + context._textPosSize.width) {
                    posSize.x = context._prevPosSize.x;
                    posSize.width = context._prevPosSize.width;
                }
                if (posSize.height < context._textPosSize.height + 48) {
                    posSize.y = context._prevPosSize.y;
                    posSize.height = context._prevPosSize.height;
                }
                context
                    .pos({ x: posSize.x, y: posSize.y })
                    .size({ width: posSize.width, height: posSize.height })
                    .render()
                    .getBBox(true);
                context.dispatch.call("size", context, d.loc);
                context._prevPosSize = posSize;
            }
        })
            .on("end", function (d) {
            if (context.allowResize()) {
                event.sourceEvent.stopPropagation();
                context
                    .showContent(true)
                    .render();
                context._containerWidget.getBBox(true);
                context._titleRectWidget.getBBox(true);
                context.dispatch.call("sizeend", context, d.loc);
            }
        });
        return _this;
    }
    ResizeSurface.prototype.move = function (_) {
        var retVal = _super.prototype.move.apply(this, arguments);
        this.updateHandles(this._domNode, this._element);
        return retVal;
    };
    ResizeSurface.prototype.update = function (domNode, element) {
        _super.prototype.update.call(this, domNode, element);
        this.updateHandles(domNode, element);
    };
    ResizeSurface.prototype.updateHandles = function (_domNode, _element) {
        var sizeHandles = this._placeholderElement.selectAll("rect").data(this.handles, function (d) { return d.loc; });
        var sizeHandlesEnter = sizeHandles.enter().append("rect")
            .attr("class", function (d) { return "resize" + d.loc; })
            .call(this.drag);
        var l = this._pos.x + this._containerWidget._pos.x - this._containerWidget.width() / 2;
        var t = this._pos.y + this._titleRectWidget._pos.y - this._titleRectWidget.height() / 2;
        var r = this._pos.x + this._containerWidget._pos.x + this._containerWidget.width() / 2;
        var b = this._pos.y + this._containerWidget._pos.y + this._containerWidget.height() / 2;
        var w = r - l;
        var h = b - t;
        var context = this;
        sizeHandlesEnter.merge(sizeHandles)
            .each(function (d) {
            switch (d.loc) {
                case "NW":
                    d.x = l - context.handleWidth / 2;
                    d.y = t - context.handleWidth / 2;
                    d.width = context.handleWidth;
                    d.height = context.handleWidth;
                    break;
                case "N":
                    d.x = l + context.handleWidth / 2;
                    d.y = t - context.handleWidth / 2;
                    d.width = w - context.handleWidth;
                    d.height = context.handleWidth;
                    break;
                case "NE":
                    d.x = r - context.handleWidth / 2;
                    d.y = t - context.handleWidth / 2;
                    d.width = context.handleWidth;
                    d.height = context.handleWidth;
                    break;
                case "E":
                    d.x = r - context.handleWidth / 2;
                    d.y = t + context.handleWidth / 2;
                    d.width = context.handleWidth;
                    d.height = h - context.handleWidth;
                    break;
                case "SE":
                    d.x = r - context.handleWidth / 2;
                    d.y = b - context.handleWidth / 2;
                    d.width = context.handleWidth;
                    d.height = context.handleWidth;
                    break;
                case "S":
                    d.x = l + context.handleWidth / 2;
                    d.y = b - context.handleWidth / 2;
                    d.width = w - context.handleWidth;
                    d.height = context.handleWidth;
                    break;
                case "SW":
                    d.x = l - context.handleWidth / 2;
                    d.y = b - context.handleWidth / 2;
                    d.width = context.handleWidth;
                    d.height = context.handleWidth;
                    break;
                case "W":
                    d.x = l - context.handleWidth / 2;
                    d.y = t + context.handleWidth / 2;
                    d.width = context.handleWidth;
                    d.height = h - context.handleWidth;
                    break;
            }
            d3Select(this)
                .attr("x", d.x)
                .attr("y", d.y)
                .attr("width", d.width)
                .attr("height", d.height);
        });
    };
    return ResizeSurface;
}(Surface));
ResizeSurface.prototype._class += " common_ResizeSurface";
ResizeSurface.prototype.publish("allowResize", true, "boolean", "Sets if surface can be resized", null, { tags: ["Private", "Shared"] });

function constant$5(x) {
  return function() {
    return x;
  };
}

function BrushEvent(target, type, selection) {
  this.target = target;
  this.type = type;
  this.selection = selection;
}

function nopropagation$1() {
  event.stopImmediatePropagation();
}

function noevent$1() {
  event.preventDefault();
  event.stopImmediatePropagation();
}

var MODE_DRAG = {name: "drag"},
    MODE_SPACE = {name: "space"},
    MODE_HANDLE = {name: "handle"},
    MODE_CENTER = {name: "center"};

var X = {
  name: "x",
  handles: ["e", "w"].map(type),
  input: function(x, e) { return x && [[x[0], e[0][1]], [x[1], e[1][1]]]; },
  output: function(xy) { return xy && [xy[0][0], xy[1][0]]; }
};

var Y = {
  name: "y",
  handles: ["n", "s"].map(type),
  input: function(y, e) { return y && [[e[0][0], y[0]], [e[1][0], y[1]]]; },
  output: function(xy) { return xy && [xy[0][1], xy[1][1]]; }
};

var XY = {
  name: "xy",
  handles: ["n", "e", "s", "w", "nw", "ne", "se", "sw"].map(type),
  input: function(xy) { return xy; },
  output: function(xy) { return xy; }
};

var cursors = {
  overlay: "crosshair",
  selection: "move",
  n: "ns-resize",
  e: "ew-resize",
  s: "ns-resize",
  w: "ew-resize",
  nw: "nwse-resize",
  ne: "nesw-resize",
  se: "nwse-resize",
  sw: "nesw-resize"
};

var flipX = {
  e: "w",
  w: "e",
  nw: "ne",
  ne: "nw",
  se: "sw",
  sw: "se"
};

var flipY = {
  n: "s",
  s: "n",
  nw: "sw",
  ne: "se",
  se: "ne",
  sw: "nw"
};

var signsX = {
  overlay: +1,
  selection: +1,
  n: null,
  e: +1,
  s: null,
  w: -1,
  nw: -1,
  ne: +1,
  se: +1,
  sw: -1
};

var signsY = {
  overlay: +1,
  selection: +1,
  n: -1,
  e: null,
  s: +1,
  w: null,
  nw: -1,
  ne: -1,
  se: +1,
  sw: +1
};

function type(t) {
  return {type: t};
}

// Ignore right-click, since that should open the context menu.
function defaultFilter$1() {
  return !event.button;
}

function defaultExtent() {
  var svg = this.ownerSVGElement || this;
  return [[0, 0], [svg.width.baseVal.value, svg.height.baseVal.value]];
}

// Like d3.local, but with the name “__brush” rather than auto-generated.
function local$1(node) {
  while (!node.__brush) if (!(node = node.parentNode)) return;
  return node.__brush;
}

function empty$1(extent) {
  return extent[0][0] === extent[1][0]
      || extent[0][1] === extent[1][1];
}

function brushSelection(node) {
  var state = node.__brush;
  return state ? state.dim.output(state.selection) : null;
}

function brushX() {
  return brush(X);
}

function brushY() {
  return brush(Y);
}

function d3Brush() {
  return brush(XY);
}

function brush(dim) {
  var extent = defaultExtent,
      filter = defaultFilter$1,
      listeners = dispatch(brush, "start", "brush", "end"),
      handleSize = 6,
      touchending;

  function brush(group) {
    var overlay = group
        .property("__brush", initialize)
      .selectAll(".overlay")
      .data([type("overlay")]);

    overlay.enter().append("rect")
        .attr("class", "overlay")
        .attr("pointer-events", "all")
        .attr("cursor", cursors.overlay)
      .merge(overlay)
        .each(function() {
          var extent = local$1(this).extent;
          d3Select(this)
              .attr("x", extent[0][0])
              .attr("y", extent[0][1])
              .attr("width", extent[1][0] - extent[0][0])
              .attr("height", extent[1][1] - extent[0][1]);
        });

    group.selectAll(".selection")
      .data([type("selection")])
      .enter().append("rect")
        .attr("class", "selection")
        .attr("cursor", cursors.selection)
        .attr("fill", "#777")
        .attr("fill-opacity", 0.3)
        .attr("stroke", "#fff")
        .attr("shape-rendering", "crispEdges");

    var handle = group.selectAll(".handle")
      .data(dim.handles, function(d) { return d.type; });

    handle.exit().remove();

    handle.enter().append("rect")
        .attr("class", function(d) { return "handle handle--" + d.type; })
        .attr("cursor", function(d) { return cursors[d.type]; });

    group
        .each(redraw)
        .attr("fill", "none")
        .attr("pointer-events", "all")
        .style("-webkit-tap-highlight-color", "rgba(0,0,0,0)")
        .on("mousedown.brush touchstart.brush", started);
  }

  brush.move = function(group, selection) {
    if (group.selection) {
      group
          .on("start.brush", function() { emitter(this, arguments).beforestart().start(); })
          .on("interrupt.brush end.brush", function() { emitter(this, arguments).end(); })
          .tween("brush", function() {
            var that = this,
                state = that.__brush,
                emit = emitter(that, arguments),
                selection0 = state.selection,
                selection1 = dim.input(typeof selection === "function" ? selection.apply(this, arguments) : selection, state.extent),
                i = interpolate(selection0, selection1);

            function tween(t) {
              state.selection = t === 1 && empty$1(selection1) ? null : i(t);
              redraw.call(that);
              emit.brush();
            }

            return selection0 && selection1 ? tween : tween(1);
          });
    } else {
      group
          .each(function() {
            var that = this,
                args = arguments,
                state = that.__brush,
                selection1 = dim.input(typeof selection === "function" ? selection.apply(that, args) : selection, state.extent),
                emit = emitter(that, args).beforestart();

            interrupt(that);
            state.selection = selection1 == null || empty$1(selection1) ? null : selection1;
            redraw.call(that);
            emit.start().brush().end();
          });
    }
  };

  function redraw() {
    var group = d3Select(this),
        selection = local$1(this).selection;

    if (selection) {
      group.selectAll(".selection")
          .style("display", null)
          .attr("x", selection[0][0])
          .attr("y", selection[0][1])
          .attr("width", selection[1][0] - selection[0][0])
          .attr("height", selection[1][1] - selection[0][1]);

      group.selectAll(".handle")
          .style("display", null)
          .attr("x", function(d) { return d.type[d.type.length - 1] === "e" ? selection[1][0] - handleSize / 2 : selection[0][0] - handleSize / 2; })
          .attr("y", function(d) { return d.type[0] === "s" ? selection[1][1] - handleSize / 2 : selection[0][1] - handleSize / 2; })
          .attr("width", function(d) { return d.type === "n" || d.type === "s" ? selection[1][0] - selection[0][0] + handleSize : handleSize; })
          .attr("height", function(d) { return d.type === "e" || d.type === "w" ? selection[1][1] - selection[0][1] + handleSize : handleSize; });
    }

    else {
      group.selectAll(".selection,.handle")
          .style("display", "none")
          .attr("x", null)
          .attr("y", null)
          .attr("width", null)
          .attr("height", null);
    }
  }

  function emitter(that, args) {
    return that.__brush.emitter || new Emitter(that, args);
  }

  function Emitter(that, args) {
    this.that = that;
    this.args = args;
    this.state = that.__brush;
    this.active = 0;
  }

  Emitter.prototype = {
    beforestart: function() {
      if (++this.active === 1) this.state.emitter = this, this.starting = true;
      return this;
    },
    start: function() {
      if (this.starting) this.starting = false, this.emit("start");
      return this;
    },
    brush: function() {
      this.emit("brush");
      return this;
    },
    end: function() {
      if (--this.active === 0) delete this.state.emitter, this.emit("end");
      return this;
    },
    emit: function(type) {
      customEvent(new BrushEvent(brush, type, dim.output(this.state.selection)), listeners.apply, listeners, [type, this.that, this.args]);
    }
  };

  function started() {
    if (event.touches) { if (event.changedTouches.length < event.touches.length) return noevent$1(); }
    else if (touchending) return;
    if (!filter.apply(this, arguments)) return;

    var that = this,
        type = event.target.__data__.type,
        mode = (event.metaKey ? type = "overlay" : type) === "selection" ? MODE_DRAG : (event.altKey ? MODE_CENTER : MODE_HANDLE),
        signX = dim === Y ? null : signsX[type],
        signY = dim === X ? null : signsY[type],
        state = local$1(that),
        extent = state.extent,
        selection = state.selection,
        W = extent[0][0], w0, w1,
        N = extent[0][1], n0, n1,
        E = extent[1][0], e0, e1,
        S = extent[1][1], s0, s1,
        dx,
        dy,
        moving,
        shifting = signX && signY && event.shiftKey,
        lockX,
        lockY,
        point0 = mouse(that),
        point = point0,
        emit = emitter(that, arguments).beforestart();

    if (type === "overlay") {
      state.selection = selection = [
        [w0 = dim === Y ? W : point0[0], n0 = dim === X ? N : point0[1]],
        [e0 = dim === Y ? E : w0, s0 = dim === X ? S : n0]
      ];
    } else {
      w0 = selection[0][0];
      n0 = selection[0][1];
      e0 = selection[1][0];
      s0 = selection[1][1];
    }

    w1 = w0;
    n1 = n0;
    e1 = e0;
    s1 = s0;

    var group = d3Select(that)
        .attr("pointer-events", "none");

    var overlay = group.selectAll(".overlay")
        .attr("cursor", cursors[type]);

    if (event.touches) {
      group
          .on("touchmove.brush", moved, true)
          .on("touchend.brush touchcancel.brush", ended, true);
    } else {
      var view = d3Select(event.view)
          .on("keydown.brush", keydowned, true)
          .on("keyup.brush", keyupped, true)
          .on("mousemove.brush", moved, true)
          .on("mouseup.brush", ended, true);

      dragDisable(event.view);
    }

    nopropagation$1();
    interrupt(that);
    redraw.call(that);
    emit.start();

    function moved() {
      var point1 = mouse(that);
      if (shifting && !lockX && !lockY) {
        if (Math.abs(point1[0] - point[0]) > Math.abs(point1[1] - point[1])) lockY = true;
        else lockX = true;
      }
      point = point1;
      moving = true;
      noevent$1();
      move();
    }

    function move() {
      var t;

      dx = point[0] - point0[0];
      dy = point[1] - point0[1];

      switch (mode) {
        case MODE_SPACE:
        case MODE_DRAG: {
          if (signX) dx = Math.max(W - w0, Math.min(E - e0, dx)), w1 = w0 + dx, e1 = e0 + dx;
          if (signY) dy = Math.max(N - n0, Math.min(S - s0, dy)), n1 = n0 + dy, s1 = s0 + dy;
          break;
        }
        case MODE_HANDLE: {
          if (signX < 0) dx = Math.max(W - w0, Math.min(E - w0, dx)), w1 = w0 + dx, e1 = e0;
          else if (signX > 0) dx = Math.max(W - e0, Math.min(E - e0, dx)), w1 = w0, e1 = e0 + dx;
          if (signY < 0) dy = Math.max(N - n0, Math.min(S - n0, dy)), n1 = n0 + dy, s1 = s0;
          else if (signY > 0) dy = Math.max(N - s0, Math.min(S - s0, dy)), n1 = n0, s1 = s0 + dy;
          break;
        }
        case MODE_CENTER: {
          if (signX) w1 = Math.max(W, Math.min(E, w0 - dx * signX)), e1 = Math.max(W, Math.min(E, e0 + dx * signX));
          if (signY) n1 = Math.max(N, Math.min(S, n0 - dy * signY)), s1 = Math.max(N, Math.min(S, s0 + dy * signY));
          break;
        }
      }

      if (e1 < w1) {
        signX *= -1;
        t = w0, w0 = e0, e0 = t;
        t = w1, w1 = e1, e1 = t;
        if (type in flipX) overlay.attr("cursor", cursors[type = flipX[type]]);
      }

      if (s1 < n1) {
        signY *= -1;
        t = n0, n0 = s0, s0 = t;
        t = n1, n1 = s1, s1 = t;
        if (type in flipY) overlay.attr("cursor", cursors[type = flipY[type]]);
      }

      if (state.selection) selection = state.selection; // May be set by brush.move!
      if (lockX) w1 = selection[0][0], e1 = selection[1][0];
      if (lockY) n1 = selection[0][1], s1 = selection[1][1];

      if (selection[0][0] !== w1
          || selection[0][1] !== n1
          || selection[1][0] !== e1
          || selection[1][1] !== s1) {
        state.selection = [[w1, n1], [e1, s1]];
        redraw.call(that);
        emit.brush();
      }
    }

    function ended() {
      nopropagation$1();
      if (event.touches) {
        if (event.touches.length) return;
        if (touchending) clearTimeout(touchending);
        touchending = setTimeout(function() { touchending = null; }, 500); // Ghost clicks are delayed!
        group.on("touchmove.brush touchend.brush touchcancel.brush", null);
      } else {
        yesdrag(event.view, moving);
        view.on("keydown.brush keyup.brush mousemove.brush mouseup.brush", null);
      }
      group.attr("pointer-events", "all");
      overlay.attr("cursor", cursors.overlay);
      if (state.selection) selection = state.selection; // May be set by brush.move (on start)!
      if (empty$1(selection)) state.selection = null, redraw.call(that);
      emit.end();
    }

    function keydowned() {
      switch (event.keyCode) {
        case 16: { // SHIFT
          shifting = signX && signY;
          break;
        }
        case 18: { // ALT
          if (mode === MODE_HANDLE) {
            if (signX) e0 = e1 - dx * signX, w0 = w1 + dx * signX;
            if (signY) s0 = s1 - dy * signY, n0 = n1 + dy * signY;
            mode = MODE_CENTER;
            move();
          }
          break;
        }
        case 32: { // SPACE; takes priority over ALT
          if (mode === MODE_HANDLE || mode === MODE_CENTER) {
            if (signX < 0) e0 = e1 - dx; else if (signX > 0) w0 = w1 - dx;
            if (signY < 0) s0 = s1 - dy; else if (signY > 0) n0 = n1 - dy;
            mode = MODE_SPACE;
            overlay.attr("cursor", cursors.selection);
            move();
          }
          break;
        }
        default: return;
      }
      noevent$1();
    }

    function keyupped() {
      switch (event.keyCode) {
        case 16: { // SHIFT
          if (shifting) {
            lockX = lockY = shifting = false;
            move();
          }
          break;
        }
        case 18: { // ALT
          if (mode === MODE_CENTER) {
            if (signX < 0) e0 = e1; else if (signX > 0) w0 = w1;
            if (signY < 0) s0 = s1; else if (signY > 0) n0 = n1;
            mode = MODE_HANDLE;
            move();
          }
          break;
        }
        case 32: { // SPACE
          if (mode === MODE_SPACE) {
            if (event.altKey) {
              if (signX) e0 = e1 - dx * signX, w0 = w1 + dx * signX;
              if (signY) s0 = s1 - dy * signY, n0 = n1 + dy * signY;
              mode = MODE_CENTER;
            } else {
              if (signX < 0) e0 = e1; else if (signX > 0) w0 = w1;
              if (signY < 0) s0 = s1; else if (signY > 0) n0 = n1;
              mode = MODE_HANDLE;
            }
            overlay.attr("cursor", cursors[type]);
            move();
          }
          break;
        }
        default: return;
      }
      noevent$1();
    }
  }

  function initialize() {
    var state = this.__brush || {selection: null};
    state.extent = extent.apply(this, arguments);
    state.dim = dim;
    return state;
  }

  brush.extent = function(_) {
    return arguments.length ? (extent = typeof _ === "function" ? _ : constant$5([[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]]), brush) : extent;
  };

  brush.filter = function(_) {
    return arguments.length ? (filter = typeof _ === "function" ? _ : constant$5(!!_), brush) : filter;
  };

  brush.handleSize = function(_) {
    return arguments.length ? (handleSize = +_, brush) : handleSize;
  };

  brush.on = function() {
    var value = listeners.on.apply(listeners, arguments);
    return value === listeners ? brush : value;
  };

  return brush;
}

function constant$6(x) {
  return function() {
    return x;
  };
}

function ZoomEvent(target, type, transform) {
  this.target = target;
  this.type = type;
  this.transform = transform;
}

function Transform(k, x, y) {
  this.k = k;
  this.x = x;
  this.y = y;
}

Transform.prototype = {
  constructor: Transform,
  scale: function(k) {
    return k === 1 ? this : new Transform(this.k * k, this.x, this.y);
  },
  translate: function(x, y) {
    return x === 0 & y === 0 ? this : new Transform(this.k, this.x + this.k * x, this.y + this.k * y);
  },
  apply: function(point) {
    return [point[0] * this.k + this.x, point[1] * this.k + this.y];
  },
  applyX: function(x) {
    return x * this.k + this.x;
  },
  applyY: function(y) {
    return y * this.k + this.y;
  },
  invert: function(location) {
    return [(location[0] - this.x) / this.k, (location[1] - this.y) / this.k];
  },
  invertX: function(x) {
    return (x - this.x) / this.k;
  },
  invertY: function(y) {
    return (y - this.y) / this.k;
  },
  rescaleX: function(x) {
    return x.copy().domain(x.range().map(this.invertX, this).map(x.invert, x));
  },
  rescaleY: function(y) {
    return y.copy().domain(y.range().map(this.invertY, this).map(y.invert, y));
  },
  toString: function() {
    return "translate(" + this.x + "," + this.y + ") scale(" + this.k + ")";
  }
};

var identity$4 = new Transform(1, 0, 0);

transform.prototype = Transform.prototype;

function transform(node) {
  return node.__zoom || identity$4;
}

function nopropagation$2() {
  event.stopImmediatePropagation();
}

function noevent$2() {
  event.preventDefault();
  event.stopImmediatePropagation();
}

// Ignore right-click, since that should open the context menu.
function defaultFilter$2() {
  return !event.button;
}

function defaultExtent$1() {
  var e = this, w, h;
  if (e instanceof SVGElement) {
    e = e.ownerSVGElement || e;
    w = e.width.baseVal.value;
    h = e.height.baseVal.value;
  } else {
    w = e.clientWidth;
    h = e.clientHeight;
  }
  return [[0, 0], [w, h]];
}

function defaultTransform() {
  return this.__zoom || identity$4;
}

function defaultWheelDelta() {
  return -event.deltaY * (event.deltaMode ? 120 : 1) / 500;
}

function defaultTouchable$1() {
  return "ontouchstart" in this;
}

function defaultConstrain(transform, extent, translateExtent) {
  var dx0 = transform.invertX(extent[0][0]) - translateExtent[0][0],
      dx1 = transform.invertX(extent[1][0]) - translateExtent[1][0],
      dy0 = transform.invertY(extent[0][1]) - translateExtent[0][1],
      dy1 = transform.invertY(extent[1][1]) - translateExtent[1][1];
  return transform.translate(
    dx1 > dx0 ? (dx0 + dx1) / 2 : Math.min(0, dx0) || Math.max(0, dx1),
    dy1 > dy0 ? (dy0 + dy1) / 2 : Math.min(0, dy0) || Math.max(0, dy1)
  );
}

function d3Zoom() {
  var filter = defaultFilter$2,
      extent = defaultExtent$1,
      constrain = defaultConstrain,
      wheelDelta = defaultWheelDelta,
      touchable = defaultTouchable$1,
      scaleExtent = [0, Infinity],
      translateExtent = [[-Infinity, -Infinity], [Infinity, Infinity]],
      duration = 250,
      interpolate = interpolateZoom,
      gestures = [],
      listeners = dispatch("start", "zoom", "end"),
      touchstarting,
      touchending,
      touchDelay = 500,
      wheelDelay = 150,
      clickDistance2 = 0;

  function zoom(selection) {
    selection
        .property("__zoom", defaultTransform)
        .on("wheel.zoom", wheeled)
        .on("mousedown.zoom", mousedowned)
        .on("dblclick.zoom", dblclicked)
      .filter(touchable)
        .on("touchstart.zoom", touchstarted)
        .on("touchmove.zoom", touchmoved)
        .on("touchend.zoom touchcancel.zoom", touchended)
        .style("touch-action", "none")
        .style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
  }

  zoom.transform = function(collection, transform) {
    var selection = collection.selection ? collection.selection() : collection;
    selection.property("__zoom", defaultTransform);
    if (collection !== selection) {
      schedule(collection, transform);
    } else {
      selection.interrupt().each(function() {
        gesture(this, arguments)
            .start()
            .zoom(null, typeof transform === "function" ? transform.apply(this, arguments) : transform)
            .end();
      });
    }
  };

  zoom.scaleBy = function(selection, k) {
    zoom.scaleTo(selection, function() {
      var k0 = this.__zoom.k,
          k1 = typeof k === "function" ? k.apply(this, arguments) : k;
      return k0 * k1;
    });
  };

  zoom.scaleTo = function(selection, k) {
    zoom.transform(selection, function() {
      var e = extent.apply(this, arguments),
          t0 = this.__zoom,
          p0 = centroid(e),
          p1 = t0.invert(p0),
          k1 = typeof k === "function" ? k.apply(this, arguments) : k;
      return constrain(translate(scale(t0, k1), p0, p1), e, translateExtent);
    });
  };

  zoom.translateBy = function(selection, x, y) {
    zoom.transform(selection, function() {
      return constrain(this.__zoom.translate(
        typeof x === "function" ? x.apply(this, arguments) : x,
        typeof y === "function" ? y.apply(this, arguments) : y
      ), extent.apply(this, arguments), translateExtent);
    });
  };

  zoom.translateTo = function(selection, x, y) {
    zoom.transform(selection, function() {
      var e = extent.apply(this, arguments),
          t = this.__zoom,
          p = centroid(e);
      return constrain(identity$4.translate(p[0], p[1]).scale(t.k).translate(
        typeof x === "function" ? -x.apply(this, arguments) : -x,
        typeof y === "function" ? -y.apply(this, arguments) : -y
      ), e, translateExtent);
    });
  };

  function scale(transform, k) {
    k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], k));
    return k === transform.k ? transform : new Transform(k, transform.x, transform.y);
  }

  function translate(transform, p0, p1) {
    var x = p0[0] - p1[0] * transform.k, y = p0[1] - p1[1] * transform.k;
    return x === transform.x && y === transform.y ? transform : new Transform(transform.k, x, y);
  }

  function centroid(extent) {
    return [(+extent[0][0] + +extent[1][0]) / 2, (+extent[0][1] + +extent[1][1]) / 2];
  }

  function schedule(transition, transform, center) {
    transition
        .on("start.zoom", function() { gesture(this, arguments).start(); })
        .on("interrupt.zoom end.zoom", function() { gesture(this, arguments).end(); })
        .tween("zoom", function() {
          var that = this,
              args = arguments,
              g = gesture(that, args),
              e = extent.apply(that, args),
              p = center || centroid(e),
              w = Math.max(e[1][0] - e[0][0], e[1][1] - e[0][1]),
              a = that.__zoom,
              b = typeof transform === "function" ? transform.apply(that, args) : transform,
              i = interpolate(a.invert(p).concat(w / a.k), b.invert(p).concat(w / b.k));
          return function(t) {
            if (t === 1) t = b; // Avoid rounding error on end.
            else { var l = i(t), k = w / l[2]; t = new Transform(k, p[0] - l[0] * k, p[1] - l[1] * k); }
            g.zoom(null, t);
          };
        });
  }

  function gesture(that, args) {
    for (var i = 0, n = gestures.length, g; i < n; ++i) {
      if ((g = gestures[i]).that === that) {
        return g;
      }
    }
    return new Gesture(that, args);
  }

  function Gesture(that, args) {
    this.that = that;
    this.args = args;
    this.index = -1;
    this.active = 0;
    this.extent = extent.apply(that, args);
  }

  Gesture.prototype = {
    start: function() {
      if (++this.active === 1) {
        this.index = gestures.push(this) - 1;
        this.emit("start");
      }
      return this;
    },
    zoom: function(key, transform) {
      if (this.mouse && key !== "mouse") this.mouse[1] = transform.invert(this.mouse[0]);
      if (this.touch0 && key !== "touch") this.touch0[1] = transform.invert(this.touch0[0]);
      if (this.touch1 && key !== "touch") this.touch1[1] = transform.invert(this.touch1[0]);
      this.that.__zoom = transform;
      this.emit("zoom");
      return this;
    },
    end: function() {
      if (--this.active === 0) {
        gestures.splice(this.index, 1);
        this.index = -1;
        this.emit("end");
      }
      return this;
    },
    emit: function(type) {
      customEvent(new ZoomEvent(zoom, type, this.that.__zoom), listeners.apply, listeners, [type, this.that, this.args]);
    }
  };

  function wheeled() {
    if (!filter.apply(this, arguments)) return;
    var g = gesture(this, arguments),
        t = this.__zoom,
        k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], t.k * Math.pow(2, wheelDelta.apply(this, arguments)))),
        p = mouse(this);

    // If the mouse is in the same location as before, reuse it.
    // If there were recent wheel events, reset the wheel idle timeout.
    if (g.wheel) {
      if (g.mouse[0][0] !== p[0] || g.mouse[0][1] !== p[1]) {
        g.mouse[1] = t.invert(g.mouse[0] = p);
      }
      clearTimeout(g.wheel);
    }

    // If this wheel event won’t trigger a transform change, ignore it.
    else if (t.k === k) return;

    // Otherwise, capture the mouse point and location at the start.
    else {
      g.mouse = [p, t.invert(p)];
      interrupt(this);
      g.start();
    }

    noevent$2();
    g.wheel = setTimeout(wheelidled, wheelDelay);
    g.zoom("mouse", constrain(translate(scale(t, k), g.mouse[0], g.mouse[1]), g.extent, translateExtent));

    function wheelidled() {
      g.wheel = null;
      g.end();
    }
  }

  function mousedowned() {
    if (touchending || !filter.apply(this, arguments)) return;
    var g = gesture(this, arguments),
        v = d3Select(event.view).on("mousemove.zoom", mousemoved, true).on("mouseup.zoom", mouseupped, true),
        p = mouse(this),
        x0 = event.clientX,
        y0 = event.clientY;

    dragDisable(event.view);
    nopropagation$2();
    g.mouse = [p, this.__zoom.invert(p)];
    interrupt(this);
    g.start();

    function mousemoved() {
      noevent$2();
      if (!g.moved) {
        var dx = event.clientX - x0, dy = event.clientY - y0;
        g.moved = dx * dx + dy * dy > clickDistance2;
      }
      g.zoom("mouse", constrain(translate(g.that.__zoom, g.mouse[0] = mouse(g.that), g.mouse[1]), g.extent, translateExtent));
    }

    function mouseupped() {
      v.on("mousemove.zoom mouseup.zoom", null);
      yesdrag(event.view, g.moved);
      noevent$2();
      g.end();
    }
  }

  function dblclicked() {
    if (!filter.apply(this, arguments)) return;
    var t0 = this.__zoom,
        p0 = mouse(this),
        p1 = t0.invert(p0),
        k1 = t0.k * (event.shiftKey ? 0.5 : 2),
        t1 = constrain(translate(scale(t0, k1), p0, p1), extent.apply(this, arguments), translateExtent);

    noevent$2();
    if (duration > 0) d3Select(this).transition().duration(duration).call(schedule, t1, p0);
    else d3Select(this).call(zoom.transform, t1);
  }

  function touchstarted() {
    if (!filter.apply(this, arguments)) return;
    var g = gesture(this, arguments),
        touches = event.changedTouches,
        started,
        n = touches.length, i, t, p;

    nopropagation$2();
    for (i = 0; i < n; ++i) {
      t = touches[i], p = touch(this, touches, t.identifier);
      p = [p, this.__zoom.invert(p), t.identifier];
      if (!g.touch0) g.touch0 = p, started = true;
      else if (!g.touch1) g.touch1 = p;
    }

    // If this is a dbltap, reroute to the (optional) dblclick.zoom handler.
    if (touchstarting) {
      touchstarting = clearTimeout(touchstarting);
      if (!g.touch1) {
        g.end();
        p = d3Select(this).on("dblclick.zoom");
        if (p) p.apply(this, arguments);
        return;
      }
    }

    if (started) {
      touchstarting = setTimeout(function() { touchstarting = null; }, touchDelay);
      interrupt(this);
      g.start();
    }
  }

  function touchmoved() {
    var g = gesture(this, arguments),
        touches = event.changedTouches,
        n = touches.length, i, t, p, l;

    noevent$2();
    if (touchstarting) touchstarting = clearTimeout(touchstarting);
    for (i = 0; i < n; ++i) {
      t = touches[i], p = touch(this, touches, t.identifier);
      if (g.touch0 && g.touch0[2] === t.identifier) g.touch0[0] = p;
      else if (g.touch1 && g.touch1[2] === t.identifier) g.touch1[0] = p;
    }
    t = g.that.__zoom;
    if (g.touch1) {
      var p0 = g.touch0[0], l0 = g.touch0[1],
          p1 = g.touch1[0], l1 = g.touch1[1],
          dp = (dp = p1[0] - p0[0]) * dp + (dp = p1[1] - p0[1]) * dp,
          dl = (dl = l1[0] - l0[0]) * dl + (dl = l1[1] - l0[1]) * dl;
      t = scale(t, Math.sqrt(dp / dl));
      p = [(p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2];
      l = [(l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2];
    }
    else if (g.touch0) p = g.touch0[0], l = g.touch0[1];
    else return;
    g.zoom("touch", constrain(translate(t, p, l), g.extent, translateExtent));
  }

  function touchended() {
    var g = gesture(this, arguments),
        touches = event.changedTouches,
        n = touches.length, i, t;

    nopropagation$2();
    if (touchending) clearTimeout(touchending);
    touchending = setTimeout(function() { touchending = null; }, touchDelay);
    for (i = 0; i < n; ++i) {
      t = touches[i];
      if (g.touch0 && g.touch0[2] === t.identifier) delete g.touch0;
      else if (g.touch1 && g.touch1[2] === t.identifier) delete g.touch1;
    }
    if (g.touch1 && !g.touch0) g.touch0 = g.touch1, delete g.touch1;
    if (g.touch0) g.touch0[1] = this.__zoom.invert(g.touch0[0]);
    else g.end();
  }

  zoom.wheelDelta = function(_) {
    return arguments.length ? (wheelDelta = typeof _ === "function" ? _ : constant$6(+_), zoom) : wheelDelta;
  };

  zoom.filter = function(_) {
    return arguments.length ? (filter = typeof _ === "function" ? _ : constant$6(!!_), zoom) : filter;
  };

  zoom.touchable = function(_) {
    return arguments.length ? (touchable = typeof _ === "function" ? _ : constant$6(!!_), zoom) : touchable;
  };

  zoom.extent = function(_) {
    return arguments.length ? (extent = typeof _ === "function" ? _ : constant$6([[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]]), zoom) : extent;
  };

  zoom.scaleExtent = function(_) {
    return arguments.length ? (scaleExtent[0] = +_[0], scaleExtent[1] = +_[1], zoom) : [scaleExtent[0], scaleExtent[1]];
  };

  zoom.translateExtent = function(_) {
    return arguments.length ? (translateExtent[0][0] = +_[0][0], translateExtent[1][0] = +_[1][0], translateExtent[0][1] = +_[0][1], translateExtent[1][1] = +_[1][1], zoom) : [[translateExtent[0][0], translateExtent[0][1]], [translateExtent[1][0], translateExtent[1][1]]];
  };

  zoom.constrain = function(_) {
    return arguments.length ? (constrain = _, zoom) : constrain;
  };

  zoom.duration = function(_) {
    return arguments.length ? (duration = +_, zoom) : duration;
  };

  zoom.interpolate = function(_) {
    return arguments.length ? (interpolate = _, zoom) : interpolate;
  };

  zoom.on = function() {
    var value = listeners.on.apply(listeners, arguments);
    return value === listeners ? zoom : value;
  };

  zoom.clickDistance = function(_) {
    return arguments.length ? (clickDistance2 = (_ = +_) * _, zoom) : Math.sqrt(clickDistance2);
  };

  return zoom;
}

var css$b = ".common_IconBar{display:flex;flex-flow:row;justify-content:space-between}.common_IconBar .icon-bar{display:flex;opacity:.95;flex-wrap:nowrap;margin:0;white-space:nowrap;line-height:28px;z-index:1}.common_IconBar .icon-bar a{text-align:center;padding:4px 2px;transition:all .3s ease;color:#a9a9a9}.common_IconBar .icon-bar a.disabled{opacity:.3;pointer-events:none;color:#a9a9a9}.common_IconBar .icon-bar a:hover{background-color:#f5f5f5}.common_IconBar .icon-bar a{background-color:#fff}.common_IconBar .icon-bar a.selected{background-color:#efe5e5}.common_IconBar .icon-bar div.spacer{text-align:center;height:28px;border-left:1px solid transparent;padding-top:0;padding-left:2px;margin-left:2px;padding-bottom:0}.common_IconBar .icon-bar div.spacer.vline{border-left-color:#a9a9a9;padding-left:4px;margin-left:4px}.common_IconBar .icon-bar a.spacer:hover{background-color:transparent}.common_TitleBar>.icon-bar,.common_TitleBar>.title-title{margin:4px}.common_TitleBar .title-icon{padding:4px 0;position:static}.common_TitleBar .data-count{position:absolute;visibility:hidden}.common_TitleBar .title-text{padding:4px 0;text-overflow:ellipsis;white-space:nowrap;overflow:hidden;font-size:20px;font-weight:700}.common_TitleBar .description-text{padding:0;text-overflow:ellipsis;white-space:nowrap;overflow:hidden;font-weight:400}";
styleInject(css$b);

//  Lite button for titlebar  ---
var Button = /** @class */ (function (_super) {
    __extends(Button, _super);
    function Button() {
        var _this = _super.call(this) || this;
        _this._enabled = true;
        _this._tag = "a";
        return _this;
    }
    Button.prototype.enter = function (domNode, element) {
        _super.prototype.enter.call(this, domNode, element);
        var context = this;
        element
            .attr("href", "#")
            .on("click", function () {
            context.click();
            event.preventDefault();
        })
            .on("mousemove", this.mouseMove)
            .on("mouseout", this.mouseOut)
            .append("i")
            .attr("class", "fa " + this.faChar() + " fa-lg fa-fw");
    };
    Button.prototype.update = function (domNode, element) {
        _super.prototype.update.call(this, domNode, element);
        element
            .classed("disabled", !this.enabled())
            .attr("title", this.tooltip());
    };
    //  Events  ---
    Button.prototype.click = function () {
    };
    Button.prototype.mouseMove = function (d, idx, groups) {
    };
    Button.prototype.mouseOut = function (d, idx, groups) {
    };
    Button.prototype.enabled = function (_) {
        if (!arguments.length)
            return this._enabled;
        this._enabled = _;
        return this;
    };
    return Button;
}(HTMLWidget));
Button.prototype._class += " common_Button";
Button.prototype.publish("faChar", "", "string", "FontAwesome class");
Button.prototype.publish("tooltip", "", "string", "Displays as the button alt text attribute");
//  Sticky button  ---
var StickyButton = /** @class */ (function (_super) {
    __extends(StickyButton, _super);
    function StickyButton() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    StickyButton.prototype.enter = function (domNode, element) {
        _super.prototype.enter.call(this, domNode, element);
    };
    StickyButton.prototype.update = function (domNode, element) {
        _super.prototype.update.call(this, domNode, element);
        element.classed("selected", this.selected());
    };
    return StickyButton;
}(Button));
StickyButton.prototype._class += " common_StickyButton";
StickyButton.prototype.publish("selected", false, "boolean");
//  Toggle button  ---
var ToggleButton = /** @class */ (function (_super) {
    __extends(ToggleButton, _super);
    function ToggleButton() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ToggleButton.prototype.enter = function (domNode, element) {
        var _this = this;
        element.on("click.sel", function (d, idx, groups) {
            _this
                .selected(!_this.selected())
                .render();
            event.preventDefault();
        });
        _super.prototype.enter.call(this, domNode, element);
    };
    return ToggleButton;
}(StickyButton));
ToggleButton.prototype._class += " common_ToggleButton";
//  Spacer  ---
var Spacer = /** @class */ (function (_super) {
    __extends(Spacer, _super);
    function Spacer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Spacer.prototype.enter = function (domNode, element) {
        _super.prototype.enter.call(this, domNode, element);
        element
            .attr("class", this.vline() ? "spacer vline" : "spacer")
            .attr("href", "#")
            .append("i");
    };
    return Spacer;
}(HTMLWidget));
Spacer.prototype._class += " common_Spacer";
Spacer.prototype.publish("vline", true, "boolean");
//  IconBar  ---
var IconBar = /** @class */ (function (_super) {
    __extends(IconBar, _super);
    function IconBar() {
        var _this = _super.call(this) || this;
        _this._buttons = [];
        return _this;
    }
    IconBar.prototype.enter = function (domNode, element) {
        _super.prototype.enter.call(this, domNode, element);
        this._divIconBar = element.append("div")
            .attr("class", "icon-bar");
    };
    IconBar.prototype.update = function (domNode, element) {
        var _this = this;
        _super.prototype.update.call(this, domNode, element);
        var buttons = this.buttons().filter(function (button) { return _this.hiddenButtons().indexOf(button) < 0; });
        buttons = buttons.reduce(function (prev, item, idx) {
            if (item instanceof Spacer) {
                if ((prev.length === 0 || idx === buttons.length - 1)) {
                    return prev;
                }
                else if (buttons[idx + 1] instanceof Spacer) {
                    return prev;
                }
            }
            prev.push(item);
            return prev;
        }, []);
        var icons = this._divIconBar.selectAll(".icon-bar-item").data(buttons, function (d) { return d.id(); });
        icons.enter().append("div")
            .attr("class", "icon-bar-item")
            .each(function (d) {
            d.target(this);
        })
            .merge(icons)
            .each(function (d) {
            d.render();
        });
        icons.exit()
            .each(function (d) {
            d.target(null);
        })
            .remove();
        icons.order();
    };
    IconBar.prototype.exit = function (domNode, element) {
        this.buttons().forEach(function (b) { return b.target(null); });
        _super.prototype.exit.call(this, domNode, element);
    };
    return IconBar;
}(HTMLWidget));
IconBar.prototype._class += " common_IconBar";
IconBar.prototype.publish("buttons", [], "widgetArray", null, { internal: true });
IconBar.prototype.publish("hiddenButtons", [], "widgetArray", null, { internal: true });
//  SelectionBar  ---
var SelectionButton = /** @class */ (function (_super) {
    __extends(SelectionButton, _super);
    function SelectionButton() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SelectionButton.prototype.enter = function (domNode, element) {
        var _this = this;
        element.on("click.sel", function (d, idx, groups) {
            _this.selected(true).render();
            event.preventDefault();
        });
        _super.prototype.enter.call(this, domNode, element);
    };
    SelectionButton.prototype.selected = function (_) {
        var _this = this;
        var retVal = _super.prototype.selected.apply(this, arguments);
        if (_ && this._owner) {
            this._owner.buttons().filter(function (sb) { return sb !== _this && sb instanceof SelectionButton; }).forEach(function (sb) { return sb.selected(false).render(); });
            this._owner.selected(this);
        }
        return retVal;
    };
    return SelectionButton;
}(StickyButton));
SelectionButton.prototype._class += " common_SelectionButton";
var SelectionBar = /** @class */ (function (_super) {
    __extends(SelectionBar, _super);
    function SelectionBar() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SelectionBar.prototype.buttons = function (_) {
        var _this = this;
        var retVal = _super.prototype.buttons.apply(this, arguments);
        if (arguments.length) {
            _.filter(function (b) { return b instanceof SelectionButton; }).forEach(function (sb) {
                sb._owner = _this;
            });
        }
        return retVal;
    };
    //  Events ---
    SelectionBar.prototype.selected = function (row) {
    };
    return SelectionBar;
}(IconBar));
SelectionBar.prototype._class += " common_SelectionBar";
//  Titlebar  ---
var TitleBar = /** @class */ (function (_super) {
    __extends(TitleBar, _super);
    function TitleBar() {
        return _super.call(this) || this;
    }
    TitleBar.prototype.enter = function (domNode, element) {
        this._divTitle = element.append("div")
            .attr("class", "title-title");
        this._divTitleIcon = this._divTitle.append("div")
            .attr("class", "title-icon")
            .style("font-family", this.titleIconFont())
            .style("font-size", this.titleIconFontSize() + "px")
            .style("width", this.titleIconFontSize() + "px");
        this._divTitle.append("div")
            .attr("class", "data-count");
        this._divTitleText = this._divTitle.append("div")
            .attr("class", "title-text")
            .style("font-family", this.titleFont())
            .style("font-size", this.titleFontSize() + "px");
        this._divDescriptionText = this._divTitle.append("div")
            .attr("class", "description-text")
            .style("font-family", this.descriptionFont());
        _super.prototype.enter.call(this, domNode, element);
    };
    TitleBar.prototype.update = function (domNode, element) {
        this._divTitleIcon
            .text(this.titleIcon())
            .style("display", this.titleIcon() !== "" ? "inline-block" : "none");
        this._divTitleText
            .text(this.title());
        this._divDescriptionText
            .style("display", this.description_exists() ? "block" : "none")
            .style("font-size", this.description_exists() ? this.descriptionFontSize() + "px" : null)
            .style("line-height", this.description_exists() ? this.descriptionFontSize() + "px" : null)
            .text(this.description());
        _super.prototype.update.call(this, domNode, element);
    };
    return TitleBar;
}(IconBar));
TitleBar.prototype._class += " common_TitleBar";
TitleBar.prototype.publish("titleIcon", "", "string", "Icon text");
TitleBar.prototype.publish("titleIconFont", "", "string", "Icon font-family");
TitleBar.prototype.publish("titleIconFontSize", 28, "number", "Icon font-size (pixels)");
TitleBar.prototype.publish("title", "", "string", "Title text");
TitleBar.prototype.publish("titleFont", "", "string", "Title font-family");
TitleBar.prototype.publish("titleFontSize", 20, "number", "Title font-size (pixels)");
TitleBar.prototype.publish("description", null, "string", "Description text", null, { optional: true });
TitleBar.prototype.publish("descriptionFont", "", "string", "Description font-family");
TitleBar.prototype.publish("descriptionFontSize", 10, "number", "Description font-size (pixels)");

var css$c = ".common_SVGZoomWidget .zoomBackground{pointer-events:all;fill:none}";
styleInject(css$c);

var SVGZoomWidget = /** @class */ (function (_super) {
    __extends(SVGZoomWidget, _super);
    function SVGZoomWidget() {
        var _this = _super.call(this) || this;
        _this._zoomScale = 1;
        _this._zoomTranslate = [0, 0];
        _this._mouseCapture = false;
        _this._mouseDownMode = "zoom";
        _this._iconBar = new IconBar()
            .buttons([
            new Button().faChar("fa-arrows-alt").tooltip("Zoom to fit")
                .on("click", function () {
                _this.zoomToFit();
            }),
            new Spacer().vline(false),
            new Button().faChar("fa-plus").tooltip("Zoom in")
                .on("click", function () {
                _this.zoomPlus();
            }),
            new Button().faChar("fa-minus").tooltip("Zoom out")
                .on("click", function () {
                _this.zoomMinus();
            })
        ]);
        _this._currZoom = d3Zoom()
            .scaleExtent([0.05, 20])
            .on("zoom end", function (evt) {
            _this.onZoomed();
        });
        return _this;
    }
    SVGZoomWidget.prototype.getScreenBBox = function (target) {
        var targetel = target;
        while (targetel.getScreenCTM == null && targetel.parentNode == null) {
            targetel = targetel.parentNode;
        }
        var bbox = {};
        var matrix = targetel.getScreenCTM();
        var tbbox = targetel.getBBox();
        var width = tbbox.width;
        var height = tbbox.height;
        var x = tbbox.x;
        var y = tbbox.y;
        var point = this._placeholderElement.node().createSVGPoint();
        point.x = x;
        point.y = y;
        bbox.nw = point.matrixTransform(matrix);
        point.x += width;
        bbox.ne = point.matrixTransform(matrix);
        point.y += height;
        bbox.se = point.matrixTransform(matrix);
        point.x -= width;
        bbox.sw = point.matrixTransform(matrix);
        point.y -= height / 2;
        bbox.w = point.matrixTransform(matrix);
        point.x += width;
        bbox.e = point.matrixTransform(matrix);
        point.x -= width / 2;
        point.y -= height / 2;
        bbox.n = point.matrixTransform(matrix);
        point.y += height;
        bbox.s = point.matrixTransform(matrix);
        return {
            x: bbox.nw.x,
            y: bbox.nw.y,
            width: bbox.se.x - bbox.nw.x,
            height: bbox.se.y - bbox.nw.y
        };
    };
    SVGZoomWidget.prototype.zoomScale = function () {
        return this._zoomScale;
    };
    SVGZoomWidget.prototype.zoomTranslate = function () {
        return this._zoomTranslate;
    };
    SVGZoomWidget.prototype.zoomExtent = function (range) {
        this._currZoom.scaleExtent(range);
    };
    SVGZoomWidget.prototype.zoomTo = function (translate, scale, transitionDuration) {
        if (transitionDuration === void 0) { transitionDuration = 250; }
        translate = translate || this._zoomTranslate;
        scale = scale || this._zoomScale;
        transitionDuration = transitionDuration === undefined ? this.zoomDuration() : transitionDuration;
        this.element().transition().duration(transitionDuration)
            .call(this._currZoom.transform, identity$4.translate(translate[0], translate[1]).scale(scale));
    };
    SVGZoomWidget.prototype.zoomPlus = function () {
        this.element().transition()
            .call(this._currZoom.scaleBy, 1.33);
    };
    SVGZoomWidget.prototype.zoomMinus = function () {
        this.element().transition()
            .call(this._currZoom.scaleBy, 1 / 1.33);
    };
    SVGZoomWidget.prototype.centerOnBBox = function (bbox, transitionDuration) {
        if (bbox.width && bbox.height) {
            var x = bbox.x + bbox.width / 2;
            var y = bbox.y + bbox.height / 2;
            var width = this.width();
            var height = this.height();
            var scale = this.zoomScale();
            var translate = [width / 2 - scale * x, height / 2 - scale * y];
            this.zoomTo(translate, scale, transitionDuration);
        }
    };
    SVGZoomWidget.prototype.zoomToBBox = function (bbox, transitionDuration, widthOnly, scale) {
        if (widthOnly === void 0) { widthOnly = false; }
        if (bbox.width && bbox.height) {
            var x = bbox.x + bbox.width / 2;
            var y = bbox.y + bbox.height / 2;
            var dx = bbox.width;
            var dy = bbox.height;
            var width = this.width();
            var height = this.height();
            var newScale = scale || 1 / (widthOnly ? dx / width : Math.max(dx / width, dy / height));
            if (this.zoomToFitLimit_exists() && newScale > this.zoomToFitLimit()) {
                newScale = this.zoomToFitLimit();
            }
            var translate = [width / 2 - newScale * x, height / 2 - newScale * y];
            this.zoomTo(translate, newScale, transitionDuration);
        }
    };
    SVGZoomWidget.prototype.zoomToScale = function (scale, transitionDuration) {
        if (this._renderElement) {
            var bbox = this._renderElement.node().getBBox();
            this.zoomToBBox(bbox, transitionDuration, undefined, scale);
        }
    };
    SVGZoomWidget.prototype.zoomToWidth = function (transitionDuration) {
        if (this._renderElement) {
            var bbox = this._renderElement.node().getBBox();
            this.zoomToBBox(bbox, transitionDuration, true);
        }
    };
    SVGZoomWidget.prototype.zoomToFit = function (transitionDuration) {
        if (this._renderElement) {
            var bbox = this._renderElement.node().getBBox();
            this.zoomToBBox(bbox, transitionDuration);
        }
    };
    SVGZoomWidget.prototype.onZoomed = function () {
        if (event && event.transform && this._mouseDownMode === "zoom") {
            this._zoomScale = event.transform.k;
            this._zoomTranslate = [event.transform.x, event.transform.y];
            this._zoomG.attr("transform", event.transform);
        }
    };
    SVGZoomWidget.prototype.enter = function (domNode, element) {
        var _this = this;
        _super.prototype.enter.call(this, domNode, element);
        this._zoomGrab = element.append("rect")
            .attr("class", "zoomBackground")
            .attr("width", this.width())
            .attr("height", this.height());
        this._zoomG = element.append("g");
        this._renderElement = this._zoomG.append("g");
        this._brush = d3Brush()
            .on("start brush", function () {
        })
            .on("end", function () {
            _this._brush.move(element, null);
        });
        element
            .on("mousein mouseover", function () {
            _this._mouseCapture = true;
        })
            .on("mouseout", function () {
            _this._mouseCapture = false;
        });
        d3Select(window)
            .on("keydown", function () {
            if (_this._mouseCapture && event.ctrlKey) ;
        })
            .on("keyup", function () {
            if (_this._mouseDownMode === "selection") {
                _this._mouseDownMode = "zoom";
                _this._brush.move(element, null);
                element.on(".brush", null);
                element.select(".overlay")
                    .attr("cursor", null)
                    .remove();
                element.select(".selection").remove();
                element.selectAll(".handle").remove();
                element.call(_this._currZoom);
            }
        });
        if (this._prevZoomable !== this.zoomable()) {
            if (this.zoomable()) {
                element.call(this._currZoom);
            }
            else {
                element.on(".zoom", null);
            }
            this._prevZoomable = this.zoomable();
        }
        this._iconBar.target(element.node());
    };
    SVGZoomWidget.prototype.update = function (domNode, element) {
        var _this = this;
        _super.prototype.update.call(this, domNode, element);
        this._zoomGrab
            .attr("width", this.width())
            .attr("height", this.height());
        this._iconBar
            .visible(this.zoomable() && this.showToolbar())
            .render(function (w) {
            var bbox = w.getBBox();
            w.reposition({ x: _this.width() - bbox.width - 4, y: -4 });
        });
    };
    SVGZoomWidget.prototype.exit = function (domNode, element) {
        this._iconBar.target(null);
        _super.prototype.exit.call(this, domNode, element);
    };
    return SVGZoomWidget;
}(SVGWidget));
SVGZoomWidget.prototype._class += " common_SVGZoomWidget";
SVGZoomWidget.prototype.publish("showToolbar", true, "boolean", "Show Toolbar");
SVGZoomWidget.prototype.publish("zoomable", true, "boolean", "Enable/Disable Zooming");
SVGZoomWidget.prototype.publish("zoomDuration", 250, "number", "Transition Duration");
SVGZoomWidget.prototype.publish("zoomToFitLimit", undefined, "number", "Zoom to fit limit", undefined, { optional: true });

var WidgetArray = /** @class */ (function (_super) {
    __extends(WidgetArray, _super);
    function WidgetArray() {
        return _super.call(this) || this;
    }
    __decorate([
        publish([], "widgetArray", "Widget Array"),
        __metadata("design:type", Function)
    ], WidgetArray.prototype, "content", void 0);
    return WidgetArray;
}(Widget));
WidgetArray.prototype._class += " common_WidgetArray";

export { BUILD_VERSION, Button, CanvasWidget, Class, Database, Entity, EntityCard, EntityPin, EntityRect, EntityRectList, EntityVertex, FAChar, HTMLWidget, Icon, IconBar, Image$1 as Image, List, Menu, Meta, PKG_NAME, PKG_VERSION, Palette, Platform, ProgressBar, PropertyExt, ResizeSurface, SVGGlowFilter, SVGWidget, SVGZoomWidget, SelectionBar, SelectionButton, Shape, Spacer, StickyButton, Surface, Text, TextBox, TitleBar, ToggleButton, Utility, Widget, WidgetArray, active, ascending$1 as ascending, autoType, bisectRight as bisect, bisectLeft, bisectRight, bisector, d3Brush as brush, brushSelection, brushX, brushY, point as clientPoint, color, create, creator, cross, csvFormat, csvFormatBody, csvFormatRows, csvParse, csvParseRows, cubehelix, customEvent, d3Descending as descending, d3Deviation as deviation, dispatch, d3Drag as drag, dragDisable, yesdrag as dragEnable, dsv as dsvFormat, backInOut as easeBack, backIn as easeBackIn, backInOut as easeBackInOut, backOut as easeBackOut, bounceOut as easeBounce, bounceIn as easeBounceIn, bounceInOut as easeBounceInOut, bounceOut as easeBounceOut, circleInOut as easeCircle, circleIn as easeCircleIn, circleInOut as easeCircleInOut, circleOut as easeCircleOut, cubicInOut as easeCubic, cubicIn as easeCubicIn, cubicInOut as easeCubicInOut, cubicOut as easeCubicOut, elasticOut as easeElastic, elasticIn as easeElasticIn, elasticInOut as easeElasticInOut, elasticOut as easeElasticOut, expInOut as easeExp, expIn as easeExpIn, expInOut as easeExpInOut, expOut as easeExpOut, linear$1 as easeLinear, polyInOut as easePoly, polyIn as easePolyIn, polyInOut as easePolyInOut, polyOut as easePolyOut, quadInOut as easeQuad, quadIn as easeQuadIn, quadInOut as easeQuadInOut, quadOut as easeQuadOut, sinInOut as easeSin, sinIn as easeSinIn, sinInOut as easeSinInOut, sinOut as easeSinOut, entries, event, extent, format, defaultLocale as formatDefaultLocale, formatLocale, formatPrefix, formatSpecifier, gray, hcl, histogram, hsl, interpolate, array as interpolateArray, basis$1 as interpolateBasis, basisClosed as interpolateBasisClosed, cool as interpolateCool, cubehelix$2 as interpolateCubehelix, cubehelix$3 as interpolateCubehelixDefault, cubehelixLong as interpolateCubehelixLong, date as interpolateDate, discrete as interpolateDiscrete, hcl$2 as interpolateHcl, hclLong as interpolateHclLong, hsl$2 as interpolateHsl, hslLong as interpolateHslLong, hue$1 as interpolateHue, inferno as interpolateInferno, lab$1 as interpolateLab, magma as interpolateMagma, reinterpolate as interpolateNumber, object as interpolateObject, plasma as interpolatePlasma, rainbow$1 as interpolateRainbow, interpolateRgb, rgbBasis as interpolateRgbBasis, rgbBasisClosed as interpolateRgbBasisClosed, interpolateRound, interpolateString, interpolateTransformCss, interpolateTransformSvg, d3InterpolateViridis as interpolateViridis, warm as interpolateWarm, interpolateZoom, interrupt, formatIso as isoFormat, parseIso as isoParse, keys, lab, lch, local, map$1 as map, matcher, d3Max as max, d3Mean as mean, d3Median as median, merge, d3Min as min, mouse, namespace, namespaces, d3Nest as nest, pairs, permute, piecewise, precisionFixed, precisionPrefix, precisionRound, publish, publishProxy, threshold as quantile, quantize, sequence as range, rgb, band as scaleBand, identity$3 as scaleIdentity, implicit as scaleImplicit, linear$2 as scaleLinear, log as scaleLog, ordinal as scaleOrdinal, point$1 as scalePoint, pow as scalePow, quantile as scaleQuantile, quantize$1 as scaleQuantize, sequential as scaleSequential, sqrt as scaleSqrt, threshold$1 as scaleThreshold, time as scaleTime, utcTime as scaleUtc, scan, d3SchemeCategory10 as schemeCategory10, d3SchemeCategory20 as schemeCategory20, d3SchemeCategory20b as schemeCategory20b, d3SchemeCategory20c as schemeCategory20c, d3Select as select, selectAll, selection, selector, selectorAll, set$2 as set, shuffle, styleValue as style, d3Sum as sum, freedmanDiaconis as thresholdFreedmanDiaconis, scott as thresholdScott, sturges as thresholdSturges, tickIncrement, tickStep, ticks, timeFormat, defaultLocale$1 as timeFormatDefaultLocale, formatLocale$1 as timeFormatLocale, timeParse, touch, touches, transition, transpose, tsvFormat, tsvFormatBody, tsvFormatRows, tsvParse, tsvParseRows, utcFormat, utcParse, d3Values as values, d3Variance as variance, defaultView as window, zip, d3Zoom as zoom, identity$4 as zoomIdentity, transform as zoomTransform };
//# sourceMappingURL=index.es6.js.map
