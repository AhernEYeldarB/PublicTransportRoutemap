import { HTMLWidget } from "@hpcc-js/common";
import { Cell } from "./Cell";
import "../src/Grid.css";
export declare type ICellPosition = [number, number, number, number];
export declare class Grid extends HTMLWidget {
    divItems: any;
    gridList: any;
    items: any;
    itemsMap: any;
    origItems: any;
    cellWidth: any;
    cellHeight: any;
    dragItem: any;
    dragItemPos: any;
    _d3Drag: any;
    _d3DragResize: any;
    _selectionBag: any;
    _scrollBarWidth: any;
    constructor();
    getDimensions(): {
        width: number;
        height: number;
    };
    clearContent(widget: any): void;
    setContent(row: any, col: any, widget: any, title?: any, rowSpan?: any, colSpan?: any): this;
    sortedContent(): Cell[];
    getCell(row: any, col: any): any;
    getWidgetCell(id: any): any;
    getContent(id: any): any;
    cellToGridItem(cell: any): {
        x: any;
        y: any;
        w: any;
        h: any;
        id: any;
        cell: any;
    };
    gridItemToCell(item: any): void;
    resetItemsPos(): void;
    initGridList(): void;
    killGridList(): void;
    enter(domNode: any, element: any): void;
    updateGrid(resize: any, transitionDuration?: number, _noRender?: boolean): void;
    update(domNode: any, element2: any): void;
    exit(domNode: any, element: any): void;
    _createSelectionObject(d: any): {
        _id: any;
        element: () => any;
        widget: any;
    };
    selection(_: any): any;
    selectionBagClear(): void;
    selectionBagClick(d: any): void;
    postSelectionChange(): void;
    applyLayout(layoutArr: ICellPosition[]): void;
    vizActivation(elem: any): void;
}
export interface Grid {
    designMode(): boolean;
    designMode(_: boolean): this;
    showLanes(): boolean;
    showLanes(_: boolean): this;
    fitTo(): string;
    fitTo(_: string): this;
    snapping(): string;
    snapping(_: string): this;
    snappingColumns(): number;
    snappingColumns(_: number): this;
    snappingRows(): number;
    snappingRows(_: number): this;
    snappingColumns_default(): number;
    snappingColumns_default(_: number): this;
    snappingRows_default(): number;
    snappingRows_default(_: number): this;
    gutter(): number;
    gutter(_: number): this;
    surfaceShadow(): boolean;
    surfaceShadow(_: boolean): this;
    surfacePadding(): string;
    surfacePadding(_: string): this;
    surfaceBorderWidth(): number;
    surfaceBorderWidth(_: number): this;
    surfaceBackgroundColor(): string;
    surfaceBackgroundColor(_: string): this;
    content(): Cell[];
    content(_: Cell[]): this;
}
//# sourceMappingURL=Grid.d.ts.map