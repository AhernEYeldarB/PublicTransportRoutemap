import { HTMLWidget } from "@hpcc-js/common";
import "../src/Border.css";
export declare class Border extends HTMLWidget {
    _colCount: number;
    _rowCount: number;
    _colSize: number;
    _rowSize: number;
    _shrinkWrapBoxes: any;
    _watch: any;
    _offsetX: any;
    _offsetY: any;
    _dragCell: any;
    _dragCellSize: any;
    _dragCellStartSize: any;
    _handleTop: any;
    _handleLeft: any;
    _dragPrevX: any;
    _dragPrevY: any;
    _cellSizes: any;
    contentDiv: any;
    _scrollBarWidth: any;
    _borderHandles: any;
    _sectionTypeArr: any;
    constructor();
    watchWidget(widget: any): void;
    lazyPostUpdate: (..._dummyArgs: any[]) => void;
    applyLayoutType(): void;
    cellSpecificDragHandles(sectionType: any): string[];
    borderLayoutObject(layoutType?: any): {};
    clearContent(sectionType: any): void;
    hasContent(sectionType: any, widget: any, title: any): boolean;
    setContent(sectionType: any, widget: any, title?: any): this;
    getCell(id: any): any;
    getContent(id: any): any;
    setLayoutOffsets(): void;
    dragStart(handle: any): void;
    dragTick(handle: any): void;
    dragEnd(handle: any): void;
    size(_?: any): any;
    enter(domNode: any, element: any): void;
    update(domNode: any, element: any): void;
    getCellSizes(): void;
    postUpdate(domNode: any, element: any): void;
    exit(domNode: any, element: any): void;
    designMode: {
        (): boolean;
        (_: boolean): Border;
    };
    content: {
        (): any[];
        (_: any[]): Border;
    };
    gutter: {
        (): number;
        (_: number): Border;
    };
    topShrinkWrap: {
        (): boolean;
        (_: boolean): Border;
    };
    leftShrinkWrap: {
        (): boolean;
        (_: boolean): Border;
    };
    rightShrinkWrap: {
        (): boolean;
        (_: boolean): Border;
    };
    bottomShrinkWrap: {
        (): boolean;
        (_: boolean): Border;
    };
    topSize: {
        (): number;
        (_: number): Border;
    };
    leftSize: {
        (): number;
        (_: number): Border;
    };
    rightSize: {
        (): number;
        (_: number): Border;
    };
    bottomSize: {
        (): number;
        (_: number): Border;
    };
    topPercentage: {
        (): number;
        (_: number): Border;
    };
    leftPercentage: {
        (): number;
        (_: number): Border;
    };
    rightPercentage: {
        (): number;
        (_: number): Border;
    };
    bottomPercentage: {
        (): number;
        (_: number): Border;
    };
    surfacePadding: {
        (): number;
        (_: number): Border;
    };
    sectionTypes: {
        (): any[];
        (_: any[]): Border;
    };
}
//# sourceMappingURL=Border.d.ts.map