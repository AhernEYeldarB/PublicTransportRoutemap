import { IHighlight } from "@hpcc-js/api";
import { Database, ProgressBar, Spacer, TitleBar, Widget } from "@hpcc-js/common";
import { Table } from "@hpcc-js/dgrid";
import { Border2 } from "./Border2";
import { Carousel } from "./Carousel";
import { Legend } from "./Legend";
import "../src/ChartPanel.css";
export declare class ChartPanel extends Border2 implements IHighlight {
    protected _legend: Legend;
    protected _progressBar: ProgressBar;
    protected _autoScale: boolean;
    protected _resolutions: {
        tiny: {
            width: number;
            height: number;
        };
        small: {
            width: number;
            height: number;
        };
    };
    private _modal;
    private _highlight;
    private _scale;
    private _orig_size;
    private _toggleInfo;
    private _toggleData;
    private _buttonDownload;
    private _buttonDownloadImage;
    private _toggleLegend;
    protected _spacer: Spacer;
    _titleBar: TitleBar;
    protected _carousel: Carousel;
    protected _table: Table;
    protected _widget: Widget;
    protected _hideLegendToggleList: string[];
    constructor();
    fields(): Database.Field[];
    fields(_: Database.Field[]): this;
    refreshFields(): this;
    columns(): string[];
    columns(_: string[], asDefault?: boolean): this;
    refreshColumns(): this;
    data(_?: any): any;
    refreshData(): this;
    highlight(): boolean;
    highlight(_: boolean): this;
    startProgress(): void;
    finishProgress(): void;
    buttons(): Widget[];
    buttons(_: Widget[]): this;
    downloadCSV(): this;
    downloadPNG(): this;
    highlightColumn(column?: string): this;
    getResponsiveMode(): "tiny" | "small" | "regular" | "none";
    setOrigSize(): void;
    enter(domNode: any, element: any): void;
    preUpdateTiny(element: any): void;
    preUpdateSmall(element: any): void;
    preUpdateRegular(element: any): void;
    private _prevdataVisible;
    private _prevlegendVisible;
    private _prevChartDataFamily;
    private _prevChart;
    private _prevButtons;
    update(domNode: any, element: any): void;
    postUpdateTiny(element: any): void;
    postUpdateSmall(element: any): void;
    postUpdateRegular(element: any): void;
    exit(domNode: any, element: any): void;
    click(row: any, column: any, selected: any): void;
    dblclick(row: any, column: any, selected: any): void;
    vertex_click(row: any, col: any, sel: any, more: any): void;
    vertex_dblclick(row: any, col: any, sel: any, more: any): void;
    edge_click(row: any, col: any, sel: any, more: any): void;
    edge_dblclick(row: any, col: any, sel: any, more: any): void;
}
export interface ChartPanel {
    title(): string;
    title(_: string): this;
    titleVisible(): boolean;
    titleVisible(_: boolean): this;
    titleOverlay(): boolean;
    titleOverlay(_: boolean): this;
    title_exists(): boolean;
    titleFontSize(): number;
    titleFontSize(_: number): this;
    titleFontSize_exists(): boolean;
    titleIconFontSize(): number;
    titleIconFontSize(_: number): this;
    titleIconFontSize_exists(): boolean;
    dataVisible(): boolean;
    dataVisible(_: boolean): this;
    dataButtonVisible(): boolean;
    dataButtonVisible(_: boolean): this;
    downloadButtonVisible(): boolean;
    downloadButtonVisible(_: boolean): this;
    downloadImageButtonVisible(): boolean;
    downloadImageButtonVisible(_: boolean): this;
    downloadTitle(): string;
    downloadTitle(_: string): this;
    downloadTimestampSuffix(): boolean;
    downloadTimestampSuffix(_: boolean): this;
    legendVisible(): boolean;
    legendVisible(_: boolean): this;
    legendButtonVisible(): boolean;
    legendButtonVisible(_: boolean): this;
    description(): string;
    description(_: string): this;
    description_exists(): boolean;
    widget(): Widget;
    widget(_: Widget): this;
    widget_exists(): boolean;
    enableAutoscaling(): boolean;
    enableAutoscaling(_: boolean): this;
    enableAutoscaling_exists(): boolean;
    highlightSize(): number;
    highlightSize(_: number): this;
    highlightSize_exists(): boolean;
    highlightColor(): string;
    highlightColor(_: string): this;
    highlightColor_exists(): boolean;
}
//# sourceMappingURL=ChartPanel.d.ts.map