export declare class GraphItem<S, V, E> {
    protected _graph: Graph<S, V, E>;
    readonly parent: Subgraph<S, V, E> | null;
    readonly props: {
        [key: string]: any;
    };
    constructor(graph: Graph<S, V, E>, parent: Subgraph<S, V, E> | null);
}
export declare class Subgraph<S, V, E> extends GraphItem<S, V, E> {
    readonly subgraphs: Array<Subgraph<S, V, E>>;
    readonly vertices: Array<Vertex<S, V, E>>;
    readonly edges: Array<Edge<S, V, E>>;
    readonly _?: S;
    constructor(graph: Graph<S, V, E>, parent: Subgraph<S, V, E> | null, _?: S);
    remove(full?: boolean): void;
    createSubgraph(_?: S): Subgraph<S, V, E>;
    _addSubgraph(subgraph: Subgraph<S, V, E>): void;
    _removeSubgraph(subgraph: Subgraph<S, V, E>): void;
    removeAllSubgraphs(): void;
    createVertex(_?: V): Vertex<S, V, E>;
    _addVertex(vertex: Vertex<S, V, E>): void;
    _removeVertex(vertex: Vertex<S, V, E>): void;
    removeAllVertices(): void;
    createEdge(source: Vertex<S, V, E>, target: Vertex<S, V, E>, _?: E): Edge<S, V, E>;
    _addEdge(edge: Edge<S, V, E>): void;
    _removeEdge(edge: Edge<S, V, E>): void;
    _add(item: Subgraph<S, V, E> | Vertex<S, V, E> | Edge<S, V, E>): void;
}
export declare class Vertex<S, V, E> extends GraphItem<S, V, E> {
    readonly inEdges: Array<Edge<S, V, E>>;
    readonly outEdges: Array<Edge<S, V, E>>;
    readonly edges: ReadonlyArray<Edge<S, V, E>>;
    readonly _?: V;
    constructor(graph: Graph<S, V, E>, parent: Subgraph<S, V, E>, _?: V);
    remove(full?: boolean, _?: (source: V, target: V) => E): void;
    addInEdge(edge: Edge<S, V, E>): void;
    removeInEdge(edge: Edge<S, V, E>): void;
    addOutEdge(edge: Edge<S, V, E>): void;
    removeOutEdge(edge: Edge<S, V, E>): void;
}
export declare class Edge<S, V, E> extends GraphItem<S, V, E> {
    readonly source: Vertex<S, V, E>;
    readonly target: Vertex<S, V, E>;
    readonly _?: E;
    constructor(graph: Graph<S, V, E>, parent: Subgraph<S, V, E>, source: Vertex<S, V, E>, target: Vertex<S, V, E>, _?: E);
    remove(): void;
}
export declare class Graph<S = undefined, V = undefined, E = undefined> {
    readonly root: Subgraph<S, V, E>;
    private _allSubgraphs;
    private _allSubgraphsMap;
    private _allVertices;
    private _allVerticesMap;
    private _allEdges;
    private _allEdgesMap;
    idOf: (item: Subgraph<S, V, E> | Vertex<S, V, E> | Edge<S, V, E>) => string;
    constructor(idOf?: (item: Subgraph<S, V, E> | Vertex<S, V, E> | Edge<S, V, E>) => string, _?: S);
    createSubgraph(parent?: Subgraph<S, V, E>, _?: S): Subgraph<S, V, E>;
    removeSubgraph(subgraph: Subgraph<S, V, E>, full?: boolean): void;
    readonly subgraphs: ReadonlyArray<Subgraph<S, V, E>>;
    subgraph(id: string): Subgraph<S, V, E>;
    createVertex(parent: Subgraph<S, V, E>, _?: V): Vertex<S, V, E>;
    removeVertex(vertex: Vertex<S, V, E>, full?: boolean, _?: (source: V, target: V) => E): void;
    readonly vertices: ReadonlyArray<Vertex<S, V, E>>;
    vertex(id: string): Vertex<S, V, E>;
    createEdge(parent: Subgraph<S, V, E>, source: Vertex<S, V, E>, target: Vertex<S, V, E>, _?: E): Edge<S, V, E>;
    removeEdge(edge: Edge<S, V, E>): void;
    readonly edges: ReadonlyArray<Edge<S, V, E>>;
    edge(id: string): Edge<S, V, E>;
    private _walk;
    walk(visitor: (visitor: GraphItem<S, V, E>) => "abort" | "stepover" | void): true | undefined;
    clone(): Graph<S, V, E>;
}
//# sourceMappingURL=graph.d.ts.map