/**
 * inner - return inner property of Object
 * Usage:  inner("some.prop.to.locate", obj);
 *
 * @param prop - property to locate
 * @param obj - object to locate property in
 */
export declare function inner(prop: string, obj: any): any;
/**
 * exists - return true if inner property of Object exists
 * Usage:  exists("some.prop.to.locate", obj);
 *
 * @param prop - property to locate
 * @param obj - object to locate property in
 */
export declare function exists(prop: string, obj: any): boolean;
/**
 * deepMixin - combine several objects from right to left
 * Usage:  deepMixin({a: "a"}, {b: "b"});
 *
 * @param dest - target object to mix into.
 * @param sources - objects to mix in
 */
export declare function deepMixin(dest?: any, ...sources: any[]): any;
/**
 * deepMixinT - combine several objects of Partial<T> from right to left
 * Usage:  deepMixinT<MyInterface>({a: "a"}, {b: "b"});
 *
 * Note:  Only provided as a convenience, so user gets auto completion based on destination type.
 *
 * @param dest - target object to mix into.
 * @param sources - objects to mix in
 */
export declare function deepMixinT<T>(dest?: Partial<T>, ...sources: Array<Partial<T>>): T;
/**
 * safeStingify - JSONsimilar to .stringify, except ignores circular references.
 * Usage:  safeStingify(object);
 *
 * @param obj - any object.
 */
export declare function safeStringify(obj: object): string;
export declare function isArray(arg: any): arg is any[];
export interface ClassMeta {
    module: string;
    file: string;
    class: string;
}
export declare function classID2Meta(classID: string): ClassMeta;
//# sourceMappingURL=object.d.ts.map