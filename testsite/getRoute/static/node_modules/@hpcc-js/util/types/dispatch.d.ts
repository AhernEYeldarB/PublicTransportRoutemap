import { IObserverHandle } from "./observer";
export declare type RquestAnimationFrame = (callback: FrameRequestCallback) => number | undefined;
export declare type CancelAnimationFrame = (handle: number) => void | undefined;
export declare class Message {
    readonly canConflate: boolean;
    conflate(other: Message): boolean;
    void(): boolean;
}
declare type MessageConstructor<T extends Message> = new (...args: any[]) => T;
export declare type Callback = (messages: Message[]) => void;
export { IObserverHandle };
export declare class Dispatch {
    private _observerID;
    private _observers;
    private _messageBuffer;
    constructor();
    private observers;
    private messages;
    private dispatchAll;
    private dispatch;
    hasObserver(): boolean;
    flush(): void;
    send(msg: Message): void;
    post(msg: Message): void;
    attach<T extends Message>(callback: Callback, type?: MessageConstructor<T>): IObserverHandle;
}
//# sourceMappingURL=dispatch.d.ts.map