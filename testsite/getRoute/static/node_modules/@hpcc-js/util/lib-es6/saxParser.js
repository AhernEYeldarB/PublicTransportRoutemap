import * as tslib_1 from "tslib";
import { Stack } from "./stack";
var XMLNode = /** @class */ (function () {
    function XMLNode(name) {
        this.name = "";
        this.$ = {};
        this._children = [];
        this.content = "";
        this.name = name;
    }
    XMLNode.prototype.appendAttribute = function (key, val) {
        this.$[key] = val;
    };
    XMLNode.prototype.appendContent = function (content) {
        this.content += content;
    };
    XMLNode.prototype.appendChild = function (child) {
        this._children.push(child);
    };
    XMLNode.prototype.children = function (tag) {
        if (tag === undefined) {
            return this._children;
        }
        return this._children.filter(function (xmlNode) {
            return xmlNode.name === tag;
        });
    };
    return XMLNode;
}());
export { XMLNode };
var SAXStackParser = /** @class */ (function () {
    function SAXStackParser() {
        this.stack = new Stack();
    }
    SAXStackParser.prototype.walkDoc = function (node) {
        var xmlNode = this._startXMLNode(node);
        if (node.attributes) {
            for (var i = 0; i < node.attributes.length; ++i) {
                var attribute = node.attributes.item(i);
                this.attributes(attribute.nodeName, attribute.nodeValue);
            }
        }
        this.startXMLNode(xmlNode);
        if (node.childNodes) {
            for (var i = 0; i < node.childNodes.length; ++i) {
                var childNode = node.childNodes.item(i);
                if (childNode.nodeType === childNode.TEXT_NODE) {
                    this.characters(childNode.nodeValue);
                }
                else {
                    this.walkDoc(childNode);
                }
            }
        }
        this.endXMLNode(this.stack.pop());
    };
    SAXStackParser.prototype._startXMLNode = function (node) {
        var newNode = new XMLNode(node.nodeName);
        if (!this.stack.depth()) {
            this.root = newNode;
        }
        else {
            this.stack.top().appendChild(newNode);
        }
        return this.stack.push(newNode);
    };
    SAXStackParser.prototype.parse = function (xml) {
        var domParser = new DOMParser();
        var doc = domParser.parseFromString(xml, "application/xml");
        this.startDocument();
        this.walkDoc(doc);
        this.endDocument();
    };
    //  Callbacks  ---
    SAXStackParser.prototype.startDocument = function () {
    };
    SAXStackParser.prototype.endDocument = function () {
    };
    SAXStackParser.prototype.startXMLNode = function (node) {
    };
    SAXStackParser.prototype.endXMLNode = function (node) {
    };
    SAXStackParser.prototype.attributes = function (key, val) {
        this.stack.top().appendAttribute(key, val);
    };
    SAXStackParser.prototype.characters = function (text) {
        this.stack.top().appendContent(text);
    };
    return SAXStackParser;
}());
export { SAXStackParser };
var XML2JSONParser = /** @class */ (function (_super) {
    tslib_1.__extends(XML2JSONParser, _super);
    function XML2JSONParser() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    XML2JSONParser.prototype.startXMLNode = function (node) {
        _super.prototype.startXMLNode.call(this, node);
        switch (node.name) {
            case "xs:element":
                break;
            case "xs:simpleType":
                break;
            default:
                break;
        }
    };
    XML2JSONParser.prototype.endXMLNode = function (node) {
        switch (node.name) {
            case "xs:element":
                break;
            case "xs:simpleType":
                break;
            default:
                break;
        }
        _super.prototype.endXMLNode.call(this, node);
    };
    return XML2JSONParser;
}(SAXStackParser));
export function xml2json(xml) {
    var saxParser = new XML2JSONParser();
    saxParser.parse(xml);
    return saxParser.root;
}
//# sourceMappingURL=saxParser.js.map