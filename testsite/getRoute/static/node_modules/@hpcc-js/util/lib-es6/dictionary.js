import * as tslib_1 from "tslib";
var Dictionary = /** @class */ (function () {
    function Dictionary(attrs) {
        this.store = {};
        if (attrs) {
            for (var key in attrs) {
                this.set(key, attrs[key]);
            }
        }
    }
    Dictionary.prototype.set = function (key, value) {
        var retVal = this.store[key];
        this.store[key] = value;
        return retVal;
    };
    Dictionary.prototype.get = function (key) {
        return this.store[key];
    };
    Dictionary.prototype.has = function (key) {
        return this.store[key] !== undefined;
    };
    Dictionary.prototype.remove = function (key) {
        delete this.store[key];
    };
    Dictionary.prototype.keys = function () {
        var retVal = [];
        for (var key in this.store) {
            retVal.push(key);
        }
        return retVal;
    };
    Dictionary.prototype.values = function () {
        var retVal = [];
        for (var key in this.store) {
            retVal.push(this.store[key]);
        }
        return retVal;
    };
    return Dictionary;
}());
export { Dictionary };
var DictionaryNoCase = /** @class */ (function (_super) {
    tslib_1.__extends(DictionaryNoCase, _super);
    function DictionaryNoCase(attrs) {
        return _super.call(this, attrs) || this;
    }
    DictionaryNoCase.prototype.set = function (key, value) {
        return _super.prototype.set.call(this, key.toLowerCase(), value);
    };
    DictionaryNoCase.prototype.get = function (key) {
        return _super.prototype.get.call(this, key.toLowerCase());
    };
    DictionaryNoCase.prototype.has = function (key) {
        return _super.prototype.has.call(this, key.toLowerCase());
    };
    DictionaryNoCase.prototype.remove = function (key) {
        return _super.prototype.remove.call(this, key.toLowerCase());
    };
    return DictionaryNoCase;
}(Dictionary));
export { DictionaryNoCase };
//# sourceMappingURL=dictionary.js.map