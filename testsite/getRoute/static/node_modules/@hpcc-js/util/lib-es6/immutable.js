var isArray = Array.isArray;
var keyList = Object.keys;
var hasProp = Object.prototype.hasOwnProperty;
export function deepEquals(a, b) {
    if (a === b)
        return true;
    if (a && b && typeof a === "object" && typeof b === "object") {
        var arrA = isArray(a);
        var arrB = isArray(b);
        var i = void 0;
        var length_1;
        var key = void 0;
        if (arrA && arrB) {
            length_1 = a.length;
            if (length_1 !== b.length)
                return false;
            for (i = length_1; i-- !== 0;)
                if (!deepEquals(a[i], b[i]))
                    return false;
            return true;
        }
        if (arrA !== arrB)
            return false;
        var dateA = a instanceof Date;
        var dateB = b instanceof Date;
        if (dateA !== dateB)
            return false;
        if (dateA && dateB)
            return a.getTime() === b.getTime();
        var regexpA = a instanceof RegExp;
        var regexpB = b instanceof RegExp;
        if (regexpA !== regexpB)
            return false;
        if (regexpA && regexpB)
            return a.toString() === b.toString();
        var keys = keyList(a);
        length_1 = keys.length;
        if (length_1 !== keyList(b).length)
            return false;
        for (i = length_1; i-- !== 0;)
            if (!hasProp.call(b, keys[i]))
                return false;
        for (i = length_1; i-- !== 0;) {
            key = keys[i];
            if (!deepEquals(a[key], b[key]))
                return false;
        }
        return true;
    }
    return a !== a && b !== b;
}
export function update(origItem, newItem) {
    return deepEquals(origItem, newItem) ? origItem : newItem;
}
//# sourceMappingURL=immutable.js.map