import { hashSum } from "./hashSum";
export function debounce(fn, timeout) {
    var promises = {};
    return function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        var hash = hashSum(params);
        if (!promises[hash]) {
            promises[hash] = {
                clockStart: Date.now(),
                promise: fn.apply(void 0, params).then(function (response) {
                    if (timeout === undefined) {
                        promises[hash] = null;
                    }
                    else {
                        setTimeout(function () {
                            promises[hash] = null;
                        }, Math.max(timeout - (Date.now() - promises[hash].clockStart), 0));
                    }
                    return response;
                }).catch(function (e) {
                    promises[hash] = null;
                    throw e;
                })
            };
        }
        return promises[hash].promise;
    };
}
export function promiseTimeout(ms, promise) {
    var id;
    var timeout = new Promise(function (resolve, reject) {
        id = setTimeout(function () {
            clearTimeout(id);
            reject("Timed out in " + ms + "ms.");
        }, ms);
    });
    return Promise.race([
        promise,
        timeout
    ]).then(function (response) {
        clearTimeout(id);
        return response;
    }).catch(function (e) {
        clearTimeout(id);
        throw e;
    });
}
var AsyncOrderedQueue = /** @class */ (function () {
    function AsyncOrderedQueue() {
        this._q = [];
    }
    AsyncOrderedQueue.prototype.isTop = function (p) {
        return this._q[0] === p;
    };
    AsyncOrderedQueue.prototype.push = function (p) {
        var _this = this;
        var retVal = p.then(function (response) {
            if (_this.isTop(retVal)) {
                _this._q.shift();
                return response;
            }
            return new Promise(function (resolve, reject) {
                var intervalHandler = setInterval(function () {
                    if (_this.isTop(retVal)) {
                        clearInterval(intervalHandler);
                        _this._q.shift();
                        resolve(response);
                    }
                }, 20);
            });
        });
        this._q.push(retVal);
        return retVal;
    };
    return AsyncOrderedQueue;
}());
export { AsyncOrderedQueue };
//# sourceMappingURL=debounce.js.map