var ObserverHandle = /** @class */ (function () {
    function ObserverHandle(eventTarget, eventID, callback) {
        this.eventTarget = eventTarget;
        this.eventID = eventID;
        this.callback = callback;
    }
    ObserverHandle.prototype.release = function () {
        this.eventTarget.removeObserver(this.eventID, this.callback);
    };
    ObserverHandle.prototype.unwatch = function () {
        this.release();
    };
    return ObserverHandle;
}());
var Observable = /** @class */ (function () {
    function Observable() {
        var events = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            events[_i] = arguments[_i];
        }
        this._eventObservers = {};
    }
    Observable.prototype.addObserver = function (eventID, callback) {
        var eventObservers = this._eventObservers[eventID];
        if (!eventObservers) {
            eventObservers = [];
            this._eventObservers[eventID] = eventObservers;
        }
        eventObservers.push(callback);
        return new ObserverHandle(this, eventID, callback);
    };
    Observable.prototype.removeObserver = function (eventID, callback) {
        var eventObservers = this._eventObservers[eventID];
        if (eventObservers) {
            for (var i = eventObservers.length - 1; i >= 0; --i) {
                if (eventObservers[i] === callback) {
                    eventObservers.splice(i, 1);
                }
            }
        }
        return this;
    };
    Observable.prototype.dispatchEvent = function (eventID) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        var eventObservers = this._eventObservers[eventID];
        if (eventObservers) {
            for (var _a = 0, eventObservers_1 = eventObservers; _a < eventObservers_1.length; _a++) {
                var observer = eventObservers_1[_a];
                observer.apply(void 0, args);
            }
        }
        return this;
    };
    Observable.prototype._hasObserver = function (eventID) {
        var eventObservers = this._eventObservers[eventID];
        for (var observer in eventObservers) {
            if (eventObservers[observer]) {
                return true;
            }
        }
        return false;
    };
    Observable.prototype.hasObserver = function (_eventID) {
        if (_eventID !== void 0) {
            return this._hasObserver(_eventID);
        }
        for (var eventID in this._eventObservers) {
            if (this._hasObserver(eventID)) {
                return true;
            }
        }
        return false;
    };
    return Observable;
}());
export { Observable };
//# sourceMappingURL=observer.js.map