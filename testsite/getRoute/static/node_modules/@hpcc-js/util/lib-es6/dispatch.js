import { root } from "./platform";
var requestAnimationFrame;
// let cancelAnimationFrame: CancelAnimationFrame;
(function () {
    if (root.requestAnimationFrame) {
        requestAnimationFrame = root.requestAnimationFrame;
        // cancelAnimationFrame = root.cancelAnimationFrame;
    }
    else {
        var lastTime_1 = 0;
        requestAnimationFrame = function (callback) {
            var currTime = new Date().getTime();
            var timeToCall = Math.max(0, 16 - (currTime - lastTime_1));
            var id = setTimeout(function () { return callback(currTime + timeToCall); }, timeToCall);
            lastTime_1 = currTime + timeToCall;
            return id;
        };
        // cancelAnimationFrame = function (handle: number): void {
        //     clearTimeout(handle);
        // };
    }
})();
var Message = /** @class */ (function () {
    function Message() {
    }
    Object.defineProperty(Message.prototype, "canConflate", {
        get: function () { return false; },
        enumerable: true,
        configurable: true
    });
    Message.prototype.conflate = function (other) {
        return false;
    };
    Message.prototype.void = function () {
        return false;
    };
    return Message;
}());
export { Message };
var Dispatch = /** @class */ (function () {
    function Dispatch() {
        this._observerID = 0;
        this._observers = [];
        this._messageBuffer = [];
    }
    Dispatch.prototype.observers = function () {
        return this._observers;
    };
    Dispatch.prototype.messages = function () {
        var retVal = [];
        this._messageBuffer.forEach(function (msg) {
            if (!retVal.some(function (msg2) { return msg2.canConflate && msg2.conflate(msg); })) {
                retVal.push(msg);
            }
        });
        return retVal;
    };
    Dispatch.prototype.dispatchAll = function () {
        this.dispatch(this.messages());
        this.flush();
    };
    Dispatch.prototype.dispatch = function (messages) {
        if (messages.length === 0)
            return;
        this.observers().forEach(function (o) {
            var msgs = messages.filter(function (m) { return !m.void() && (o.type === undefined || m instanceof o.type); });
            if (msgs.length) {
                o.callback(msgs);
            }
        });
    };
    Dispatch.prototype.hasObserver = function () {
        return this._observers.length > 0;
    };
    Dispatch.prototype.flush = function () {
        this._messageBuffer = [];
    };
    Dispatch.prototype.send = function (msg) {
        this.dispatch([msg]);
    };
    Dispatch.prototype.post = function (msg) {
        var _this = this;
        this._messageBuffer.push(msg);
        requestAnimationFrame(function () { return _this.dispatchAll(); });
    };
    Dispatch.prototype.attach = function (callback, type) {
        var context = this;
        var id = ++this._observerID;
        this._observers.push({ id: id, type: type, callback: callback });
        return {
            release: function () {
                context._observers = context._observers.filter(function (o) { return o.id !== id; });
            },
            unwatch: function () {
                this.release();
            }
        };
    };
    return Dispatch;
}());
export { Dispatch };
//# sourceMappingURL=dispatch.js.map